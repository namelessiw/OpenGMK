/* automatically generated by rust-bindgen 0.58.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _ptr: *mut ::chlorine::c_char,
    pub _cnt: ::chlorine::c_int,
    pub _base: *mut ::chlorine::c_char,
    pub _flag: ::chlorine::c_int,
    pub _file: ::chlorine::c_int,
    pub _charbuf: ::chlorine::c_int,
    pub _bufsiz: ::chlorine::c_int,
    pub _tmpfname: *mut ::chlorine::c_char,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        48usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._ptr as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_iobuf), "::", stringify!(_ptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._cnt as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_iobuf), "::", stringify!(_cnt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._base as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(_iobuf), "::", stringify!(_base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._flag as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(_iobuf), "::", stringify!(_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._file as *const _ as usize },
        28usize,
        concat!("Offset of field: ", stringify!(_iobuf), "::", stringify!(_file))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._charbuf as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(_iobuf), "::", stringify!(_charbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._bufsiz as *const _ as usize },
        36usize,
        concat!("Offset of field: ", stringify!(_iobuf), "::", stringify!(_bufsiz))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._tmpfname as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(_iobuf), "::", stringify!(_tmpfname))
    );
}
pub type FILE = _iobuf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnsSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockNodeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockRequest {
    _unused: [u8; 0],
}
pub type ImGuiCol = ::chlorine::c_int;
pub type ImGuiCond = ::chlorine::c_int;
pub type ImGuiDataType = ::chlorine::c_int;
pub type ImGuiDir = ::chlorine::c_int;
pub type ImGuiKey = ::chlorine::c_int;
pub type ImGuiNavInput = ::chlorine::c_int;
pub type ImGuiMouseButton = ::chlorine::c_int;
pub type ImGuiMouseCursor = ::chlorine::c_int;
pub type ImGuiSortDirection = ::chlorine::c_int;
pub type ImGuiStyleVar = ::chlorine::c_int;
pub type ImGuiTableBgTarget = ::chlorine::c_int;
pub type ImDrawFlags = ::chlorine::c_int;
pub type ImDrawListFlags = ::chlorine::c_int;
pub type ImFontAtlasFlags = ::chlorine::c_int;
pub type ImGuiBackendFlags = ::chlorine::c_int;
pub type ImGuiButtonFlags = ::chlorine::c_int;
pub type ImGuiColorEditFlags = ::chlorine::c_int;
pub type ImGuiConfigFlags = ::chlorine::c_int;
pub type ImGuiComboFlags = ::chlorine::c_int;
pub type ImGuiDockNodeFlags = ::chlorine::c_int;
pub type ImGuiDragDropFlags = ::chlorine::c_int;
pub type ImGuiFocusedFlags = ::chlorine::c_int;
pub type ImGuiHoveredFlags = ::chlorine::c_int;
pub type ImGuiInputTextFlags = ::chlorine::c_int;
pub type ImGuiKeyModFlags = ::chlorine::c_int;
pub type ImGuiPopupFlags = ::chlorine::c_int;
pub type ImGuiSelectableFlags = ::chlorine::c_int;
pub type ImGuiSliderFlags = ::chlorine::c_int;
pub type ImGuiTabBarFlags = ::chlorine::c_int;
pub type ImGuiTabItemFlags = ::chlorine::c_int;
pub type ImGuiTableFlags = ::chlorine::c_int;
pub type ImGuiTableColumnFlags = ::chlorine::c_int;
pub type ImGuiTableRowFlags = ::chlorine::c_int;
pub type ImGuiTreeNodeFlags = ::chlorine::c_int;
pub type ImGuiViewportFlags = ::chlorine::c_int;
pub type ImGuiWindowFlags = ::chlorine::c_int;
pub type ImTextureID = *mut ::chlorine::c_void;
pub type ImGuiID = ::chlorine::c_uint;
pub type ImGuiInputTextCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiInputTextCallbackData) -> ::chlorine::c_int>;
pub type ImGuiSizeCallback = ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
pub type ImGuiMemAllocFunc = ::std::option::Option<
    unsafe extern "C" fn(sz: usize, user_data: *mut ::chlorine::c_void) -> *mut ::chlorine::c_void,
>;
pub type ImGuiMemFreeFunc =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::chlorine::c_void, user_data: *mut ::chlorine::c_void)>;
pub type ImWchar16 = ::chlorine::c_ushort;
pub type ImWchar32 = ::chlorine::c_uint;
pub type ImWchar = ImWchar16;
pub type ImS8 = ::chlorine::c_schar;
pub type ImU8 = ::chlorine::c_uchar;
pub type ImS16 = ::chlorine::c_short;
pub type ImU16 = ::chlorine::c_ushort;
pub type ImS32 = ::chlorine::c_int;
pub type ImU32 = ::chlorine::c_uint;
pub type ImS64 = i64;
pub type ImU64 = u64;
pub type ImDrawCallback =
    ::std::option::Option<unsafe extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd)>;
pub type ImDrawIdx = ::chlorine::c_ushort;
pub type ImGuiDataAuthority = ::chlorine::c_int;
pub type ImGuiLayoutType = ::chlorine::c_int;
pub type ImGuiItemFlags = ::chlorine::c_int;
pub type ImGuiItemStatusFlags = ::chlorine::c_int;
pub type ImGuiOldColumnFlags = ::chlorine::c_int;
pub type ImGuiNavHighlightFlags = ::chlorine::c_int;
pub type ImGuiNavDirSourceFlags = ::chlorine::c_int;
pub type ImGuiNavMoveFlags = ::chlorine::c_int;
pub type ImGuiNextItemDataFlags = ::chlorine::c_int;
pub type ImGuiNextWindowDataFlags = ::chlorine::c_int;
pub type ImGuiSeparatorFlags = ::chlorine::c_int;
pub type ImGuiTextFlags = ::chlorine::c_int;
pub type ImGuiTooltipFlags = ::chlorine::c_int;
pub type ImGuiErrorLogCallback = ::std::option::Option<
    unsafe extern "C" fn(user_data: *mut ::chlorine::c_void, fmt: *const ::chlorine::c_char, ...),
>;
pub type ImFileHandle = *mut FILE;
pub type ImPoolIdx = ::chlorine::c_int;
pub type ImGuiContextHookCallback =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut ImGuiContext, hook: *mut ImGuiContextHook)>;
pub type ImGuiTableColumnIdx = ImS8;
pub type ImGuiTableDrawChannelIdx = ImU8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ::chlorine::c_void,
}
#[test]
fn bindgen_test_layout_ImVector() {
    assert_eq!(
        ::std::mem::size_of::<ImVector>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector>())).Size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVector), "::", stringify!(Size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector>())).Capacity as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImVector), "::", stringify!(Capacity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector>())).Data as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImVector), "::", stringify!(Data))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableSettings {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiTableSettings,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTableSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTableSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTableSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTableSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTableSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTableSettings>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableSettings),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTableSettings>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableSettings),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTableSettings>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableSettings),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImChunkStream_ImGuiTableSettings {
    pub Buf: ImVector_ImGuiTableSettings,
}
#[test]
fn bindgen_test_layout_ImChunkStream_ImGuiTableSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImChunkStream_ImGuiTableSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImChunkStream_ImGuiTableSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImChunkStream_ImGuiTableSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(ImChunkStream_ImGuiTableSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImChunkStream_ImGuiTableSettings>())).Buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImChunkStream_ImGuiTableSettings),
            "::",
            stringify!(Buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiWindowSettings {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiWindowSettings,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiWindowSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiWindowSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiWindowSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiWindowSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiWindowSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiWindowSettings>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowSettings),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiWindowSettings>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowSettings),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiWindowSettings>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowSettings),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImChunkStream_ImGuiWindowSettings {
    pub Buf: ImVector_ImGuiWindowSettings,
}
#[test]
fn bindgen_test_layout_ImChunkStream_ImGuiWindowSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImChunkStream_ImGuiWindowSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImChunkStream_ImGuiWindowSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImChunkStream_ImGuiWindowSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(ImChunkStream_ImGuiWindowSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImChunkStream_ImGuiWindowSettings>())).Buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImChunkStream_ImGuiWindowSettings),
            "::",
            stringify!(Buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan_ImGuiTableCellData {
    pub Data: *mut ImGuiTableCellData,
    pub DataEnd: *mut ImGuiTableCellData,
}
#[test]
fn bindgen_test_layout_ImSpan_ImGuiTableCellData() {
    assert_eq!(
        ::std::mem::size_of::<ImSpan_ImGuiTableCellData>(),
        16usize,
        concat!("Size of: ", stringify!(ImSpan_ImGuiTableCellData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImSpan_ImGuiTableCellData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImSpan_ImGuiTableCellData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImSpan_ImGuiTableCellData>())).Data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImSpan_ImGuiTableCellData),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImSpan_ImGuiTableCellData>())).DataEnd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImSpan_ImGuiTableCellData),
            "::",
            stringify!(DataEnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan_ImGuiTableColumn {
    pub Data: *mut ImGuiTableColumn,
    pub DataEnd: *mut ImGuiTableColumn,
}
#[test]
fn bindgen_test_layout_ImSpan_ImGuiTableColumn() {
    assert_eq!(
        ::std::mem::size_of::<ImSpan_ImGuiTableColumn>(),
        16usize,
        concat!("Size of: ", stringify!(ImSpan_ImGuiTableColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<ImSpan_ImGuiTableColumn>(),
        8usize,
        concat!("Alignment of ", stringify!(ImSpan_ImGuiTableColumn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImSpan_ImGuiTableColumn>())).Data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImSpan_ImGuiTableColumn),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImSpan_ImGuiTableColumn>())).DataEnd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImSpan_ImGuiTableColumn),
            "::",
            stringify!(DataEnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan_ImGuiTableColumnIdx {
    pub Data: *mut ImGuiTableColumnIdx,
    pub DataEnd: *mut ImGuiTableColumnIdx,
}
#[test]
fn bindgen_test_layout_ImSpan_ImGuiTableColumnIdx() {
    assert_eq!(
        ::std::mem::size_of::<ImSpan_ImGuiTableColumnIdx>(),
        16usize,
        concat!("Size of: ", stringify!(ImSpan_ImGuiTableColumnIdx))
    );
    assert_eq!(
        ::std::mem::align_of::<ImSpan_ImGuiTableColumnIdx>(),
        8usize,
        concat!("Alignment of ", stringify!(ImSpan_ImGuiTableColumnIdx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImSpan_ImGuiTableColumnIdx>())).Data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImSpan_ImGuiTableColumnIdx),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImSpan_ImGuiTableColumnIdx>())).DataEnd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImSpan_ImGuiTableColumnIdx),
            "::",
            stringify!(DataEnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawChannel {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImDrawChannel,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawChannel() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawChannel>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawChannel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawChannel>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawChannel>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawChannel>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawCmd {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImDrawCmd,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawCmd() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawCmd>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawCmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawCmd>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawCmd>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawCmd>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawIdx {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImDrawIdx,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawIdx() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawIdx>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawIdx))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawIdx>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawIdx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawIdx>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawIdx>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawIdx>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawListPtr {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut *mut ImDrawList,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawListPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawListPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawListPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawListPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawListPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawListPtr>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawListPtr>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawListPtr>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawVert {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImDrawVert,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawVert() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawVert>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawVert))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawVert>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawVert))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawVert>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawVert>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImDrawVert>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontPtr {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontPtr>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontPtr>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontPtr>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontAtlasCustomRect {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImFontAtlasCustomRect,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontAtlasCustomRect() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontAtlasCustomRect>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontAtlasCustomRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontAtlasCustomRect>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontAtlasCustomRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontAtlasCustomRect>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontAtlasCustomRect>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontAtlasCustomRect>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontConfig {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImFontConfig,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontConfig() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontConfig>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontConfig>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontConfig>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontConfig>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontGlyph {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImFontGlyph,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontGlyph() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontGlyph>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontGlyph))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontGlyph>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontGlyph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontGlyph>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontGlyph>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImFontGlyph>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiColorMod {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiColorMod,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiColorMod() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiColorMod>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiColorMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiColorMod>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiColorMod))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiColorMod>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColorMod),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiColorMod>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColorMod),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiColorMod>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColorMod),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiContextHook {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiContextHook,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiContextHook() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiContextHook>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiContextHook))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiContextHook>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiContextHook))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiContextHook>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiContextHook),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiContextHook>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiContextHook),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiContextHook>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiContextHook),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiDockNodeSettings {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiDockNodeSettings,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiDockNodeSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiDockNodeSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiDockNodeSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiDockNodeSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiDockNodeSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiDockNodeSettings>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockNodeSettings),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiDockNodeSettings>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockNodeSettings),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiDockNodeSettings>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockNodeSettings),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiDockRequest {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiDockRequest,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiDockRequest() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiDockRequest>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiDockRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiDockRequest>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiDockRequest))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiDockRequest>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockRequest),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiDockRequest>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockRequest),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiDockRequest>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockRequest),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiGroupData {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiGroupData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiGroupData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiGroupData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiGroupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiGroupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiGroupData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiGroupData>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiGroupData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiGroupData>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiGroupData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiGroupData>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiGroupData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiID {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiID,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiID() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiID>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiID))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiID>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiID>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiID),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiID>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiID),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiID>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiID),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiItemFlags {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiItemFlags,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiItemFlags() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiItemFlags>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiItemFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiItemFlags>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiItemFlags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiItemFlags>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiItemFlags),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiItemFlags>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiItemFlags),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiItemFlags>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiItemFlags),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiOldColumnData {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiOldColumnData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiOldColumnData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiOldColumnData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiOldColumnData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiOldColumnData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiOldColumnData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiOldColumnData>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumnData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiOldColumnData>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumnData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiOldColumnData>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumnData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiOldColumns {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiOldColumns,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiOldColumns() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiOldColumns>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiOldColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiOldColumns>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiOldColumns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiOldColumns>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumns),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiOldColumns>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumns),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiOldColumns>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumns),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPlatformMonitor {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiPlatformMonitor,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPlatformMonitor() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPlatformMonitor>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPlatformMonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPlatformMonitor>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPlatformMonitor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPlatformMonitor>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPlatformMonitor>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPlatformMonitor>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPopupData {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiPopupData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPopupData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPopupData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPopupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPopupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPopupData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPopupData>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPopupData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPopupData>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPopupData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPopupData>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPopupData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPtrOrIndex {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiPtrOrIndex,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPtrOrIndex() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPtrOrIndex>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPtrOrIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPtrOrIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPtrOrIndex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPtrOrIndex>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPtrOrIndex),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPtrOrIndex>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPtrOrIndex),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiPtrOrIndex>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPtrOrIndex),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiSettingsHandler {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiSettingsHandler,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiSettingsHandler() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiSettingsHandler>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiSettingsHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiSettingsHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiSettingsHandler))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiSettingsHandler>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiSettingsHandler),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiSettingsHandler>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiSettingsHandler),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiSettingsHandler>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiSettingsHandler),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiShrinkWidthItem {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiShrinkWidthItem,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiShrinkWidthItem() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiShrinkWidthItem>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiShrinkWidthItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiShrinkWidthItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiShrinkWidthItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiShrinkWidthItem>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiShrinkWidthItem),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiShrinkWidthItem>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiShrinkWidthItem),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiShrinkWidthItem>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiShrinkWidthItem),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStoragePair {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiStoragePair,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStoragePair() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStoragePair>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStoragePair))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStoragePair>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStoragePair))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiStoragePair>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStoragePair),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiStoragePair>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStoragePair),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiStoragePair>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStoragePair),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStyleMod {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiStyleMod,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStyleMod() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStyleMod>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStyleMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStyleMod>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStyleMod))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiStyleMod>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStyleMod),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiStyleMod>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStyleMod),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiStyleMod>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStyleMod),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTabItem {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiTabItem,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTabItem() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTabItem>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTabItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTabItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTabItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTabItem>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabItem),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTabItem>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabItem),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTabItem>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabItem),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableColumnSortSpecs {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiTableColumnSortSpecs,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTableColumnSortSpecs() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTableColumnSortSpecs>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTableColumnSortSpecs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTableColumnSortSpecs>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTableColumnSortSpecs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTableColumnSortSpecs>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableColumnSortSpecs),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTableColumnSortSpecs>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableColumnSortSpecs),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTableColumnSortSpecs>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableColumnSortSpecs),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTextRange {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiTextRange,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTextRange() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTextRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTextRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTextRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTextRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTextRange>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextRange),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTextRange>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextRange),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTextRange>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextRange),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiViewportPtr {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut *mut ImGuiViewport,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiViewportPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiViewportPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiViewportPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiViewportPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiViewportPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiViewportPtr>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiViewportPtr>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiViewportPtr>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiViewportPPtr {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut *mut ImGuiViewportP,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiViewportPPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiViewportPPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiViewportPPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiViewportPPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiViewportPPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiViewportPPtr>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiViewportPPtr>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiViewportPPtr>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiWindowPtr {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut *mut ImGuiWindow,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiWindowPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiWindowPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiWindowPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiWindowPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiWindowPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiWindowPtr>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiWindowPtr>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiWindowPtr>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImTextureID {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImTextureID,
}
#[test]
fn bindgen_test_layout_ImVector_ImTextureID() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImTextureID>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImTextureID))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImTextureID>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImTextureID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImTextureID>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImTextureID>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImTextureID>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImU32 {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImU32,
}
#[test]
fn bindgen_test_layout_ImVector_ImU32() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImU32>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImU32))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImU32>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImU32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImU32>())).Size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVector_ImU32), "::", stringify!(Size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImU32>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImU32>())).Data as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImVector_ImU32), "::", stringify!(Data))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImVec2 {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImVec2,
}
#[test]
fn bindgen_test_layout_ImVector_ImVec2() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImVec2>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImVec2>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImVec2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImVec2>())).Size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVector_ImVec2), "::", stringify!(Size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImVec2>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImVec2>())).Data as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImVector_ImVec2), "::", stringify!(Data))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImVec4 {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImVec4,
}
#[test]
fn bindgen_test_layout_ImVector_ImVec4() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImVec4>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImVec4>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImVec4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImVec4>())).Size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVector_ImVec4), "::", stringify!(Size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImVec4>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImVec4>())).Data as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImVector_ImVec4), "::", stringify!(Data))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImWchar {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImWchar,
}
#[test]
fn bindgen_test_layout_ImVector_ImWchar() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImWchar>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImWchar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImWchar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImWchar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImWchar>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImWchar>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImWchar>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_char {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ::chlorine::c_char,
}
#[test]
fn bindgen_test_layout_ImVector_char() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_char>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_char))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_char>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_char))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_char>())).Size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVector_char), "::", stringify!(Size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_char>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_char>())).Data as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImVector_char), "::", stringify!(Data))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_const_charPtr {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut *const ::chlorine::c_char,
}
#[test]
fn bindgen_test_layout_ImVector_const_charPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_const_charPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_const_charPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_const_charPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_const_charPtr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_const_charPtr>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_const_charPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_const_charPtr>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_const_charPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_const_charPtr>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_const_charPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_float {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut f32,
}
#[test]
fn bindgen_test_layout_ImVector_float() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_float>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_float))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_float>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_float))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_float>())).Size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVector_float), "::", stringify!(Size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_float>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_float>())).Data as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImVector_float), "::", stringify!(Data))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_unsigned_char {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ::chlorine::c_uchar,
}
#[test]
fn bindgen_test_layout_ImVector_unsigned_char() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_unsigned_char>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_unsigned_char))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_unsigned_char>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_unsigned_char))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_unsigned_char>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_unsigned_char),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_unsigned_char>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_unsigned_char),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_unsigned_char>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_unsigned_char),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2 {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_ImVec2() {
    assert_eq!(
        ::std::mem::size_of::<ImVec2>(),
        8usize,
        concat!("Size of: ", stringify!(ImVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(y))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_ImVec4() {
    assert_eq!(
        ::std::mem::size_of::<ImVec4>(),
        16usize,
        concat!("Size of: ", stringify!(ImVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec4>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec4>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec4>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec4>())).z as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec4>())).w as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(w))
    );
}
pub const ImGuiWindowFlags__ImGuiWindowFlags_None: ImGuiWindowFlags_ = 0;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoTitleBar: ImGuiWindowFlags_ = 1;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoResize: ImGuiWindowFlags_ = 2;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMove: ImGuiWindowFlags_ = 4;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollbar: ImGuiWindowFlags_ = 8;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollWithMouse: ImGuiWindowFlags_ = 16;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoCollapse: ImGuiWindowFlags_ = 32;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysAutoResize: ImGuiWindowFlags_ = 64;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBackground: ImGuiWindowFlags_ = 128;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoSavedSettings: ImGuiWindowFlags_ = 256;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMouseInputs: ImGuiWindowFlags_ = 512;
pub const ImGuiWindowFlags__ImGuiWindowFlags_MenuBar: ImGuiWindowFlags_ = 1024;
pub const ImGuiWindowFlags__ImGuiWindowFlags_HorizontalScrollbar: ImGuiWindowFlags_ = 2048;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoFocusOnAppearing: ImGuiWindowFlags_ = 4096;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBringToFrontOnFocus: ImGuiWindowFlags_ = 8192;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysVerticalScrollbar: ImGuiWindowFlags_ = 16384;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = 32768;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysUseWindowPadding: ImGuiWindowFlags_ = 65536;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavInputs: ImGuiWindowFlags_ = 262144;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavFocus: ImGuiWindowFlags_ = 524288;
pub const ImGuiWindowFlags__ImGuiWindowFlags_UnsavedDocument: ImGuiWindowFlags_ = 1048576;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDocking: ImGuiWindowFlags_ = 2097152;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNav: ImGuiWindowFlags_ = 786432;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDecoration: ImGuiWindowFlags_ = 43;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoInputs: ImGuiWindowFlags_ = 786944;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NavFlattened: ImGuiWindowFlags_ = 8388608;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildWindow: ImGuiWindowFlags_ = 16777216;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Tooltip: ImGuiWindowFlags_ = 33554432;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Popup: ImGuiWindowFlags_ = 67108864;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Modal: ImGuiWindowFlags_ = 134217728;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildMenu: ImGuiWindowFlags_ = 268435456;
pub const ImGuiWindowFlags__ImGuiWindowFlags_DockNodeHost: ImGuiWindowFlags_ = 536870912;
pub type ImGuiWindowFlags_ = ::chlorine::c_uint;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_None: ImGuiInputTextFlags_ = 0;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsDecimal: ImGuiInputTextFlags_ = 1;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsHexadecimal: ImGuiInputTextFlags_ = 2;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsUppercase: ImGuiInputTextFlags_ = 4;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsNoBlank: ImGuiInputTextFlags_ = 8;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AutoSelectAll: ImGuiInputTextFlags_ = 16;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EnterReturnsTrue: ImGuiInputTextFlags_ = 32;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCompletion: ImGuiInputTextFlags_ = 64;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackHistory: ImGuiInputTextFlags_ = 128;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackAlways: ImGuiInputTextFlags_ = 256;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCharFilter: ImGuiInputTextFlags_ = 512;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AllowTabInput: ImGuiInputTextFlags_ = 1024;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CtrlEnterForNewLine: ImGuiInputTextFlags_ = 2048;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoHorizontalScroll: ImGuiInputTextFlags_ = 4096;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AlwaysOverwrite: ImGuiInputTextFlags_ = 8192;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ReadOnly: ImGuiInputTextFlags_ = 16384;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_Password: ImGuiInputTextFlags_ = 32768;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoUndoRedo: ImGuiInputTextFlags_ = 65536;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsScientific: ImGuiInputTextFlags_ = 131072;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackResize: ImGuiInputTextFlags_ = 262144;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackEdit: ImGuiInputTextFlags_ = 524288;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_Multiline: ImGuiInputTextFlags_ = 1048576;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoMarkEdited: ImGuiInputTextFlags_ = 2097152;
pub type ImGuiInputTextFlags_ = ::chlorine::c_uint;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_None: ImGuiTreeNodeFlags_ = 0;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Selected: ImGuiTreeNodeFlags_ = 1;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Framed: ImGuiTreeNodeFlags_ = 2;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_AllowItemOverlap: ImGuiTreeNodeFlags_ = 4;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoTreePushOnOpen: ImGuiTreeNodeFlags_ = 8;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = 16;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_DefaultOpen: ImGuiTreeNodeFlags_ = 32;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnDoubleClick: ImGuiTreeNodeFlags_ = 64;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnArrow: ImGuiTreeNodeFlags_ = 128;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Leaf: ImGuiTreeNodeFlags_ = 256;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Bullet: ImGuiTreeNodeFlags_ = 512;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_FramePadding: ImGuiTreeNodeFlags_ = 1024;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanAvailWidth: ImGuiTreeNodeFlags_ = 2048;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanFullWidth: ImGuiTreeNodeFlags_ = 4096;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NavLeftJumpsBackHere: ImGuiTreeNodeFlags_ = 8192;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_CollapsingHeader: ImGuiTreeNodeFlags_ = 26;
pub type ImGuiTreeNodeFlags_ = ::chlorine::c_uint;
pub const ImGuiPopupFlags__ImGuiPopupFlags_None: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonLeft: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonRight: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMiddle: ImGuiPopupFlags_ = 2;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMask_: ImGuiPopupFlags_ = 31;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonDefault_: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverExistingPopup: ImGuiPopupFlags_ = 32;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverItems: ImGuiPopupFlags_ = 64;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupId: ImGuiPopupFlags_ = 128;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupLevel: ImGuiPopupFlags_ = 256;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopup: ImGuiPopupFlags_ = 384;
pub type ImGuiPopupFlags_ = ::chlorine::c_uint;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_None: ImGuiSelectableFlags_ = 0;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_DontClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_SpanAllColumns: ImGuiSelectableFlags_ = 2;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowDoubleClick: ImGuiSelectableFlags_ = 4;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_Disabled: ImGuiSelectableFlags_ = 8;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowItemOverlap: ImGuiSelectableFlags_ = 16;
pub type ImGuiSelectableFlags_ = ::chlorine::c_uint;
pub const ImGuiComboFlags__ImGuiComboFlags_None: ImGuiComboFlags_ = 0;
pub const ImGuiComboFlags__ImGuiComboFlags_PopupAlignLeft: ImGuiComboFlags_ = 1;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightSmall: ImGuiComboFlags_ = 2;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightRegular: ImGuiComboFlags_ = 4;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLarge: ImGuiComboFlags_ = 8;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLargest: ImGuiComboFlags_ = 16;
pub const ImGuiComboFlags__ImGuiComboFlags_NoArrowButton: ImGuiComboFlags_ = 32;
pub const ImGuiComboFlags__ImGuiComboFlags_NoPreview: ImGuiComboFlags_ = 64;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightMask_: ImGuiComboFlags_ = 30;
pub type ImGuiComboFlags_ = ::chlorine::c_uint;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_None: ImGuiTabBarFlags_ = 0;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_Reorderable: ImGuiTabBarFlags_ = 1;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_AutoSelectNewTabs: ImGuiTabBarFlags_ = 2;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_TabListPopupButton: ImGuiTabBarFlags_ = 4;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoCloseWithMiddleMouseButton: ImGuiTabBarFlags_ = 8;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTabListScrollingButtons: ImGuiTabBarFlags_ = 16;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTooltip: ImGuiTabBarFlags_ = 32;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyResizeDown: ImGuiTabBarFlags_ = 64;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyScroll: ImGuiTabBarFlags_ = 128;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyMask_: ImGuiTabBarFlags_ = 192;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyDefault_: ImGuiTabBarFlags_ = 64;
pub type ImGuiTabBarFlags_ = ::chlorine::c_uint;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_None: ImGuiTabItemFlags_ = 0;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_UnsavedDocument: ImGuiTabItemFlags_ = 1;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_SetSelected: ImGuiTabItemFlags_ = 2;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoCloseWithMiddleMouseButton: ImGuiTabItemFlags_ = 4;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoPushId: ImGuiTabItemFlags_ = 8;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoTooltip: ImGuiTabItemFlags_ = 16;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoReorder: ImGuiTabItemFlags_ = 32;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Leading: ImGuiTabItemFlags_ = 64;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Trailing: ImGuiTabItemFlags_ = 128;
pub type ImGuiTabItemFlags_ = ::chlorine::c_uint;
pub const ImGuiTableFlags__ImGuiTableFlags_None: ImGuiTableFlags_ = 0;
pub const ImGuiTableFlags__ImGuiTableFlags_Resizable: ImGuiTableFlags_ = 1;
pub const ImGuiTableFlags__ImGuiTableFlags_Reorderable: ImGuiTableFlags_ = 2;
pub const ImGuiTableFlags__ImGuiTableFlags_Hideable: ImGuiTableFlags_ = 4;
pub const ImGuiTableFlags__ImGuiTableFlags_Sortable: ImGuiTableFlags_ = 8;
pub const ImGuiTableFlags__ImGuiTableFlags_NoSavedSettings: ImGuiTableFlags_ = 16;
pub const ImGuiTableFlags__ImGuiTableFlags_ContextMenuInBody: ImGuiTableFlags_ = 32;
pub const ImGuiTableFlags__ImGuiTableFlags_RowBg: ImGuiTableFlags_ = 64;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerH: ImGuiTableFlags_ = 128;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterH: ImGuiTableFlags_ = 256;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerV: ImGuiTableFlags_ = 512;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterV: ImGuiTableFlags_ = 1024;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersH: ImGuiTableFlags_ = 384;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersV: ImGuiTableFlags_ = 1536;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInner: ImGuiTableFlags_ = 640;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuter: ImGuiTableFlags_ = 1280;
pub const ImGuiTableFlags__ImGuiTableFlags_Borders: ImGuiTableFlags_ = 1920;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBody: ImGuiTableFlags_ = 2048;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBodyUntilResize: ImGuiTableFlags_ = 4096;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedFit: ImGuiTableFlags_ = 8192;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedSame: ImGuiTableFlags_ = 16384;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchProp: ImGuiTableFlags_ = 24576;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchSame: ImGuiTableFlags_ = 32768;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendX: ImGuiTableFlags_ = 65536;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendY: ImGuiTableFlags_ = 131072;
pub const ImGuiTableFlags__ImGuiTableFlags_NoKeepColumnsVisible: ImGuiTableFlags_ = 262144;
pub const ImGuiTableFlags__ImGuiTableFlags_PreciseWidths: ImGuiTableFlags_ = 524288;
pub const ImGuiTableFlags__ImGuiTableFlags_NoClip: ImGuiTableFlags_ = 1048576;
pub const ImGuiTableFlags__ImGuiTableFlags_PadOuterX: ImGuiTableFlags_ = 2097152;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadOuterX: ImGuiTableFlags_ = 4194304;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadInnerX: ImGuiTableFlags_ = 8388608;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollX: ImGuiTableFlags_ = 16777216;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollY: ImGuiTableFlags_ = 33554432;
pub const ImGuiTableFlags__ImGuiTableFlags_SortMulti: ImGuiTableFlags_ = 67108864;
pub const ImGuiTableFlags__ImGuiTableFlags_SortTristate: ImGuiTableFlags_ = 134217728;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingMask_: ImGuiTableFlags_ = 57344;
pub type ImGuiTableFlags_ = ::chlorine::c_uint;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_None: ImGuiTableColumnFlags_ = 0;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultHide: ImGuiTableColumnFlags_ = 1;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultSort: ImGuiTableColumnFlags_ = 2;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthStretch: ImGuiTableColumnFlags_ = 4;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthFixed: ImGuiTableColumnFlags_ = 8;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoResize: ImGuiTableColumnFlags_ = 16;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoReorder: ImGuiTableColumnFlags_ = 32;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHide: ImGuiTableColumnFlags_ = 64;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoClip: ImGuiTableColumnFlags_ = 128;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSort: ImGuiTableColumnFlags_ = 256;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortAscending: ImGuiTableColumnFlags_ = 512;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortDescending: ImGuiTableColumnFlags_ = 1024;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderWidth: ImGuiTableColumnFlags_ = 2048;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortAscending: ImGuiTableColumnFlags_ = 4096;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortDescending: ImGuiTableColumnFlags_ = 8192;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentEnable: ImGuiTableColumnFlags_ = 16384;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentDisable: ImGuiTableColumnFlags_ = 32768;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsEnabled: ImGuiTableColumnFlags_ = 1048576;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsVisible: ImGuiTableColumnFlags_ = 2097152;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsSorted: ImGuiTableColumnFlags_ = 4194304;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsHovered: ImGuiTableColumnFlags_ = 8388608;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthMask_: ImGuiTableColumnFlags_ = 12;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentMask_: ImGuiTableColumnFlags_ = 49152;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_StatusMask_: ImGuiTableColumnFlags_ = 15728640;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoDirectResize_: ImGuiTableColumnFlags_ = 1073741824;
pub type ImGuiTableColumnFlags_ = ::chlorine::c_uint;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_None: ImGuiTableRowFlags_ = 0;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_Headers: ImGuiTableRowFlags_ = 1;
pub type ImGuiTableRowFlags_ = ::chlorine::c_uint;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_None: ImGuiTableBgTarget_ = 0;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg0: ImGuiTableBgTarget_ = 1;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg1: ImGuiTableBgTarget_ = 2;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_CellBg: ImGuiTableBgTarget_ = 3;
pub type ImGuiTableBgTarget_ = ::chlorine::c_uint;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_None: ImGuiFocusedFlags_ = 0;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_ChildWindows: ImGuiFocusedFlags_ = 1;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootWindow: ImGuiFocusedFlags_ = 2;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_AnyWindow: ImGuiFocusedFlags_ = 4;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootAndChildWindows: ImGuiFocusedFlags_ = 3;
pub type ImGuiFocusedFlags_ = ::chlorine::c_uint;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_None: ImGuiHoveredFlags_ = 0;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ChildWindows: ImGuiHoveredFlags_ = 1;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootWindow: ImGuiHoveredFlags_ = 2;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AnyWindow: ImGuiHoveredFlags_ = 4;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = 8;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ = 32;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlapped: ImGuiHoveredFlags_ = 64;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenDisabled: ImGuiHoveredFlags_ = 128;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RectOnly: ImGuiHoveredFlags_ = 104;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootAndChildWindows: ImGuiHoveredFlags_ = 3;
pub type ImGuiHoveredFlags_ = ::chlorine::c_uint;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_None: ImGuiDockNodeFlags_ = 0;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_KeepAliveOnly: ImGuiDockNodeFlags_ = 1;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingInCentralNode: ImGuiDockNodeFlags_ = 4;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_PassthruCentralNode: ImGuiDockNodeFlags_ = 8;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoResize: ImGuiDockNodeFlags_ = 32;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_AutoHideTabBar: ImGuiDockNodeFlags_ = 64;
pub type ImGuiDockNodeFlags_ = ::chlorine::c_uint;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_None: ImGuiDragDropFlags_ = 0;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoPreviewTooltip: ImGuiDragDropFlags_ = 1;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoDisableHover: ImGuiDragDropFlags_ = 2;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = 4;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAllowNullID: ImGuiDragDropFlags_ = 8;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceExtern: ImGuiDragDropFlags_ = 16;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAutoExpirePayload: ImGuiDragDropFlags_ = 32;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptBeforeDelivery: ImGuiDragDropFlags_ = 1024;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ = 2048;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = 4096;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptPeekOnly: ImGuiDragDropFlags_ = 3072;
pub type ImGuiDragDropFlags_ = ::chlorine::c_uint;
pub const ImGuiDataType__ImGuiDataType_S8: ImGuiDataType_ = 0;
pub const ImGuiDataType__ImGuiDataType_U8: ImGuiDataType_ = 1;
pub const ImGuiDataType__ImGuiDataType_S16: ImGuiDataType_ = 2;
pub const ImGuiDataType__ImGuiDataType_U16: ImGuiDataType_ = 3;
pub const ImGuiDataType__ImGuiDataType_S32: ImGuiDataType_ = 4;
pub const ImGuiDataType__ImGuiDataType_U32: ImGuiDataType_ = 5;
pub const ImGuiDataType__ImGuiDataType_S64: ImGuiDataType_ = 6;
pub const ImGuiDataType__ImGuiDataType_U64: ImGuiDataType_ = 7;
pub const ImGuiDataType__ImGuiDataType_Float: ImGuiDataType_ = 8;
pub const ImGuiDataType__ImGuiDataType_Double: ImGuiDataType_ = 9;
pub const ImGuiDataType__ImGuiDataType_COUNT: ImGuiDataType_ = 10;
pub type ImGuiDataType_ = ::chlorine::c_uint;
pub const ImGuiDir__ImGuiDir_None: ImGuiDir_ = -1;
pub const ImGuiDir__ImGuiDir_Left: ImGuiDir_ = 0;
pub const ImGuiDir__ImGuiDir_Right: ImGuiDir_ = 1;
pub const ImGuiDir__ImGuiDir_Up: ImGuiDir_ = 2;
pub const ImGuiDir__ImGuiDir_Down: ImGuiDir_ = 3;
pub const ImGuiDir__ImGuiDir_COUNT: ImGuiDir_ = 4;
pub type ImGuiDir_ = ::chlorine::c_int;
pub const ImGuiSortDirection__ImGuiSortDirection_None: ImGuiSortDirection_ = 0;
pub const ImGuiSortDirection__ImGuiSortDirection_Ascending: ImGuiSortDirection_ = 1;
pub const ImGuiSortDirection__ImGuiSortDirection_Descending: ImGuiSortDirection_ = 2;
pub type ImGuiSortDirection_ = ::chlorine::c_uint;
pub const ImGuiKey__ImGuiKey_Tab: ImGuiKey_ = 0;
pub const ImGuiKey__ImGuiKey_LeftArrow: ImGuiKey_ = 1;
pub const ImGuiKey__ImGuiKey_RightArrow: ImGuiKey_ = 2;
pub const ImGuiKey__ImGuiKey_UpArrow: ImGuiKey_ = 3;
pub const ImGuiKey__ImGuiKey_DownArrow: ImGuiKey_ = 4;
pub const ImGuiKey__ImGuiKey_PageUp: ImGuiKey_ = 5;
pub const ImGuiKey__ImGuiKey_PageDown: ImGuiKey_ = 6;
pub const ImGuiKey__ImGuiKey_Home: ImGuiKey_ = 7;
pub const ImGuiKey__ImGuiKey_End: ImGuiKey_ = 8;
pub const ImGuiKey__ImGuiKey_Insert: ImGuiKey_ = 9;
pub const ImGuiKey__ImGuiKey_Delete: ImGuiKey_ = 10;
pub const ImGuiKey__ImGuiKey_Backspace: ImGuiKey_ = 11;
pub const ImGuiKey__ImGuiKey_Space: ImGuiKey_ = 12;
pub const ImGuiKey__ImGuiKey_Enter: ImGuiKey_ = 13;
pub const ImGuiKey__ImGuiKey_Escape: ImGuiKey_ = 14;
pub const ImGuiKey__ImGuiKey_KeyPadEnter: ImGuiKey_ = 15;
pub const ImGuiKey__ImGuiKey_A: ImGuiKey_ = 16;
pub const ImGuiKey__ImGuiKey_C: ImGuiKey_ = 17;
pub const ImGuiKey__ImGuiKey_V: ImGuiKey_ = 18;
pub const ImGuiKey__ImGuiKey_X: ImGuiKey_ = 19;
pub const ImGuiKey__ImGuiKey_Y: ImGuiKey_ = 20;
pub const ImGuiKey__ImGuiKey_Z: ImGuiKey_ = 21;
pub const ImGuiKey__ImGuiKey_COUNT: ImGuiKey_ = 22;
pub type ImGuiKey_ = ::chlorine::c_uint;
pub const ImGuiKeyModFlags__ImGuiKeyModFlags_None: ImGuiKeyModFlags_ = 0;
pub const ImGuiKeyModFlags__ImGuiKeyModFlags_Ctrl: ImGuiKeyModFlags_ = 1;
pub const ImGuiKeyModFlags__ImGuiKeyModFlags_Shift: ImGuiKeyModFlags_ = 2;
pub const ImGuiKeyModFlags__ImGuiKeyModFlags_Alt: ImGuiKeyModFlags_ = 4;
pub const ImGuiKeyModFlags__ImGuiKeyModFlags_Super: ImGuiKeyModFlags_ = 8;
pub type ImGuiKeyModFlags_ = ::chlorine::c_uint;
pub const ImGuiNavInput__ImGuiNavInput_Activate: ImGuiNavInput_ = 0;
pub const ImGuiNavInput__ImGuiNavInput_Cancel: ImGuiNavInput_ = 1;
pub const ImGuiNavInput__ImGuiNavInput_Input: ImGuiNavInput_ = 2;
pub const ImGuiNavInput__ImGuiNavInput_Menu: ImGuiNavInput_ = 3;
pub const ImGuiNavInput__ImGuiNavInput_DpadLeft: ImGuiNavInput_ = 4;
pub const ImGuiNavInput__ImGuiNavInput_DpadRight: ImGuiNavInput_ = 5;
pub const ImGuiNavInput__ImGuiNavInput_DpadUp: ImGuiNavInput_ = 6;
pub const ImGuiNavInput__ImGuiNavInput_DpadDown: ImGuiNavInput_ = 7;
pub const ImGuiNavInput__ImGuiNavInput_LStickLeft: ImGuiNavInput_ = 8;
pub const ImGuiNavInput__ImGuiNavInput_LStickRight: ImGuiNavInput_ = 9;
pub const ImGuiNavInput__ImGuiNavInput_LStickUp: ImGuiNavInput_ = 10;
pub const ImGuiNavInput__ImGuiNavInput_LStickDown: ImGuiNavInput_ = 11;
pub const ImGuiNavInput__ImGuiNavInput_FocusPrev: ImGuiNavInput_ = 12;
pub const ImGuiNavInput__ImGuiNavInput_FocusNext: ImGuiNavInput_ = 13;
pub const ImGuiNavInput__ImGuiNavInput_TweakSlow: ImGuiNavInput_ = 14;
pub const ImGuiNavInput__ImGuiNavInput_TweakFast: ImGuiNavInput_ = 15;
pub const ImGuiNavInput__ImGuiNavInput_KeyMenu_: ImGuiNavInput_ = 16;
pub const ImGuiNavInput__ImGuiNavInput_KeyLeft_: ImGuiNavInput_ = 17;
pub const ImGuiNavInput__ImGuiNavInput_KeyRight_: ImGuiNavInput_ = 18;
pub const ImGuiNavInput__ImGuiNavInput_KeyUp_: ImGuiNavInput_ = 19;
pub const ImGuiNavInput__ImGuiNavInput_KeyDown_: ImGuiNavInput_ = 20;
pub const ImGuiNavInput__ImGuiNavInput_COUNT: ImGuiNavInput_ = 21;
pub const ImGuiNavInput__ImGuiNavInput_InternalStart_: ImGuiNavInput_ = 16;
pub type ImGuiNavInput_ = ::chlorine::c_uint;
pub const ImGuiConfigFlags__ImGuiConfigFlags_None: ImGuiConfigFlags_ = 0;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableKeyboard: ImGuiConfigFlags_ = 1;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableGamepad: ImGuiConfigFlags_ = 2;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableSetMousePos: ImGuiConfigFlags_ = 4;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavNoCaptureKeyboard: ImGuiConfigFlags_ = 8;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouse: ImGuiConfigFlags_ = 16;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouseCursorChange: ImGuiConfigFlags_ = 32;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DockingEnable: ImGuiConfigFlags_ = 64;
pub const ImGuiConfigFlags__ImGuiConfigFlags_ViewportsEnable: ImGuiConfigFlags_ = 1024;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleViewports: ImGuiConfigFlags_ = 16384;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleFonts: ImGuiConfigFlags_ = 32768;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsSRGB: ImGuiConfigFlags_ = 1048576;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsTouchScreen: ImGuiConfigFlags_ = 2097152;
pub type ImGuiConfigFlags_ = ::chlorine::c_uint;
pub const ImGuiBackendFlags__ImGuiBackendFlags_None: ImGuiBackendFlags_ = 0;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasGamepad: ImGuiBackendFlags_ = 1;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseCursors: ImGuiBackendFlags_ = 2;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasSetMousePos: ImGuiBackendFlags_ = 4;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasVtxOffset: ImGuiBackendFlags_ = 8;
pub const ImGuiBackendFlags__ImGuiBackendFlags_PlatformHasViewports: ImGuiBackendFlags_ = 1024;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseHoveredViewport: ImGuiBackendFlags_ = 2048;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasViewports: ImGuiBackendFlags_ = 4096;
pub type ImGuiBackendFlags_ = ::chlorine::c_uint;
pub const ImGuiCol__ImGuiCol_Text: ImGuiCol_ = 0;
pub const ImGuiCol__ImGuiCol_TextDisabled: ImGuiCol_ = 1;
pub const ImGuiCol__ImGuiCol_WindowBg: ImGuiCol_ = 2;
pub const ImGuiCol__ImGuiCol_ChildBg: ImGuiCol_ = 3;
pub const ImGuiCol__ImGuiCol_PopupBg: ImGuiCol_ = 4;
pub const ImGuiCol__ImGuiCol_Border: ImGuiCol_ = 5;
pub const ImGuiCol__ImGuiCol_BorderShadow: ImGuiCol_ = 6;
pub const ImGuiCol__ImGuiCol_FrameBg: ImGuiCol_ = 7;
pub const ImGuiCol__ImGuiCol_FrameBgHovered: ImGuiCol_ = 8;
pub const ImGuiCol__ImGuiCol_FrameBgActive: ImGuiCol_ = 9;
pub const ImGuiCol__ImGuiCol_TitleBg: ImGuiCol_ = 10;
pub const ImGuiCol__ImGuiCol_TitleBgActive: ImGuiCol_ = 11;
pub const ImGuiCol__ImGuiCol_TitleBgCollapsed: ImGuiCol_ = 12;
pub const ImGuiCol__ImGuiCol_MenuBarBg: ImGuiCol_ = 13;
pub const ImGuiCol__ImGuiCol_ScrollbarBg: ImGuiCol_ = 14;
pub const ImGuiCol__ImGuiCol_ScrollbarGrab: ImGuiCol_ = 15;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabHovered: ImGuiCol_ = 16;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabActive: ImGuiCol_ = 17;
pub const ImGuiCol__ImGuiCol_CheckMark: ImGuiCol_ = 18;
pub const ImGuiCol__ImGuiCol_SliderGrab: ImGuiCol_ = 19;
pub const ImGuiCol__ImGuiCol_SliderGrabActive: ImGuiCol_ = 20;
pub const ImGuiCol__ImGuiCol_Button: ImGuiCol_ = 21;
pub const ImGuiCol__ImGuiCol_ButtonHovered: ImGuiCol_ = 22;
pub const ImGuiCol__ImGuiCol_ButtonActive: ImGuiCol_ = 23;
pub const ImGuiCol__ImGuiCol_Header: ImGuiCol_ = 24;
pub const ImGuiCol__ImGuiCol_HeaderHovered: ImGuiCol_ = 25;
pub const ImGuiCol__ImGuiCol_HeaderActive: ImGuiCol_ = 26;
pub const ImGuiCol__ImGuiCol_Separator: ImGuiCol_ = 27;
pub const ImGuiCol__ImGuiCol_SeparatorHovered: ImGuiCol_ = 28;
pub const ImGuiCol__ImGuiCol_SeparatorActive: ImGuiCol_ = 29;
pub const ImGuiCol__ImGuiCol_ResizeGrip: ImGuiCol_ = 30;
pub const ImGuiCol__ImGuiCol_ResizeGripHovered: ImGuiCol_ = 31;
pub const ImGuiCol__ImGuiCol_ResizeGripActive: ImGuiCol_ = 32;
pub const ImGuiCol__ImGuiCol_Tab: ImGuiCol_ = 33;
pub const ImGuiCol__ImGuiCol_TabHovered: ImGuiCol_ = 34;
pub const ImGuiCol__ImGuiCol_TabActive: ImGuiCol_ = 35;
pub const ImGuiCol__ImGuiCol_TabUnfocused: ImGuiCol_ = 36;
pub const ImGuiCol__ImGuiCol_TabUnfocusedActive: ImGuiCol_ = 37;
pub const ImGuiCol__ImGuiCol_DockingPreview: ImGuiCol_ = 38;
pub const ImGuiCol__ImGuiCol_DockingEmptyBg: ImGuiCol_ = 39;
pub const ImGuiCol__ImGuiCol_PlotLines: ImGuiCol_ = 40;
pub const ImGuiCol__ImGuiCol_PlotLinesHovered: ImGuiCol_ = 41;
pub const ImGuiCol__ImGuiCol_PlotHistogram: ImGuiCol_ = 42;
pub const ImGuiCol__ImGuiCol_PlotHistogramHovered: ImGuiCol_ = 43;
pub const ImGuiCol__ImGuiCol_TableHeaderBg: ImGuiCol_ = 44;
pub const ImGuiCol__ImGuiCol_TableBorderStrong: ImGuiCol_ = 45;
pub const ImGuiCol__ImGuiCol_TableBorderLight: ImGuiCol_ = 46;
pub const ImGuiCol__ImGuiCol_TableRowBg: ImGuiCol_ = 47;
pub const ImGuiCol__ImGuiCol_TableRowBgAlt: ImGuiCol_ = 48;
pub const ImGuiCol__ImGuiCol_TextSelectedBg: ImGuiCol_ = 49;
pub const ImGuiCol__ImGuiCol_DragDropTarget: ImGuiCol_ = 50;
pub const ImGuiCol__ImGuiCol_NavHighlight: ImGuiCol_ = 51;
pub const ImGuiCol__ImGuiCol_NavWindowingHighlight: ImGuiCol_ = 52;
pub const ImGuiCol__ImGuiCol_NavWindowingDimBg: ImGuiCol_ = 53;
pub const ImGuiCol__ImGuiCol_ModalWindowDimBg: ImGuiCol_ = 54;
pub const ImGuiCol__ImGuiCol_COUNT: ImGuiCol_ = 55;
pub type ImGuiCol_ = ::chlorine::c_uint;
pub const ImGuiStyleVar__ImGuiStyleVar_Alpha: ImGuiStyleVar_ = 0;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowPadding: ImGuiStyleVar_ = 1;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowRounding: ImGuiStyleVar_ = 2;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowBorderSize: ImGuiStyleVar_ = 3;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowMinSize: ImGuiStyleVar_ = 4;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowTitleAlign: ImGuiStyleVar_ = 5;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildRounding: ImGuiStyleVar_ = 6;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildBorderSize: ImGuiStyleVar_ = 7;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupRounding: ImGuiStyleVar_ = 8;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupBorderSize: ImGuiStyleVar_ = 9;
pub const ImGuiStyleVar__ImGuiStyleVar_FramePadding: ImGuiStyleVar_ = 10;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameRounding: ImGuiStyleVar_ = 11;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameBorderSize: ImGuiStyleVar_ = 12;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemSpacing: ImGuiStyleVar_ = 13;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemInnerSpacing: ImGuiStyleVar_ = 14;
pub const ImGuiStyleVar__ImGuiStyleVar_IndentSpacing: ImGuiStyleVar_ = 15;
pub const ImGuiStyleVar__ImGuiStyleVar_CellPadding: ImGuiStyleVar_ = 16;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarSize: ImGuiStyleVar_ = 17;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarRounding: ImGuiStyleVar_ = 18;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabMinSize: ImGuiStyleVar_ = 19;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabRounding: ImGuiStyleVar_ = 20;
pub const ImGuiStyleVar__ImGuiStyleVar_TabRounding: ImGuiStyleVar_ = 21;
pub const ImGuiStyleVar__ImGuiStyleVar_ButtonTextAlign: ImGuiStyleVar_ = 22;
pub const ImGuiStyleVar__ImGuiStyleVar_SelectableTextAlign: ImGuiStyleVar_ = 23;
pub const ImGuiStyleVar__ImGuiStyleVar_COUNT: ImGuiStyleVar_ = 24;
pub type ImGuiStyleVar_ = ::chlorine::c_uint;
pub const ImGuiButtonFlags__ImGuiButtonFlags_None: ImGuiButtonFlags_ = 0;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonLeft: ImGuiButtonFlags_ = 1;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonRight: ImGuiButtonFlags_ = 2;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMiddle: ImGuiButtonFlags_ = 4;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMask_: ImGuiButtonFlags_ = 7;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonDefault_: ImGuiButtonFlags_ = 1;
pub type ImGuiButtonFlags_ = ::chlorine::c_uint;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_None: ImGuiColorEditFlags_ = 0;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoAlpha: ImGuiColorEditFlags_ = 2;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoPicker: ImGuiColorEditFlags_ = 4;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoOptions: ImGuiColorEditFlags_ = 8;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSmallPreview: ImGuiColorEditFlags_ = 16;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoInputs: ImGuiColorEditFlags_ = 32;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoTooltip: ImGuiColorEditFlags_ = 64;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoLabel: ImGuiColorEditFlags_ = 128;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSidePreview: ImGuiColorEditFlags_ = 256;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoDragDrop: ImGuiColorEditFlags_ = 512;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoBorder: ImGuiColorEditFlags_ = 1024;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaBar: ImGuiColorEditFlags_ = 65536;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreview: ImGuiColorEditFlags_ = 131072;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreviewHalf: ImGuiColorEditFlags_ = 262144;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_HDR: ImGuiColorEditFlags_ = 524288;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayRGB: ImGuiColorEditFlags_ = 1048576;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHSV: ImGuiColorEditFlags_ = 2097152;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHex: ImGuiColorEditFlags_ = 4194304;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Uint8: ImGuiColorEditFlags_ = 8388608;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Float: ImGuiColorEditFlags_ = 16777216;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueBar: ImGuiColorEditFlags_ = 33554432;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueWheel: ImGuiColorEditFlags_ = 67108864;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputRGB: ImGuiColorEditFlags_ = 134217728;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputHSV: ImGuiColorEditFlags_ = 268435456;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags__OptionsDefault: ImGuiColorEditFlags_ = 177209344;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags__DisplayMask: ImGuiColorEditFlags_ = 7340032;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags__DataTypeMask: ImGuiColorEditFlags_ = 25165824;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags__PickerMask: ImGuiColorEditFlags_ = 100663296;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags__InputMask: ImGuiColorEditFlags_ = 402653184;
pub type ImGuiColorEditFlags_ = ::chlorine::c_uint;
pub const ImGuiSliderFlags__ImGuiSliderFlags_None: ImGuiSliderFlags_ = 0;
pub const ImGuiSliderFlags__ImGuiSliderFlags_AlwaysClamp: ImGuiSliderFlags_ = 16;
pub const ImGuiSliderFlags__ImGuiSliderFlags_Logarithmic: ImGuiSliderFlags_ = 32;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoRoundToFormat: ImGuiSliderFlags_ = 64;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoInput: ImGuiSliderFlags_ = 128;
pub const ImGuiSliderFlags__ImGuiSliderFlags_InvalidMask_: ImGuiSliderFlags_ = 1879048207;
pub type ImGuiSliderFlags_ = ::chlorine::c_uint;
pub const ImGuiMouseButton__ImGuiMouseButton_Left: ImGuiMouseButton_ = 0;
pub const ImGuiMouseButton__ImGuiMouseButton_Right: ImGuiMouseButton_ = 1;
pub const ImGuiMouseButton__ImGuiMouseButton_Middle: ImGuiMouseButton_ = 2;
pub const ImGuiMouseButton__ImGuiMouseButton_COUNT: ImGuiMouseButton_ = 5;
pub type ImGuiMouseButton_ = ::chlorine::c_uint;
pub const ImGuiMouseCursor__ImGuiMouseCursor_None: ImGuiMouseCursor_ = -1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Arrow: ImGuiMouseCursor_ = 0;
pub const ImGuiMouseCursor__ImGuiMouseCursor_TextInput: ImGuiMouseCursor_ = 1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeAll: ImGuiMouseCursor_ = 2;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNS: ImGuiMouseCursor_ = 3;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeEW: ImGuiMouseCursor_ = 4;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNESW: ImGuiMouseCursor_ = 5;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNWSE: ImGuiMouseCursor_ = 6;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Hand: ImGuiMouseCursor_ = 7;
pub const ImGuiMouseCursor__ImGuiMouseCursor_NotAllowed: ImGuiMouseCursor_ = 8;
pub const ImGuiMouseCursor__ImGuiMouseCursor_COUNT: ImGuiMouseCursor_ = 9;
pub type ImGuiMouseCursor_ = ::chlorine::c_int;
pub const ImGuiCond__ImGuiCond_None: ImGuiCond_ = 0;
pub const ImGuiCond__ImGuiCond_Always: ImGuiCond_ = 1;
pub const ImGuiCond__ImGuiCond_Once: ImGuiCond_ = 2;
pub const ImGuiCond__ImGuiCond_FirstUseEver: ImGuiCond_ = 4;
pub const ImGuiCond__ImGuiCond_Appearing: ImGuiCond_ = 8;
pub type ImGuiCond_ = ::chlorine::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyle {
    pub Alpha: f32,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub WindowMinSize: ImVec2,
    pub WindowTitleAlign: ImVec2,
    pub WindowMenuButtonPosition: ImGuiDir,
    pub ChildRounding: f32,
    pub ChildBorderSize: f32,
    pub PopupRounding: f32,
    pub PopupBorderSize: f32,
    pub FramePadding: ImVec2,
    pub FrameRounding: f32,
    pub FrameBorderSize: f32,
    pub ItemSpacing: ImVec2,
    pub ItemInnerSpacing: ImVec2,
    pub CellPadding: ImVec2,
    pub TouchExtraPadding: ImVec2,
    pub IndentSpacing: f32,
    pub ColumnsMinSpacing: f32,
    pub ScrollbarSize: f32,
    pub ScrollbarRounding: f32,
    pub GrabMinSize: f32,
    pub GrabRounding: f32,
    pub LogSliderDeadzone: f32,
    pub TabRounding: f32,
    pub TabBorderSize: f32,
    pub TabMinWidthForCloseButton: f32,
    pub ColorButtonPosition: ImGuiDir,
    pub ButtonTextAlign: ImVec2,
    pub SelectableTextAlign: ImVec2,
    pub DisplayWindowPadding: ImVec2,
    pub DisplaySafeAreaPadding: ImVec2,
    pub MouseCursorScale: f32,
    pub AntiAliasedLines: bool,
    pub AntiAliasedLinesUseTex: bool,
    pub AntiAliasedFill: bool,
    pub CurveTessellationTol: f32,
    pub CircleTessellationMaxError: f32,
    pub Colors: [ImVec4; 55usize],
}
#[test]
fn bindgen_test_layout_ImGuiStyle() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyle>(),
        1076usize,
        concat!("Size of: ", stringify!(ImGuiStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyle>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).Alpha as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiStyle), "::", stringify!(Alpha))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowPadding as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowRounding as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowBorderSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowMinSize as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowMinSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowTitleAlign as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowTitleAlign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).WindowMenuButtonPosition as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(WindowMenuButtonPosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ChildRounding as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ChildRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ChildBorderSize as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ChildBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).PopupRounding as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(PopupRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).PopupBorderSize as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(PopupBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).FramePadding as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FramePadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).FrameRounding as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FrameRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).FrameBorderSize as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(FrameBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ItemSpacing as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ItemSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ItemInnerSpacing as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ItemInnerSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).CellPadding as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CellPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).TouchExtraPadding as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TouchExtraPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).IndentSpacing as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(IndentSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ColumnsMinSpacing as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ColumnsMinSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ScrollbarSize as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ScrollbarSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ScrollbarRounding as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ScrollbarRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).GrabMinSize as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(GrabMinSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).GrabRounding as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(GrabRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).LogSliderDeadzone as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(LogSliderDeadzone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).TabRounding as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).TabBorderSize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).TabMinWidthForCloseButton as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(TabMinWidthForCloseButton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ColorButtonPosition as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ColorButtonPosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).ButtonTextAlign as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(ButtonTextAlign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).SelectableTextAlign as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(SelectableTextAlign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).DisplayWindowPadding as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DisplayWindowPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).DisplaySafeAreaPadding as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(DisplaySafeAreaPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).MouseCursorScale as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(MouseCursorScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).AntiAliasedLines as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedLines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).AntiAliasedLinesUseTex as *const _ as usize },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedLinesUseTex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).AntiAliasedFill as *const _ as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(AntiAliasedFill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).CurveTessellationTol as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CurveTessellationTol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).CircleTessellationMaxError as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyle),
            "::",
            stringify!(CircleTessellationMaxError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyle>())).Colors as *const _ as usize },
        196usize,
        concat!("Offset of field: ", stringify!(ImGuiStyle), "::", stringify!(Colors))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiIO {
    pub ConfigFlags: ImGuiConfigFlags,
    pub BackendFlags: ImGuiBackendFlags,
    pub DisplaySize: ImVec2,
    pub DeltaTime: f32,
    pub IniSavingRate: f32,
    pub IniFilename: *const ::chlorine::c_char,
    pub LogFilename: *const ::chlorine::c_char,
    pub MouseDoubleClickTime: f32,
    pub MouseDoubleClickMaxDist: f32,
    pub MouseDragThreshold: f32,
    pub KeyMap: [::chlorine::c_int; 22usize],
    pub KeyRepeatDelay: f32,
    pub KeyRepeatRate: f32,
    pub UserData: *mut ::chlorine::c_void,
    pub Fonts: *mut ImFontAtlas,
    pub FontGlobalScale: f32,
    pub FontAllowUserScaling: bool,
    pub FontDefault: *mut ImFont,
    pub DisplayFramebufferScale: ImVec2,
    pub ConfigDockingNoSplit: bool,
    pub ConfigDockingWithShift: bool,
    pub ConfigDockingAlwaysTabBar: bool,
    pub ConfigDockingTransparentPayload: bool,
    pub ConfigViewportsNoAutoMerge: bool,
    pub ConfigViewportsNoTaskBarIcon: bool,
    pub ConfigViewportsNoDecoration: bool,
    pub ConfigViewportsNoDefaultParent: bool,
    pub MouseDrawCursor: bool,
    pub ConfigMacOSXBehaviors: bool,
    pub ConfigInputTextCursorBlink: bool,
    pub ConfigDragClickToInputText: bool,
    pub ConfigWindowsResizeFromEdges: bool,
    pub ConfigWindowsMoveFromTitleBarOnly: bool,
    pub ConfigMemoryCompactTimer: f32,
    pub BackendPlatformName: *const ::chlorine::c_char,
    pub BackendRendererName: *const ::chlorine::c_char,
    pub BackendPlatformUserData: *mut ::chlorine::c_void,
    pub BackendRendererUserData: *mut ::chlorine::c_void,
    pub BackendLanguageUserData: *mut ::chlorine::c_void,
    pub GetClipboardTextFn:
        ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::chlorine::c_void) -> *const ::chlorine::c_char>,
    pub SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(user_data: *mut ::chlorine::c_void, text: *const ::chlorine::c_char),
    >,
    pub ClipboardUserData: *mut ::chlorine::c_void,
    pub MousePos: ImVec2,
    pub MouseDown: [bool; 5usize],
    pub MouseWheel: f32,
    pub MouseWheelH: f32,
    pub MouseHoveredViewport: ImGuiID,
    pub KeyCtrl: bool,
    pub KeyShift: bool,
    pub KeyAlt: bool,
    pub KeySuper: bool,
    pub KeysDown: [bool; 512usize],
    pub NavInputs: [f32; 21usize],
    pub WantCaptureMouse: bool,
    pub WantCaptureKeyboard: bool,
    pub WantTextInput: bool,
    pub WantSetMousePos: bool,
    pub WantSaveIniSettings: bool,
    pub NavActive: bool,
    pub NavVisible: bool,
    pub Framerate: f32,
    pub MetricsRenderVertices: ::chlorine::c_int,
    pub MetricsRenderIndices: ::chlorine::c_int,
    pub MetricsRenderWindows: ::chlorine::c_int,
    pub MetricsActiveWindows: ::chlorine::c_int,
    pub MetricsActiveAllocations: ::chlorine::c_int,
    pub MouseDelta: ImVec2,
    pub KeyMods: ImGuiKeyModFlags,
    pub MousePosPrev: ImVec2,
    pub MouseClickedPos: [ImVec2; 5usize],
    pub MouseClickedTime: [f64; 5usize],
    pub MouseClicked: [bool; 5usize],
    pub MouseDoubleClicked: [bool; 5usize],
    pub MouseReleased: [bool; 5usize],
    pub MouseDownOwned: [bool; 5usize],
    pub MouseDownWasDoubleClick: [bool; 5usize],
    pub MouseDownDuration: [f32; 5usize],
    pub MouseDownDurationPrev: [f32; 5usize],
    pub MouseDragMaxDistanceAbs: [ImVec2; 5usize],
    pub MouseDragMaxDistanceSqr: [f32; 5usize],
    pub KeysDownDuration: [f32; 512usize],
    pub KeysDownDurationPrev: [f32; 512usize],
    pub NavInputsDownDuration: [f32; 21usize],
    pub NavInputsDownDurationPrev: [f32; 21usize],
    pub PenPressure: f32,
    pub InputQueueSurrogate: ImWchar16,
    pub InputQueueCharacters: ImVector_ImWchar,
}
#[test]
fn bindgen_test_layout_ImGuiIO() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiIO>(),
        5456usize,
        concat!("Size of: ", stringify!(ImGuiIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiIO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigFlags as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(ConfigFlags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendFlags as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(BackendFlags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DisplaySize as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(DisplaySize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DeltaTime as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(DeltaTime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).IniSavingRate as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(IniSavingRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).IniFilename as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(IniFilename))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).LogFilename as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(LogFilename))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDoubleClickTime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClickTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDoubleClickMaxDist as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClickMaxDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDragThreshold as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragThreshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyMap as *const _ as usize },
        52usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(KeyMap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyRepeatDelay as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyRepeatDelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyRepeatRate as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeyRepeatRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).UserData as *const _ as usize },
        152usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(UserData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).Fonts as *const _ as usize },
        160usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(Fonts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).FontGlobalScale as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontGlobalScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).FontAllowUserScaling as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(FontAllowUserScaling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).FontDefault as *const _ as usize },
        176usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(FontDefault))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).DisplayFramebufferScale as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(DisplayFramebufferScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigDockingNoSplit as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingNoSplit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigDockingWithShift as *const _ as usize },
        193usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingWithShift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigDockingAlwaysTabBar as *const _ as usize },
        194usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingAlwaysTabBar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigDockingTransparentPayload as *const _ as usize },
        195usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDockingTransparentPayload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigViewportsNoAutoMerge as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoAutoMerge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigViewportsNoTaskBarIcon as *const _ as usize },
        197usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoTaskBarIcon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigViewportsNoDecoration as *const _ as usize },
        198usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoDecoration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigViewportsNoDefaultParent as *const _ as usize },
        199usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigViewportsNoDefaultParent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDrawCursor as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDrawCursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigMacOSXBehaviors as *const _ as usize },
        201usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigMacOSXBehaviors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigInputTextCursorBlink as *const _ as usize },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigInputTextCursorBlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigDragClickToInputText as *const _ as usize },
        203usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigDragClickToInputText)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigWindowsResizeFromEdges as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigWindowsResizeFromEdges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigWindowsMoveFromTitleBarOnly as *const _ as usize },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigWindowsMoveFromTitleBarOnly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ConfigMemoryCompactTimer as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ConfigMemoryCompactTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendPlatformName as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendPlatformName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendRendererName as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendRendererName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendPlatformUserData as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendPlatformUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendRendererUserData as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendRendererUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).BackendLanguageUserData as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(BackendLanguageUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).GetClipboardTextFn as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(GetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).SetClipboardTextFn as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(SetClipboardTextFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).ClipboardUserData as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(ClipboardUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MousePos as *const _ as usize },
        280usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(MousePos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDown as *const _ as usize },
        288usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(MouseDown))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseWheel as *const _ as usize },
        296usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(MouseWheel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseWheelH as *const _ as usize },
        300usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(MouseWheelH))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseHoveredViewport as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseHoveredViewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyCtrl as *const _ as usize },
        308usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(KeyCtrl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyShift as *const _ as usize },
        309usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(KeyShift))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyAlt as *const _ as usize },
        310usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(KeyAlt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeySuper as *const _ as usize },
        311usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(KeySuper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeysDown as *const _ as usize },
        312usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(KeysDown))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavInputs as *const _ as usize },
        824usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(NavInputs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantCaptureMouse as *const _ as usize },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantCaptureMouse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantCaptureKeyboard as *const _ as usize },
        909usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantCaptureKeyboard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantTextInput as *const _ as usize },
        910usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantTextInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantSetMousePos as *const _ as usize },
        911usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantSetMousePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).WantSaveIniSettings as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(WantSaveIniSettings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavActive as *const _ as usize },
        913usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(NavActive))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavVisible as *const _ as usize },
        914usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(NavVisible))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).Framerate as *const _ as usize },
        916usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(Framerate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsRenderVertices as *const _ as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderVertices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsRenderIndices as *const _ as usize },
        924usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderIndices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsRenderWindows as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsRenderWindows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsActiveWindows as *const _ as usize },
        932usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsActiveWindows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MetricsActiveAllocations as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MetricsActiveAllocations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDelta as *const _ as usize },
        940usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(MouseDelta))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeyMods as *const _ as usize },
        948usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(KeyMods))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MousePosPrev as *const _ as usize },
        952usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(MousePosPrev))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseClickedPos as *const _ as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseClickedTime as *const _ as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseClickedTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseClicked as *const _ as usize },
        1040usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(MouseClicked))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDoubleClicked as *const _ as usize },
        1045usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDoubleClicked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseReleased as *const _ as usize },
        1050usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseReleased)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownOwned as *const _ as usize },
        1055usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownOwned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownWasDoubleClick as *const _ as usize },
        1060usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownWasDoubleClick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownDuration as *const _ as usize },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownDuration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDownDurationPrev as *const _ as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDragMaxDistanceAbs as *const _ as usize },
        1108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragMaxDistanceAbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).MouseDragMaxDistanceSqr as *const _ as usize },
        1148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(MouseDragMaxDistanceSqr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeysDownDuration as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeysDownDuration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).KeysDownDurationPrev as *const _ as usize },
        3216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(KeysDownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavInputsDownDuration as *const _ as usize },
        5264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavInputsDownDuration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).NavInputsDownDurationPrev as *const _ as usize },
        5348usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(NavInputsDownDurationPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).PenPressure as *const _ as usize },
        5432usize,
        concat!("Offset of field: ", stringify!(ImGuiIO), "::", stringify!(PenPressure))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).InputQueueSurrogate as *const _ as usize },
        5436usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(InputQueueSurrogate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiIO>())).InputQueueCharacters as *const _ as usize },
        5440usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiIO),
            "::",
            stringify!(InputQueueCharacters)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextCallbackData {
    pub EventFlag: ImGuiInputTextFlags,
    pub Flags: ImGuiInputTextFlags,
    pub UserData: *mut ::chlorine::c_void,
    pub EventChar: ImWchar,
    pub EventKey: ImGuiKey,
    pub Buf: *mut ::chlorine::c_char,
    pub BufTextLen: ::chlorine::c_int,
    pub BufSize: ::chlorine::c_int,
    pub BufDirty: bool,
    pub CursorPos: ::chlorine::c_int,
    pub SelectionStart: ::chlorine::c_int,
    pub SelectionEnd: ::chlorine::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextCallbackData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextCallbackData>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiInputTextCallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextCallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextCallbackData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).EventFlag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).Flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).UserData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).EventChar as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).EventKey as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(EventKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).Buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).BufTextLen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufTextLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).BufSize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).BufDirty as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(BufDirty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).CursorPos as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(CursorPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).SelectionStart as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(SelectionStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextCallbackData>())).SelectionEnd as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextCallbackData),
            "::",
            stringify!(SelectionEnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSizeCallbackData {
    pub UserData: *mut ::chlorine::c_void,
    pub Pos: ImVec2,
    pub CurrentSize: ImVec2,
    pub DesiredSize: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiSizeCallbackData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiSizeCallbackData>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiSizeCallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSizeCallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSizeCallbackData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).UserData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).Pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).CurrentSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(CurrentSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSizeCallbackData>())).DesiredSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSizeCallbackData),
            "::",
            stringify!(DesiredSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowClass {
    pub ClassId: ImGuiID,
    pub ParentViewportId: ImGuiID,
    pub ViewportFlagsOverrideSet: ImGuiViewportFlags,
    pub ViewportFlagsOverrideClear: ImGuiViewportFlags,
    pub TabItemFlagsOverrideSet: ImGuiTabItemFlags,
    pub DockNodeFlagsOverrideSet: ImGuiDockNodeFlags,
    pub DockNodeFlagsOverrideClear: ImGuiDockNodeFlags,
    pub DockingAlwaysTabBar: bool,
    pub DockingAllowUnclassed: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindowClass() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowClass>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiWindowClass))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowClass>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowClass>())).ClassId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ClassId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowClass>())).ParentViewportId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ParentViewportId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowClass>())).ViewportFlagsOverrideSet as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ViewportFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowClass>())).ViewportFlagsOverrideClear as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(ViewportFlagsOverrideClear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowClass>())).TabItemFlagsOverrideSet as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(TabItemFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowClass>())).DockNodeFlagsOverrideSet as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockNodeFlagsOverrideSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowClass>())).DockNodeFlagsOverrideClear as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockNodeFlagsOverrideClear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowClass>())).DockingAlwaysTabBar as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockingAlwaysTabBar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowClass>())).DockingAllowUnclassed as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowClass),
            "::",
            stringify!(DockingAllowUnclassed)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiPayload {
    pub Data: *mut ::chlorine::c_void,
    pub DataSize: ::chlorine::c_int,
    pub SourceId: ImGuiID,
    pub SourceParentId: ImGuiID,
    pub DataFrameCount: ::chlorine::c_int,
    pub DataType: [::chlorine::c_char; 33usize],
    pub Preview: bool,
    pub Delivery: bool,
}
#[test]
fn bindgen_test_layout_ImGuiPayload() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPayload>(),
        64usize,
        concat!("Size of: ", stringify!(ImGuiPayload))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPayload>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPayload))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).Data as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiPayload), "::", stringify!(Data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).DataSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).SourceId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(SourceId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).SourceParentId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(SourceParentId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).DataFrameCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataFrameCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).DataType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(DataType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).Preview as *const _ as usize },
        57usize,
        concat!("Offset of field: ", stringify!(ImGuiPayload), "::", stringify!(Preview))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPayload>())).Delivery as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPayload),
            "::",
            stringify!(Delivery)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSortSpecs {
    pub ColumnUserID: ImGuiID,
    pub ColumnIndex: ImS16,
    pub SortOrder: ImS16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_ImGuiTableColumnSortSpecs() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableColumnSortSpecs>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiTableColumnSortSpecs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableColumnSortSpecs>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableColumnSortSpecs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumnSortSpecs>())).ColumnUserID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs),
            "::",
            stringify!(ColumnUserID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumnSortSpecs>())).ColumnIndex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs),
            "::",
            stringify!(ColumnIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumnSortSpecs>())).SortOrder as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSortSpecs),
            "::",
            stringify!(SortOrder)
        )
    );
}
impl ImGuiTableColumnSortSpecs {
    #[inline]
    pub fn SortDirection(&self) -> ImGuiSortDirection {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImGuiSortDirection) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(SortDirection: ImGuiSortDirection) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let SortDirection: u32 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSortSpecs {
    pub Specs: *const ImGuiTableColumnSortSpecs,
    pub SpecsCount: ::chlorine::c_int,
    pub SpecsDirty: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTableSortSpecs() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableSortSpecs>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTableSortSpecs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableSortSpecs>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTableSortSpecs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableSortSpecs>())).Specs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSortSpecs),
            "::",
            stringify!(Specs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableSortSpecs>())).SpecsCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSortSpecs),
            "::",
            stringify!(SpecsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableSortSpecs>())).SpecsDirty as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSortSpecs),
            "::",
            stringify!(SpecsDirty)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOnceUponAFrame {
    pub RefFrame: ::chlorine::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiOnceUponAFrame() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiOnceUponAFrame>(),
        4usize,
        concat!("Size of: ", stringify!(ImGuiOnceUponAFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOnceUponAFrame>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiOnceUponAFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOnceUponAFrame>())).RefFrame as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOnceUponAFrame),
            "::",
            stringify!(RefFrame)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextRange {
    pub b: *const ::chlorine::c_char,
    pub e: *const ::chlorine::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiTextRange() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextRange>())).b as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiTextRange), "::", stringify!(b))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextRange>())).e as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImGuiTextRange), "::", stringify!(e))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiTextFilter {
    pub InputBuf: [::chlorine::c_char; 256usize],
    pub Filters: ImVector_ImGuiTextRange,
    pub CountGrep: ::chlorine::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiTextFilter() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextFilter>(),
        280usize,
        concat!("Size of: ", stringify!(ImGuiTextFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextFilter>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextFilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextFilter>())).InputBuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(InputBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextFilter>())).Filters as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(Filters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextFilter>())).CountGrep as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTextFilter),
            "::",
            stringify!(CountGrep)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextBuffer {
    pub Buf: ImVector_char,
}
#[test]
fn bindgen_test_layout_ImGuiTextBuffer() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTextBuffer>())).Buf as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiTextBuffer), "::", stringify!(Buf))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStoragePair {
    pub key: ImGuiID,
    pub __bindgen_anon_1: ImGuiStoragePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStoragePair__bindgen_ty_1 {
    pub val_i: ::chlorine::c_int,
    pub val_f: f32,
    pub val_p: *mut ::chlorine::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiStoragePair__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStoragePair__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiStoragePair__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStoragePair__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStoragePair__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStoragePair__bindgen_ty_1>())).val_i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStoragePair__bindgen_ty_1>())).val_f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStoragePair__bindgen_ty_1>())).val_p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStoragePair__bindgen_ty_1),
            "::",
            stringify!(val_p)
        )
    );
}
#[test]
fn bindgen_test_layout_ImGuiStoragePair() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStoragePair>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStoragePair))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStoragePair>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStoragePair))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStoragePair>())).key as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiStoragePair), "::", stringify!(key))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStorage {
    pub Data: ImVector_ImGuiStoragePair,
}
#[test]
fn bindgen_test_layout_ImGuiStorage() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStorage>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStorage>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStorage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStorage>())).Data as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiStorage), "::", stringify!(Data))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTabBar {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiTabBar,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTabBar() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTabBar>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTabBar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTabBar>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabBar),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTabBar>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabBar),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTabBar>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabBar),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPool_ImGuiTabBar {
    pub Buf: ImVector_ImGuiTabBar,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImGuiTabBar() {
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImGuiTabBar>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImGuiTabBar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImPool_ImGuiTabBar>())).Buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImPool_ImGuiTabBar>())).Map as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImPool_ImGuiTabBar>())).FreeIdx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(FreeIdx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTable {
    pub Size: ::chlorine::c_int,
    pub Capacity: ::chlorine::c_int,
    pub Data: *mut ImGuiTable,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTable() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTable>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTable>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTable),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTable>())).Capacity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTable),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVector_ImGuiTable>())).Data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTable),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPool_ImGuiTable {
    pub Buf: ImVector_ImGuiTable,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImGuiTable() {
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImGuiTable>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImGuiTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImGuiTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImGuiTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImPool_ImGuiTable>())).Buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTable),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImPool_ImGuiTable>())).Map as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTable),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImPool_ImGuiTable>())).FreeIdx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTable),
            "::",
            stringify!(FreeIdx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiListClipper {
    pub DisplayStart: ::chlorine::c_int,
    pub DisplayEnd: ::chlorine::c_int,
    pub ItemsCount: ::chlorine::c_int,
    pub StepNo: ::chlorine::c_int,
    pub ItemsFrozen: ::chlorine::c_int,
    pub ItemsHeight: f32,
    pub StartPosY: f32,
}
#[test]
fn bindgen_test_layout_ImGuiListClipper() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiListClipper>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiListClipper))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiListClipper>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiListClipper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).DisplayStart as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(DisplayStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).DisplayEnd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(DisplayEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).ItemsCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(ItemsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).StepNo as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(StepNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).ItemsFrozen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(ItemsFrozen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).ItemsHeight as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(ItemsHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiListClipper>())).StartPosY as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiListClipper),
            "::",
            stringify!(StartPosY)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImColor {
    pub Value: ImVec4,
}
#[test]
fn bindgen_test_layout_ImColor() {
    assert_eq!(
        ::std::mem::size_of::<ImColor>(),
        16usize,
        concat!("Size of: ", stringify!(ImColor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImColor>(),
        4usize,
        concat!("Alignment of ", stringify!(ImColor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImColor>())).Value as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImColor), "::", stringify!(Value))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmd {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::chlorine::c_uint,
    pub IdxOffset: ::chlorine::c_uint,
    pub ElemCount: ::chlorine::c_uint,
    pub UserCallback: ImDrawCallback,
    pub UserCallbackData: *mut ::chlorine::c_void,
}
#[test]
fn bindgen_test_layout_ImDrawCmd() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmd>(),
        56usize,
        concat!("Size of: ", stringify!(ImDrawCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).ClipRect as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImDrawCmd), "::", stringify!(ClipRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).TextureId as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ImDrawCmd), "::", stringify!(TextureId))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).VtxOffset as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(ImDrawCmd), "::", stringify!(VtxOffset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).IdxOffset as *const _ as usize },
        28usize,
        concat!("Offset of field: ", stringify!(ImDrawCmd), "::", stringify!(IdxOffset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).ElemCount as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(ImDrawCmd), "::", stringify!(ElemCount))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).UserCallback as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(UserCallback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).UserCallbackData as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmd),
            "::",
            stringify!(UserCallbackData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawVert {
    pub pos: ImVec2,
    pub uv: ImVec2,
    pub col: ImU32,
}
#[test]
fn bindgen_test_layout_ImDrawVert() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawVert>(),
        20usize,
        concat!("Size of: ", stringify!(ImDrawVert))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawVert>(),
        4usize,
        concat!("Alignment of ", stringify!(ImDrawVert))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawVert>())).pos as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImDrawVert), "::", stringify!(pos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawVert>())).uv as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImDrawVert), "::", stringify!(uv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawVert>())).col as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ImDrawVert), "::", stringify!(col))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmdHeader {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::chlorine::c_uint,
}
#[test]
fn bindgen_test_layout_ImDrawCmdHeader() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmdHeader>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawCmdHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmdHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmdHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmdHeader>())).ClipRect as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmdHeader>())).TextureId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader),
            "::",
            stringify!(TextureId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawCmdHeader>())).VtxOffset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawCmdHeader),
            "::",
            stringify!(VtxOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawChannel {
    pub _CmdBuffer: ImVector_ImDrawCmd,
    pub _IdxBuffer: ImVector_ImDrawIdx,
}
#[test]
fn bindgen_test_layout_ImDrawChannel() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawChannel>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawChannel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawChannel>()))._CmdBuffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawChannel),
            "::",
            stringify!(_CmdBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawChannel>()))._IdxBuffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawChannel),
            "::",
            stringify!(_IdxBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawListSplitter {
    pub _Current: ::chlorine::c_int,
    pub _Count: ::chlorine::c_int,
    pub _Channels: ImVector_ImDrawChannel,
}
#[test]
fn bindgen_test_layout_ImDrawListSplitter() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawListSplitter>(),
        24usize,
        concat!("Size of: ", stringify!(ImDrawListSplitter))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawListSplitter>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawListSplitter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSplitter>()))._Current as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSplitter>()))._Count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSplitter>()))._Channels as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSplitter),
            "::",
            stringify!(_Channels)
        )
    );
}
pub const ImDrawFlags__ImDrawFlags_None: ImDrawFlags_ = 0;
pub const ImDrawFlags__ImDrawFlags_Closed: ImDrawFlags_ = 1;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopLeft: ImDrawFlags_ = 16;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopRight: ImDrawFlags_ = 32;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomLeft: ImDrawFlags_ = 64;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomRight: ImDrawFlags_ = 128;
pub const ImDrawFlags__ImDrawFlags_RoundCornersNone: ImDrawFlags_ = 256;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTop: ImDrawFlags_ = 48;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottom: ImDrawFlags_ = 192;
pub const ImDrawFlags__ImDrawFlags_RoundCornersLeft: ImDrawFlags_ = 80;
pub const ImDrawFlags__ImDrawFlags_RoundCornersRight: ImDrawFlags_ = 160;
pub const ImDrawFlags__ImDrawFlags_RoundCornersAll: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersDefault_: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersMask_: ImDrawFlags_ = 496;
pub type ImDrawFlags_ = ::chlorine::c_uint;
pub const ImDrawListFlags__ImDrawListFlags_None: ImDrawListFlags_ = 0;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLines: ImDrawListFlags_ = 1;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLinesUseTex: ImDrawListFlags_ = 2;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedFill: ImDrawListFlags_ = 4;
pub const ImDrawListFlags__ImDrawListFlags_AllowVtxOffset: ImDrawListFlags_ = 8;
pub type ImDrawListFlags_ = ::chlorine::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawList {
    pub CmdBuffer: ImVector_ImDrawCmd,
    pub IdxBuffer: ImVector_ImDrawIdx,
    pub VtxBuffer: ImVector_ImDrawVert,
    pub Flags: ImDrawListFlags,
    pub _VtxCurrentIdx: ::chlorine::c_uint,
    pub _Data: *const ImDrawListSharedData,
    pub _OwnerName: *const ::chlorine::c_char,
    pub _VtxWritePtr: *mut ImDrawVert,
    pub _IdxWritePtr: *mut ImDrawIdx,
    pub _ClipRectStack: ImVector_ImVec4,
    pub _TextureIdStack: ImVector_ImTextureID,
    pub _Path: ImVector_ImVec2,
    pub _CmdHeader: ImDrawCmdHeader,
    pub _Splitter: ImDrawListSplitter,
    pub _FringeScale: f32,
}
#[test]
fn bindgen_test_layout_ImDrawList() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawList>(),
        200usize,
        concat!("Size of: ", stringify!(ImDrawList))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawList>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>())).CmdBuffer as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImDrawList), "::", stringify!(CmdBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>())).IdxBuffer as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ImDrawList), "::", stringify!(IdxBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>())).VtxBuffer as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(ImDrawList), "::", stringify!(VtxBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>())).Flags as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(ImDrawList), "::", stringify!(Flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._VtxCurrentIdx as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_VtxCurrentIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Data as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(ImDrawList), "::", stringify!(_Data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._OwnerName as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_OwnerName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._VtxWritePtr as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_VtxWritePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._IdxWritePtr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_IdxWritePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._ClipRectStack as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_ClipRectStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._TextureIdStack as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_TextureIdStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Path as *const _ as usize },
        120usize,
        concat!("Offset of field: ", stringify!(ImDrawList), "::", stringify!(_Path))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._CmdHeader as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_CmdHeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Splitter as *const _ as usize },
        168usize,
        concat!("Offset of field: ", stringify!(ImDrawList), "::", stringify!(_Splitter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawList>()))._FringeScale as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawList),
            "::",
            stringify!(_FringeScale)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawData {
    pub Valid: bool,
    pub CmdListsCount: ::chlorine::c_int,
    pub TotalIdxCount: ::chlorine::c_int,
    pub TotalVtxCount: ::chlorine::c_int,
    pub CmdLists: *mut *mut ImDrawList,
    pub DisplayPos: ImVec2,
    pub DisplaySize: ImVec2,
    pub FramebufferScale: ImVec2,
    pub OwnerViewport: *mut ImGuiViewport,
}
#[test]
fn bindgen_test_layout_ImDrawData() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawData>(),
        56usize,
        concat!("Size of: ", stringify!(ImDrawData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).Valid as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImDrawData), "::", stringify!(Valid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).CmdListsCount as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(CmdListsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).TotalIdxCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(TotalIdxCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).TotalVtxCount as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(TotalVtxCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).CmdLists as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ImDrawData), "::", stringify!(CmdLists))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).DisplayPos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(DisplayPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).DisplaySize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(DisplaySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).FramebufferScale as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(FramebufferScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawData>())).OwnerViewport as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawData),
            "::",
            stringify!(OwnerViewport)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImFontConfig {
    pub FontData: *mut ::chlorine::c_void,
    pub FontDataSize: ::chlorine::c_int,
    pub FontDataOwnedByAtlas: bool,
    pub FontNo: ::chlorine::c_int,
    pub SizePixels: f32,
    pub OversampleH: ::chlorine::c_int,
    pub OversampleV: ::chlorine::c_int,
    pub PixelSnapH: bool,
    pub GlyphExtraSpacing: ImVec2,
    pub GlyphOffset: ImVec2,
    pub GlyphRanges: *const ImWchar,
    pub GlyphMinAdvanceX: f32,
    pub GlyphMaxAdvanceX: f32,
    pub MergeMode: bool,
    pub FontBuilderFlags: ::chlorine::c_uint,
    pub RasterizerMultiply: f32,
    pub EllipsisChar: ImWchar,
    pub Name: [::chlorine::c_char; 40usize],
    pub DstFont: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontConfig() {
    assert_eq!(
        ::std::mem::size_of::<ImFontConfig>(),
        136usize,
        concat!("Size of: ", stringify!(ImFontConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontDataSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontDataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontDataOwnedByAtlas as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontDataOwnedByAtlas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontNo as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ImFontConfig), "::", stringify!(FontNo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).SizePixels as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(SizePixels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).OversampleH as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(OversampleH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).OversampleV as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(OversampleV)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).PixelSnapH as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(PixelSnapH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphExtraSpacing as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphExtraSpacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphOffset as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphRanges as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphRanges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphMinAdvanceX as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphMinAdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphMaxAdvanceX as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(GlyphMaxAdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).MergeMode as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(MergeMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontBuilderFlags as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(FontBuilderFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).RasterizerMultiply as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(RasterizerMultiply)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).EllipsisChar as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontConfig),
            "::",
            stringify!(EllipsisChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).Name as *const _ as usize },
        86usize,
        concat!("Offset of field: ", stringify!(ImFontConfig), "::", stringify!(Name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontConfig>())).DstFont as *const _ as usize },
        128usize,
        concat!("Offset of field: ", stringify!(ImFontConfig), "::", stringify!(DstFont))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyph {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub AdvanceX: f32,
    pub X0: f32,
    pub Y0: f32,
    pub X1: f32,
    pub Y1: f32,
    pub U0: f32,
    pub V0: f32,
    pub U1: f32,
    pub V1: f32,
}
#[test]
fn bindgen_test_layout_ImFontGlyph() {
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyph>(),
        40usize,
        concat!("Size of: ", stringify!(ImFontGlyph))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyph>(),
        4usize,
        concat!("Alignment of ", stringify!(ImFontGlyph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).AdvanceX as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImFontGlyph), "::", stringify!(AdvanceX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).X0 as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImFontGlyph), "::", stringify!(X0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).Y0 as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(ImFontGlyph), "::", stringify!(Y0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).X1 as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ImFontGlyph), "::", stringify!(X1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).Y1 as *const _ as usize },
        20usize,
        concat!("Offset of field: ", stringify!(ImFontGlyph), "::", stringify!(Y1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).U0 as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(ImFontGlyph), "::", stringify!(U0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).V0 as *const _ as usize },
        28usize,
        concat!("Offset of field: ", stringify!(ImFontGlyph), "::", stringify!(V0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).U1 as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(ImFontGlyph), "::", stringify!(U1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).V1 as *const _ as usize },
        36usize,
        concat!("Offset of field: ", stringify!(ImFontGlyph), "::", stringify!(V1))
    );
}
impl ImFontGlyph {
    #[inline]
    pub fn Colored(&self) -> ::chlorine::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Colored(&mut self, val: ::chlorine::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Visible(&self) -> ::chlorine::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Visible(&mut self, val: ::chlorine::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Codepoint(&self) -> ::chlorine::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_Codepoint(&mut self, val: ::chlorine::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Colored: ::chlorine::c_uint,
        Visible: ::chlorine::c_uint,
        Codepoint: ::chlorine::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Colored: u32 = unsafe { ::std::mem::transmute(Colored) };
            Colored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Visible: u32 = unsafe { ::std::mem::transmute(Visible) };
            Visible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let Codepoint: u32 = unsafe { ::std::mem::transmute(Codepoint) };
            Codepoint as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyphRangesBuilder {
    pub UsedChars: ImVector_ImU32,
}
#[test]
fn bindgen_test_layout_ImFontGlyphRangesBuilder() {
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyphRangesBuilder>(),
        16usize,
        concat!("Size of: ", stringify!(ImFontGlyphRangesBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyphRangesBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontGlyphRangesBuilder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontGlyphRangesBuilder>())).UsedChars as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontGlyphRangesBuilder),
            "::",
            stringify!(UsedChars)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlasCustomRect {
    pub Width: ::chlorine::c_ushort,
    pub Height: ::chlorine::c_ushort,
    pub X: ::chlorine::c_ushort,
    pub Y: ::chlorine::c_ushort,
    pub GlyphID: ::chlorine::c_uint,
    pub GlyphAdvanceX: f32,
    pub GlyphOffset: ImVec2,
    pub Font: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontAtlasCustomRect() {
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlasCustomRect>(),
        32usize,
        concat!("Size of: ", stringify!(ImFontAtlasCustomRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlasCustomRect>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlasCustomRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Height as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).X as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Y as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).GlyphID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).GlyphAdvanceX as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphAdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).GlyphOffset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(GlyphOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Font as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlasCustomRect),
            "::",
            stringify!(Font)
        )
    );
}
pub const ImFontAtlasFlags__ImFontAtlasFlags_None: ImFontAtlasFlags_ = 0;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoPowerOfTwoHeight: ImFontAtlasFlags_ = 1;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoMouseCursors: ImFontAtlasFlags_ = 2;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoBakedLines: ImFontAtlasFlags_ = 4;
pub type ImFontAtlasFlags_ = ::chlorine::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImFontAtlas {
    pub Flags: ImFontAtlasFlags,
    pub TexID: ImTextureID,
    pub TexDesiredWidth: ::chlorine::c_int,
    pub TexGlyphPadding: ::chlorine::c_int,
    pub Locked: bool,
    pub TexPixelsUseColors: bool,
    pub TexPixelsAlpha8: *mut ::chlorine::c_uchar,
    pub TexPixelsRGBA32: *mut ::chlorine::c_uint,
    pub TexWidth: ::chlorine::c_int,
    pub TexHeight: ::chlorine::c_int,
    pub TexUvScale: ImVec2,
    pub TexUvWhitePixel: ImVec2,
    pub Fonts: ImVector_ImFontPtr,
    pub CustomRects: ImVector_ImFontAtlasCustomRect,
    pub ConfigData: ImVector_ImFontConfig,
    pub TexUvLines: [ImVec4; 64usize],
    pub FontBuilderIO: *const ImFontBuilderIO,
    pub FontBuilderFlags: ::chlorine::c_uint,
    pub PackIdMouseCursors: ::chlorine::c_int,
    pub PackIdLines: ::chlorine::c_int,
}
#[test]
fn bindgen_test_layout_ImFontAtlas() {
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlas>(),
        1168usize,
        concat!("Size of: ", stringify!(ImFontAtlas))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlas>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlas))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Flags as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImFontAtlas), "::", stringify!(Flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexID as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImFontAtlas), "::", stringify!(TexID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexDesiredWidth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexDesiredWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexGlyphPadding as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexGlyphPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Locked as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(ImFontAtlas), "::", stringify!(Locked))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexPixelsUseColors as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsUseColors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexPixelsAlpha8 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsAlpha8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexPixelsRGBA32 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexPixelsRGBA32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexWidth as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(ImFontAtlas), "::", stringify!(TexWidth))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexHeight as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvScale as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvWhitePixel as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvWhitePixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Fonts as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(ImFontAtlas), "::", stringify!(Fonts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).CustomRects as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(CustomRects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).ConfigData as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(ConfigData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvLines as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(TexUvLines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).FontBuilderIO as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(FontBuilderIO)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).FontBuilderFlags as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(FontBuilderFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).PackIdMouseCursors as *const _ as usize },
        1156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(PackIdMouseCursors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).PackIdLines as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontAtlas),
            "::",
            stringify!(PackIdLines)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFont {
    pub IndexAdvanceX: ImVector_float,
    pub FallbackAdvanceX: f32,
    pub FontSize: f32,
    pub IndexLookup: ImVector_ImWchar,
    pub Glyphs: ImVector_ImFontGlyph,
    pub FallbackGlyph: *const ImFontGlyph,
    pub ContainerAtlas: *mut ImFontAtlas,
    pub ConfigData: *const ImFontConfig,
    pub ConfigDataCount: ::chlorine::c_short,
    pub FallbackChar: ImWchar,
    pub EllipsisChar: ImWchar,
    pub DirtyLookupTables: bool,
    pub Scale: f32,
    pub Ascent: f32,
    pub Descent: f32,
    pub MetricsTotalSurface: ::chlorine::c_int,
    pub Used4kPagesMap: [ImU8; 2usize],
}
#[test]
fn bindgen_test_layout_ImFont() {
    assert_eq!(
        ::std::mem::size_of::<ImFont>(),
        112usize,
        concat!("Size of: ", stringify!(ImFont))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFont>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFont))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).IndexAdvanceX as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImFont), "::", stringify!(IndexAdvanceX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackAdvanceX as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(FallbackAdvanceX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).FontSize as *const _ as usize },
        20usize,
        concat!("Offset of field: ", stringify!(ImFont), "::", stringify!(FontSize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).IndexLookup as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(ImFont), "::", stringify!(IndexLookup))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Glyphs as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(ImFont), "::", stringify!(Glyphs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackGlyph as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(ImFont), "::", stringify!(FallbackGlyph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).ContainerAtlas as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ContainerAtlas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).ConfigData as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(ImFont), "::", stringify!(ConfigData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).ConfigDataCount as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(ConfigDataCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackChar as *const _ as usize },
        82usize,
        concat!("Offset of field: ", stringify!(ImFont), "::", stringify!(FallbackChar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).EllipsisChar as *const _ as usize },
        84usize,
        concat!("Offset of field: ", stringify!(ImFont), "::", stringify!(EllipsisChar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).DirtyLookupTables as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(DirtyLookupTables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Scale as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(ImFont), "::", stringify!(Scale))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Ascent as *const _ as usize },
        92usize,
        concat!("Offset of field: ", stringify!(ImFont), "::", stringify!(Ascent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Descent as *const _ as usize },
        96usize,
        concat!("Offset of field: ", stringify!(ImFont), "::", stringify!(Descent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).MetricsTotalSurface as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(MetricsTotalSurface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFont>())).Used4kPagesMap as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFont),
            "::",
            stringify!(Used4kPagesMap)
        )
    );
}
pub const ImGuiViewportFlags__ImGuiViewportFlags_None: ImGuiViewportFlags_ = 0;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformWindow: ImGuiViewportFlags_ = 1;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformMonitor: ImGuiViewportFlags_ = 2;
pub const ImGuiViewportFlags__ImGuiViewportFlags_OwnedByApp: ImGuiViewportFlags_ = 4;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoDecoration: ImGuiViewportFlags_ = 8;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoTaskBarIcon: ImGuiViewportFlags_ = 16;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnAppearing: ImGuiViewportFlags_ = 32;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnClick: ImGuiViewportFlags_ = 64;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoInputs: ImGuiViewportFlags_ = 128;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoRendererClear: ImGuiViewportFlags_ = 256;
pub const ImGuiViewportFlags__ImGuiViewportFlags_TopMost: ImGuiViewportFlags_ = 512;
pub const ImGuiViewportFlags__ImGuiViewportFlags_Minimized: ImGuiViewportFlags_ = 1024;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoAutoMerge: ImGuiViewportFlags_ = 2048;
pub const ImGuiViewportFlags__ImGuiViewportFlags_CanHostOtherWindows: ImGuiViewportFlags_ = 4096;
pub type ImGuiViewportFlags_ = ::chlorine::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiViewport {
    pub ID: ImGuiID,
    pub Flags: ImGuiViewportFlags,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub ParentViewportId: ImGuiID,
    pub DrawData: *mut ImDrawData,
    pub RendererUserData: *mut ::chlorine::c_void,
    pub PlatformUserData: *mut ::chlorine::c_void,
    pub PlatformHandle: *mut ::chlorine::c_void,
    pub PlatformHandleRaw: *mut ::chlorine::c_void,
    pub PlatformRequestMove: bool,
    pub PlatformRequestResize: bool,
    pub PlatformRequestClose: bool,
}
#[test]
fn bindgen_test_layout_ImGuiViewport() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiViewport>(),
        96usize,
        concat!("Size of: ", stringify!(ImGuiViewport))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiViewport>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiViewport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).ID as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiViewport), "::", stringify!(ID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).Flags as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImGuiViewport), "::", stringify!(Flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).Pos as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImGuiViewport), "::", stringify!(Pos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).Size as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ImGuiViewport), "::", stringify!(Size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).WorkPos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(WorkPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).WorkSize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(WorkSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).DpiScale as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(DpiScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).ParentViewportId as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(ParentViewportId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).DrawData as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(DrawData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).RendererUserData as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(RendererUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).PlatformUserData as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).PlatformHandle as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).PlatformHandleRaw as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformHandleRaw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).PlatformRequestMove as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformRequestMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).PlatformRequestResize as *const _ as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformRequestResize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewport>())).PlatformRequestClose as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewport),
            "::",
            stringify!(PlatformRequestClose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformIO {
    pub Platform_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_ShowWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetWindowPos: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_GetWindowPos: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowSize: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Platform_GetWindowSize: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowFocus: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowFocus: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_GetWindowMinimized: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_SetWindowTitle:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, str_: *const ::chlorine::c_char)>,
    pub Platform_SetWindowAlpha: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, alpha: f32)>,
    pub Platform_UpdateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_RenderWindow:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::chlorine::c_void)>,
    pub Platform_SwapBuffers:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::chlorine::c_void)>,
    pub Platform_GetWindowDpiScale: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> f32>,
    pub Platform_OnChangedViewport: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetImeInputPos: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_CreateVkSurface: ::std::option::Option<
        unsafe extern "C" fn(
            vp: *mut ImGuiViewport,
            vk_inst: ImU64,
            vk_allocators: *const ::chlorine::c_void,
            out_vk_surface: *mut ImU64,
        ) -> ::chlorine::c_int,
    >,
    pub Renderer_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_SetWindowSize: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Renderer_RenderWindow:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::chlorine::c_void)>,
    pub Renderer_SwapBuffers:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::chlorine::c_void)>,
    pub Monitors: ImVector_ImGuiPlatformMonitor,
    pub Viewports: ImVector_ImGuiViewportPtr,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformIO() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformIO>(),
        224usize,
        concat!("Size of: ", stringify!(ImGuiPlatformIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformIO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_CreateWindow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_CreateWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_DestroyWindow as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_DestroyWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_ShowWindow as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_ShowWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SetWindowPos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_GetWindowPos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SetWindowSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_GetWindowSize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SetWindowFocus as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowFocus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_GetWindowFocus as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowFocus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_GetWindowMinimized as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowMinimized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SetWindowTitle as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowTitle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SetWindowAlpha as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetWindowAlpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_UpdateWindow as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_UpdateWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_RenderWindow as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_RenderWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SwapBuffers as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SwapBuffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_GetWindowDpiScale as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_GetWindowDpiScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_OnChangedViewport as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_OnChangedViewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_SetImeInputPos as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_SetImeInputPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Platform_CreateVkSurface as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Platform_CreateVkSurface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Renderer_CreateWindow as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_CreateWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Renderer_DestroyWindow as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_DestroyWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Renderer_SetWindowSize as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_SetWindowSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Renderer_RenderWindow as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_RenderWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Renderer_SwapBuffers as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Renderer_SwapBuffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Monitors as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Monitors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformIO>())).Viewports as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformIO),
            "::",
            stringify!(Viewports)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformMonitor {
    pub MainPos: ImVec2,
    pub MainSize: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformMonitor() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformMonitor>(),
        36usize,
        concat!("Size of: ", stringify!(ImGuiPlatformMonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformMonitor>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformMonitor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformMonitor>())).MainPos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(MainPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformMonitor>())).MainSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(MainSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformMonitor>())).WorkPos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(WorkPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformMonitor>())).WorkSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(WorkSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPlatformMonitor>())).DpiScale as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPlatformMonitor),
            "::",
            stringify!(DpiScale)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StbUndoRecord {
    pub where_: ::chlorine::c_int,
    pub insert_length: ::chlorine::c_int,
    pub delete_length: ::chlorine::c_int,
    pub char_storage: ::chlorine::c_int,
}
#[test]
fn bindgen_test_layout_StbUndoRecord() {
    assert_eq!(
        ::std::mem::size_of::<StbUndoRecord>(),
        16usize,
        concat!("Size of: ", stringify!(StbUndoRecord))
    );
    assert_eq!(
        ::std::mem::align_of::<StbUndoRecord>(),
        4usize,
        concat!("Alignment of ", stringify!(StbUndoRecord))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoRecord>())).where_ as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(StbUndoRecord), "::", stringify!(where_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoRecord>())).insert_length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoRecord),
            "::",
            stringify!(insert_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoRecord>())).delete_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoRecord),
            "::",
            stringify!(delete_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoRecord>())).char_storage as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoRecord),
            "::",
            stringify!(char_storage)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StbUndoState {
    pub undo_rec: [StbUndoRecord; 99usize],
    pub undo_char: [ImWchar; 999usize],
    pub undo_point: ::chlorine::c_short,
    pub redo_point: ::chlorine::c_short,
    pub undo_char_point: ::chlorine::c_int,
    pub redo_char_point: ::chlorine::c_int,
}
#[test]
fn bindgen_test_layout_StbUndoState() {
    assert_eq!(
        ::std::mem::size_of::<StbUndoState>(),
        3596usize,
        concat!("Size of: ", stringify!(StbUndoState))
    );
    assert_eq!(
        ::std::mem::align_of::<StbUndoState>(),
        4usize,
        concat!("Alignment of ", stringify!(StbUndoState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoState>())).undo_rec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(undo_rec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoState>())).undo_char as *const _ as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(undo_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoState>())).undo_point as *const _ as usize },
        3582usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(undo_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoState>())).redo_point as *const _ as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(redo_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoState>())).undo_char_point as *const _ as usize },
        3588usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(undo_char_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbUndoState>())).redo_char_point as *const _ as usize },
        3592usize,
        concat!(
            "Offset of field: ",
            stringify!(StbUndoState),
            "::",
            stringify!(redo_char_point)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct STB_TexteditState {
    pub cursor: ::chlorine::c_int,
    pub select_start: ::chlorine::c_int,
    pub select_end: ::chlorine::c_int,
    pub insert_mode: ::chlorine::c_uchar,
    pub row_count_per_page: ::chlorine::c_int,
    pub cursor_at_end_of_line: ::chlorine::c_uchar,
    pub initialized: ::chlorine::c_uchar,
    pub has_preferred_x: ::chlorine::c_uchar,
    pub single_line: ::chlorine::c_uchar,
    pub padding1: ::chlorine::c_uchar,
    pub padding2: ::chlorine::c_uchar,
    pub padding3: ::chlorine::c_uchar,
    pub preferred_x: f32,
    pub undostate: StbUndoState,
}
#[test]
fn bindgen_test_layout_STB_TexteditState() {
    assert_eq!(
        ::std::mem::size_of::<STB_TexteditState>(),
        3628usize,
        concat!("Size of: ", stringify!(STB_TexteditState))
    );
    assert_eq!(
        ::std::mem::align_of::<STB_TexteditState>(),
        4usize,
        concat!("Alignment of ", stringify!(STB_TexteditState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).cursor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).select_start as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(select_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).select_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(select_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).insert_mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(insert_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).row_count_per_page as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(row_count_per_page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).cursor_at_end_of_line as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(cursor_at_end_of_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).initialized as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).has_preferred_x as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(has_preferred_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).single_line as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(single_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).padding1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).padding2 as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).padding3 as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).preferred_x as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(preferred_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<STB_TexteditState>())).undostate as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(STB_TexteditState),
            "::",
            stringify!(undostate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StbTexteditRow {
    pub x0: f32,
    pub x1: f32,
    pub baseline_y_delta: f32,
    pub ymin: f32,
    pub ymax: f32,
    pub num_chars: ::chlorine::c_int,
}
#[test]
fn bindgen_test_layout_StbTexteditRow() {
    assert_eq!(
        ::std::mem::size_of::<StbTexteditRow>(),
        24usize,
        concat!("Size of: ", stringify!(StbTexteditRow))
    );
    assert_eq!(
        ::std::mem::align_of::<StbTexteditRow>(),
        4usize,
        concat!("Alignment of ", stringify!(StbTexteditRow))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbTexteditRow>())).x0 as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(StbTexteditRow), "::", stringify!(x0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbTexteditRow>())).x1 as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(StbTexteditRow), "::", stringify!(x1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbTexteditRow>())).baseline_y_delta as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(baseline_y_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbTexteditRow>())).ymin as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(StbTexteditRow), "::", stringify!(ymin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbTexteditRow>())).ymax as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(StbTexteditRow), "::", stringify!(ymax))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StbTexteditRow>())).num_chars as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(StbTexteditRow),
            "::",
            stringify!(num_chars)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec1 {
    pub x: f32,
}
#[test]
fn bindgen_test_layout_ImVec1() {
    assert_eq!(
        ::std::mem::size_of::<ImVec1>(),
        4usize,
        concat!("Size of: ", stringify!(ImVec1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec1>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec1>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec1), "::", stringify!(x))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2ih {
    pub x: ::chlorine::c_short,
    pub y: ::chlorine::c_short,
}
#[test]
fn bindgen_test_layout_ImVec2ih() {
    assert_eq!(
        ::std::mem::size_of::<ImVec2ih>(),
        4usize,
        concat!("Size of: ", stringify!(ImVec2ih))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2ih>(),
        2usize,
        concat!("Alignment of ", stringify!(ImVec2ih))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2ih>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImVec2ih), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImVec2ih>())).y as *const _ as usize },
        2usize,
        concat!("Offset of field: ", stringify!(ImVec2ih), "::", stringify!(y))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImRect {
    pub Min: ImVec2,
    pub Max: ImVec2,
}
#[test]
fn bindgen_test_layout_ImRect() {
    assert_eq!(
        ::std::mem::size_of::<ImRect>(),
        16usize,
        concat!("Size of: ", stringify!(ImRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImRect>(),
        4usize,
        concat!("Alignment of ", stringify!(ImRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImRect>())).Min as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImRect), "::", stringify!(Min))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImRect>())).Max as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImRect), "::", stringify!(Max))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImBitVector {
    pub Storage: ImVector_ImU32,
}
#[test]
fn bindgen_test_layout_ImBitVector() {
    assert_eq!(
        ::std::mem::size_of::<ImBitVector>(),
        16usize,
        concat!("Size of: ", stringify!(ImBitVector))
    );
    assert_eq!(
        ::std::mem::align_of::<ImBitVector>(),
        8usize,
        concat!("Alignment of ", stringify!(ImBitVector))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImBitVector>())).Storage as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImBitVector), "::", stringify!(Storage))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImDrawListSharedData {
    pub TexUvWhitePixel: ImVec2,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub CurveTessellationTol: f32,
    pub CircleSegmentMaxError: f32,
    pub ClipRectFullscreen: ImVec4,
    pub InitialFlags: ImDrawListFlags,
    pub ArcFastVtx: [ImVec2; 48usize],
    pub ArcFastRadiusCutoff: f32,
    pub CircleSegmentCounts: [ImU8; 64usize],
    pub TexUvLines: *const ImVec4,
}
#[test]
fn bindgen_test_layout_ImDrawListSharedData() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawListSharedData>(),
        512usize,
        concat!("Size of: ", stringify!(ImDrawListSharedData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawListSharedData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawListSharedData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).TexUvWhitePixel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(TexUvWhitePixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).Font as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(Font)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).FontSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).CurveTessellationTol as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(CurveTessellationTol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).CircleSegmentMaxError as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(CircleSegmentMaxError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).ClipRectFullscreen as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(ClipRectFullscreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).InitialFlags as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(InitialFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).ArcFastVtx as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(ArcFastVtx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).ArcFastRadiusCutoff as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(ArcFastRadiusCutoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).CircleSegmentCounts as *const _ as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(CircleSegmentCounts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawListSharedData>())).TexUvLines as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawListSharedData),
            "::",
            stringify!(TexUvLines)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawDataBuilder {
    pub Layers: [ImVector_ImDrawListPtr; 2usize],
}
#[test]
fn bindgen_test_layout_ImDrawDataBuilder() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawDataBuilder>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawDataBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawDataBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawDataBuilder))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImDrawDataBuilder>())).Layers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImDrawDataBuilder),
            "::",
            stringify!(Layers)
        )
    );
}
pub const ImGuiItemFlags__ImGuiItemFlags_None: ImGuiItemFlags_ = 0;
pub const ImGuiItemFlags__ImGuiItemFlags_NoTabStop: ImGuiItemFlags_ = 1;
pub const ImGuiItemFlags__ImGuiItemFlags_ButtonRepeat: ImGuiItemFlags_ = 2;
pub const ImGuiItemFlags__ImGuiItemFlags_Disabled: ImGuiItemFlags_ = 4;
pub const ImGuiItemFlags__ImGuiItemFlags_NoNav: ImGuiItemFlags_ = 8;
pub const ImGuiItemFlags__ImGuiItemFlags_NoNavDefaultFocus: ImGuiItemFlags_ = 16;
pub const ImGuiItemFlags__ImGuiItemFlags_SelectableDontClosePopup: ImGuiItemFlags_ = 32;
pub const ImGuiItemFlags__ImGuiItemFlags_MixedValue: ImGuiItemFlags_ = 64;
pub const ImGuiItemFlags__ImGuiItemFlags_ReadOnly: ImGuiItemFlags_ = 128;
pub const ImGuiItemFlags__ImGuiItemFlags_Default_: ImGuiItemFlags_ = 0;
pub type ImGuiItemFlags_ = ::chlorine::c_uint;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_None: ImGuiItemStatusFlags_ = 0;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HoveredRect: ImGuiItemStatusFlags_ = 1;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HasDisplayRect: ImGuiItemStatusFlags_ = 2;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_Edited: ImGuiItemStatusFlags_ = 4;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_ToggledSelection: ImGuiItemStatusFlags_ = 8;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_ToggledOpen: ImGuiItemStatusFlags_ = 16;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HasDeactivated: ImGuiItemStatusFlags_ = 32;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_Deactivated: ImGuiItemStatusFlags_ = 64;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HoveredWindow: ImGuiItemStatusFlags_ = 128;
pub type ImGuiItemStatusFlags_ = ::chlorine::c_uint;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnClick: ImGuiButtonFlagsPrivate_ = 16;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnClickRelease: ImGuiButtonFlagsPrivate_ = 32;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnClickReleaseAnywhere: ImGuiButtonFlagsPrivate_ = 64;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnRelease: ImGuiButtonFlagsPrivate_ = 128;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnDoubleClick: ImGuiButtonFlagsPrivate_ = 256;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnDragDropHold: ImGuiButtonFlagsPrivate_ = 512;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_Repeat: ImGuiButtonFlagsPrivate_ = 1024;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_FlattenChildren: ImGuiButtonFlagsPrivate_ = 2048;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_AllowItemOverlap: ImGuiButtonFlagsPrivate_ = 4096;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_DontClosePopups: ImGuiButtonFlagsPrivate_ = 8192;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_Disabled: ImGuiButtonFlagsPrivate_ = 16384;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_AlignTextBaseLine: ImGuiButtonFlagsPrivate_ = 32768;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoKeyModifiers: ImGuiButtonFlagsPrivate_ = 65536;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoHoldingActiveId: ImGuiButtonFlagsPrivate_ = 131072;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoNavFocus: ImGuiButtonFlagsPrivate_ = 262144;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoHoveredOnFocus: ImGuiButtonFlagsPrivate_ = 524288;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnMask_: ImGuiButtonFlagsPrivate_ = 1008;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnDefault_: ImGuiButtonFlagsPrivate_ = 32;
pub type ImGuiButtonFlagsPrivate_ = ::chlorine::c_uint;
pub const ImGuiSliderFlagsPrivate__ImGuiSliderFlags_Vertical: ImGuiSliderFlagsPrivate_ = 1048576;
pub const ImGuiSliderFlagsPrivate__ImGuiSliderFlags_ReadOnly: ImGuiSliderFlagsPrivate_ = 2097152;
pub type ImGuiSliderFlagsPrivate_ = ::chlorine::c_uint;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_NoHoldingActiveID: ImGuiSelectableFlagsPrivate_ = 1048576;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SelectOnClick: ImGuiSelectableFlagsPrivate_ = 2097152;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SelectOnRelease: ImGuiSelectableFlagsPrivate_ = 4194304;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SpanAvailWidth: ImGuiSelectableFlagsPrivate_ = 8388608;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_DrawHoveredWhenHeld: ImGuiSelectableFlagsPrivate_ =
    16777216;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SetNavIdOnHover: ImGuiSelectableFlagsPrivate_ = 33554432;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_NoPadWithHalfSpacing: ImGuiSelectableFlagsPrivate_ =
    67108864;
pub type ImGuiSelectableFlagsPrivate_ = ::chlorine::c_uint;
pub const ImGuiTreeNodeFlagsPrivate__ImGuiTreeNodeFlags_ClipLabelForTrailingButton: ImGuiTreeNodeFlagsPrivate_ =
    1048576;
pub type ImGuiTreeNodeFlagsPrivate_ = ::chlorine::c_uint;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_None: ImGuiSeparatorFlags_ = 0;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_Horizontal: ImGuiSeparatorFlags_ = 1;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_Vertical: ImGuiSeparatorFlags_ = 2;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_SpanAllColumns: ImGuiSeparatorFlags_ = 4;
pub type ImGuiSeparatorFlags_ = ::chlorine::c_uint;
pub const ImGuiTextFlags__ImGuiTextFlags_None: ImGuiTextFlags_ = 0;
pub const ImGuiTextFlags__ImGuiTextFlags_NoWidthForLargeClippedText: ImGuiTextFlags_ = 1;
pub type ImGuiTextFlags_ = ::chlorine::c_uint;
pub const ImGuiTooltipFlags__ImGuiTooltipFlags_None: ImGuiTooltipFlags_ = 0;
pub const ImGuiTooltipFlags__ImGuiTooltipFlags_OverridePreviousTooltip: ImGuiTooltipFlags_ = 1;
pub type ImGuiTooltipFlags_ = ::chlorine::c_uint;
pub const ImGuiLayoutType__ImGuiLayoutType_Horizontal: ImGuiLayoutType_ = 0;
pub const ImGuiLayoutType__ImGuiLayoutType_Vertical: ImGuiLayoutType_ = 1;
pub type ImGuiLayoutType_ = ::chlorine::c_uint;
pub const ImGuiLogType_ImGuiLogType_None: ImGuiLogType = 0;
pub const ImGuiLogType_ImGuiLogType_TTY: ImGuiLogType = 1;
pub const ImGuiLogType_ImGuiLogType_File: ImGuiLogType = 2;
pub const ImGuiLogType_ImGuiLogType_Buffer: ImGuiLogType = 3;
pub const ImGuiLogType_ImGuiLogType_Clipboard: ImGuiLogType = 4;
pub type ImGuiLogType = ::chlorine::c_uint;
pub const ImGuiAxis_ImGuiAxis_None: ImGuiAxis = -1;
pub const ImGuiAxis_ImGuiAxis_X: ImGuiAxis = 0;
pub const ImGuiAxis_ImGuiAxis_Y: ImGuiAxis = 1;
pub type ImGuiAxis = ::chlorine::c_int;
pub const ImGuiPlotType_ImGuiPlotType_Lines: ImGuiPlotType = 0;
pub const ImGuiPlotType_ImGuiPlotType_Histogram: ImGuiPlotType = 1;
pub type ImGuiPlotType = ::chlorine::c_uint;
pub const ImGuiInputSource_ImGuiInputSource_None: ImGuiInputSource = 0;
pub const ImGuiInputSource_ImGuiInputSource_Mouse: ImGuiInputSource = 1;
pub const ImGuiInputSource_ImGuiInputSource_Keyboard: ImGuiInputSource = 2;
pub const ImGuiInputSource_ImGuiInputSource_Gamepad: ImGuiInputSource = 3;
pub const ImGuiInputSource_ImGuiInputSource_Nav: ImGuiInputSource = 4;
pub const ImGuiInputSource_ImGuiInputSource_COUNT: ImGuiInputSource = 5;
pub type ImGuiInputSource = ::chlorine::c_uint;
pub const ImGuiInputReadMode_ImGuiInputReadMode_Down: ImGuiInputReadMode = 0;
pub const ImGuiInputReadMode_ImGuiInputReadMode_Pressed: ImGuiInputReadMode = 1;
pub const ImGuiInputReadMode_ImGuiInputReadMode_Released: ImGuiInputReadMode = 2;
pub const ImGuiInputReadMode_ImGuiInputReadMode_Repeat: ImGuiInputReadMode = 3;
pub const ImGuiInputReadMode_ImGuiInputReadMode_RepeatSlow: ImGuiInputReadMode = 4;
pub const ImGuiInputReadMode_ImGuiInputReadMode_RepeatFast: ImGuiInputReadMode = 5;
pub type ImGuiInputReadMode = ::chlorine::c_uint;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_None: ImGuiNavHighlightFlags_ = 0;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_TypeDefault: ImGuiNavHighlightFlags_ = 1;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_TypeThin: ImGuiNavHighlightFlags_ = 2;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_AlwaysDraw: ImGuiNavHighlightFlags_ = 4;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_NoRounding: ImGuiNavHighlightFlags_ = 8;
pub type ImGuiNavHighlightFlags_ = ::chlorine::c_uint;
pub const ImGuiNavDirSourceFlags__ImGuiNavDirSourceFlags_None: ImGuiNavDirSourceFlags_ = 0;
pub const ImGuiNavDirSourceFlags__ImGuiNavDirSourceFlags_Keyboard: ImGuiNavDirSourceFlags_ = 1;
pub const ImGuiNavDirSourceFlags__ImGuiNavDirSourceFlags_PadDPad: ImGuiNavDirSourceFlags_ = 2;
pub const ImGuiNavDirSourceFlags__ImGuiNavDirSourceFlags_PadLStick: ImGuiNavDirSourceFlags_ = 4;
pub type ImGuiNavDirSourceFlags_ = ::chlorine::c_uint;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_None: ImGuiNavMoveFlags_ = 0;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_LoopX: ImGuiNavMoveFlags_ = 1;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_LoopY: ImGuiNavMoveFlags_ = 2;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_WrapX: ImGuiNavMoveFlags_ = 4;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_WrapY: ImGuiNavMoveFlags_ = 8;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_AllowCurrentNavId: ImGuiNavMoveFlags_ = 16;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_AlsoScoreVisibleSet: ImGuiNavMoveFlags_ = 32;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_ScrollToEdge: ImGuiNavMoveFlags_ = 64;
pub type ImGuiNavMoveFlags_ = ::chlorine::c_uint;
pub const ImGuiNavForward_ImGuiNavForward_None: ImGuiNavForward = 0;
pub const ImGuiNavForward_ImGuiNavForward_ForwardQueued: ImGuiNavForward = 1;
pub const ImGuiNavForward_ImGuiNavForward_ForwardActive: ImGuiNavForward = 2;
pub type ImGuiNavForward = ::chlorine::c_uint;
pub const ImGuiNavLayer_ImGuiNavLayer_Main: ImGuiNavLayer = 0;
pub const ImGuiNavLayer_ImGuiNavLayer_Menu: ImGuiNavLayer = 1;
pub const ImGuiNavLayer_ImGuiNavLayer_COUNT: ImGuiNavLayer = 2;
pub type ImGuiNavLayer = ::chlorine::c_uint;
pub const ImGuiPopupPositionPolicy_ImGuiPopupPositionPolicy_Default: ImGuiPopupPositionPolicy = 0;
pub const ImGuiPopupPositionPolicy_ImGuiPopupPositionPolicy_ComboBox: ImGuiPopupPositionPolicy = 1;
pub const ImGuiPopupPositionPolicy_ImGuiPopupPositionPolicy_Tooltip: ImGuiPopupPositionPolicy = 2;
pub type ImGuiPopupPositionPolicy = ::chlorine::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataTypeTempStorage {
    pub Data: [ImU8; 8usize],
}
#[test]
fn bindgen_test_layout_ImGuiDataTypeTempStorage() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDataTypeTempStorage>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiDataTypeTempStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDataTypeTempStorage>(),
        1usize,
        concat!("Alignment of ", stringify!(ImGuiDataTypeTempStorage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeTempStorage>())).Data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeTempStorage),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataTypeInfo {
    pub Size: usize,
    pub Name: *const ::chlorine::c_char,
    pub PrintFmt: *const ::chlorine::c_char,
    pub ScanFmt: *const ::chlorine::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiDataTypeInfo() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDataTypeInfo>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiDataTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDataTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDataTypeInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeInfo>())).Size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeInfo>())).Name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeInfo>())).PrintFmt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(PrintFmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDataTypeInfo>())).ScanFmt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDataTypeInfo),
            "::",
            stringify!(ScanFmt)
        )
    );
}
pub const ImGuiDataTypePrivate__ImGuiDataType_String: ImGuiDataTypePrivate_ = 11;
pub const ImGuiDataTypePrivate__ImGuiDataType_Pointer: ImGuiDataTypePrivate_ = 12;
pub const ImGuiDataTypePrivate__ImGuiDataType_ID: ImGuiDataTypePrivate_ = 13;
pub type ImGuiDataTypePrivate_ = ::chlorine::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiColorMod {
    pub Col: ImGuiCol,
    pub BackupValue: ImVec4,
}
#[test]
fn bindgen_test_layout_ImGuiColorMod() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiColorMod>(),
        20usize,
        concat!("Size of: ", stringify!(ImGuiColorMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiColorMod>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiColorMod))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColorMod>())).Col as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiColorMod), "::", stringify!(Col))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiColorMod>())).BackupValue as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiColorMod),
            "::",
            stringify!(BackupValue)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyleMod {
    pub VarIdx: ImGuiStyleVar,
    pub __bindgen_anon_1: ImGuiStyleMod__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStyleMod__bindgen_ty_1 {
    pub BackupInt: [::chlorine::c_int; 2usize],
    pub BackupFloat: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_ImGuiStyleMod__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyleMod__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiStyleMod__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyleMod__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyleMod__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyleMod__bindgen_ty_1>())).BackupInt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyleMod__bindgen_ty_1),
            "::",
            stringify!(BackupInt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyleMod__bindgen_ty_1>())).BackupFloat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStyleMod__bindgen_ty_1),
            "::",
            stringify!(BackupFloat)
        )
    );
}
#[test]
fn bindgen_test_layout_ImGuiStyleMod() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyleMod>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiStyleMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyleMod>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyleMod))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStyleMod>())).VarIdx as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiStyleMod), "::", stringify!(VarIdx))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiGroupData {
    pub WindowID: ImGuiID,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupIndent: ImVec1,
    pub BackupGroupOffset: ImVec1,
    pub BackupCurrLineSize: ImVec2,
    pub BackupCurrLineTextBaseOffset: f32,
    pub BackupActiveIdIsAlive: ImGuiID,
    pub BackupActiveIdPreviousFrameIsAlive: bool,
    pub BackupHoveredIdIsAlive: bool,
    pub EmitItem: bool,
}
#[test]
fn bindgen_test_layout_ImGuiGroupData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiGroupData>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiGroupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiGroupData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiGroupData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).WindowID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(WindowID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupCursorPos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCursorPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupCursorMaxPos as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCursorMaxPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupIndent as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupIndent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupGroupOffset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupGroupOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupCurrLineSize as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCurrLineSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupCurrLineTextBaseOffset as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupCurrLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupActiveIdIsAlive as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupActiveIdIsAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupActiveIdPreviousFrameIsAlive as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupActiveIdPreviousFrameIsAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).BackupHoveredIdIsAlive as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(BackupHoveredIdIsAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiGroupData>())).EmitItem as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiGroupData),
            "::",
            stringify!(EmitItem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMenuColumns {
    pub Spacing: f32,
    pub Width: f32,
    pub NextWidth: f32,
    pub Pos: [f32; 3usize],
    pub NextWidths: [f32; 3usize],
}
#[test]
fn bindgen_test_layout_ImGuiMenuColumns() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiMenuColumns>(),
        36usize,
        concat!("Size of: ", stringify!(ImGuiMenuColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiMenuColumns>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiMenuColumns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).Spacing as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(Spacing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).Width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).NextWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(NextWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).Pos as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(ImGuiMenuColumns), "::", stringify!(Pos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMenuColumns>())).NextWidths as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMenuColumns),
            "::",
            stringify!(NextWidths)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiInputTextState {
    pub ID: ImGuiID,
    pub CurLenW: ::chlorine::c_int,
    pub CurLenA: ::chlorine::c_int,
    pub TextW: ImVector_ImWchar,
    pub TextA: ImVector_char,
    pub InitialTextA: ImVector_char,
    pub TextAIsValid: bool,
    pub BufCapacityA: ::chlorine::c_int,
    pub ScrollX: f32,
    pub Stb: STB_TexteditState,
    pub CursorAnim: f32,
    pub CursorFollow: bool,
    pub SelectedAllMouseLock: bool,
    pub Edited: bool,
    pub UserFlags: ImGuiInputTextFlags,
    pub UserCallback: ImGuiInputTextCallback,
    pub UserCallbackData: *mut ::chlorine::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextState() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextState>(),
        3736usize,
        concat!("Size of: ", stringify!(ImGuiInputTextState))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextState>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).CurLenW as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CurLenW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).CurLenA as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CurLenA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).TextW as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(TextW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).TextA as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(TextA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).InitialTextA as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(InitialTextA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).TextAIsValid as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(TextAIsValid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).BufCapacityA as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(BufCapacityA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).ScrollX as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(ScrollX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).Stb as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(Stb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).CursorAnim as *const _ as usize },
        3704usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CursorAnim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).CursorFollow as *const _ as usize },
        3708usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(CursorFollow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).SelectedAllMouseLock as *const _ as usize },
        3709usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(SelectedAllMouseLock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).Edited as *const _ as usize },
        3710usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(Edited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).UserFlags as *const _ as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(UserFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).UserCallback as *const _ as usize },
        3720usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(UserCallback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiInputTextState>())).UserCallbackData as *const _ as usize },
        3728usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiInputTextState),
            "::",
            stringify!(UserCallbackData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPopupData {
    pub PopupId: ImGuiID,
    pub Window: *mut ImGuiWindow,
    pub SourceWindow: *mut ImGuiWindow,
    pub OpenFrameCount: ::chlorine::c_int,
    pub OpenParentId: ImGuiID,
    pub OpenPopupPos: ImVec2,
    pub OpenMousePos: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiPopupData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPopupData>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiPopupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPopupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPopupData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).PopupId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(PopupId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).Window as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).SourceWindow as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(SourceWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).OpenFrameCount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenFrameCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).OpenParentId as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenParentId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).OpenPopupPos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenPopupPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPopupData>())).OpenMousePos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPopupData),
            "::",
            stringify!(OpenMousePos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNavMoveResult {
    pub Window: *mut ImGuiWindow,
    pub ID: ImGuiID,
    pub FocusScopeId: ImGuiID,
    pub DistBox: f32,
    pub DistCenter: f32,
    pub DistAxial: f32,
    pub RectRel: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiNavMoveResult() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiNavMoveResult>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiNavMoveResult))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNavMoveResult>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiNavMoveResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).Window as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).ID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).FocusScopeId as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(FocusScopeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).DistBox as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(DistBox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).DistCenter as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(DistCenter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).DistAxial as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(DistAxial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNavMoveResult>())).RectRel as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNavMoveResult),
            "::",
            stringify!(RectRel)
        )
    );
}
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_None: ImGuiNextWindowDataFlags_ = 0;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasPos: ImGuiNextWindowDataFlags_ = 1;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasSize: ImGuiNextWindowDataFlags_ = 2;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasContentSize: ImGuiNextWindowDataFlags_ = 4;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasCollapsed: ImGuiNextWindowDataFlags_ = 8;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasSizeConstraint: ImGuiNextWindowDataFlags_ = 16;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasFocus: ImGuiNextWindowDataFlags_ = 32;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasBgAlpha: ImGuiNextWindowDataFlags_ = 64;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasScroll: ImGuiNextWindowDataFlags_ = 128;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasViewport: ImGuiNextWindowDataFlags_ = 256;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasDock: ImGuiNextWindowDataFlags_ = 512;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasWindowClass: ImGuiNextWindowDataFlags_ = 1024;
pub type ImGuiNextWindowDataFlags_ = ::chlorine::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNextWindowData {
    pub Flags: ImGuiNextWindowDataFlags,
    pub PosCond: ImGuiCond,
    pub SizeCond: ImGuiCond,
    pub CollapsedCond: ImGuiCond,
    pub DockCond: ImGuiCond,
    pub PosVal: ImVec2,
    pub PosPivotVal: ImVec2,
    pub SizeVal: ImVec2,
    pub ContentSizeVal: ImVec2,
    pub ScrollVal: ImVec2,
    pub PosUndock: bool,
    pub CollapsedVal: bool,
    pub SizeConstraintRect: ImRect,
    pub SizeCallback: ImGuiSizeCallback,
    pub SizeCallbackUserData: *mut ::chlorine::c_void,
    pub BgAlphaVal: f32,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub WindowClass: ImGuiWindowClass,
    pub MenuBarOffsetMinVal: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiNextWindowData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiNextWindowData>(),
        152usize,
        concat!("Size of: ", stringify!(ImGuiNextWindowData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNextWindowData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiNextWindowData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).Flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).PosCond as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeCond as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).CollapsedCond as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(CollapsedCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).DockCond as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(DockCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).PosVal as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).PosPivotVal as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosPivotVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeVal as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).ContentSizeVal as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(ContentSizeVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).ScrollVal as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(ScrollVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).PosUndock as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(PosUndock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).CollapsedVal as *const _ as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(CollapsedVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeConstraintRect as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeConstraintRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeCallback as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeCallback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).SizeCallbackUserData as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(SizeCallbackUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).BgAlphaVal as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(BgAlphaVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).ViewportId as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(ViewportId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).DockId as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(DockId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).WindowClass as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(WindowClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextWindowData>())).MenuBarOffsetMinVal as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextWindowData),
            "::",
            stringify!(MenuBarOffsetMinVal)
        )
    );
}
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_None: ImGuiNextItemDataFlags_ = 0;
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_HasWidth: ImGuiNextItemDataFlags_ = 1;
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_HasOpen: ImGuiNextItemDataFlags_ = 2;
pub type ImGuiNextItemDataFlags_ = ::chlorine::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNextItemData {
    pub Flags: ImGuiNextItemDataFlags,
    pub Width: f32,
    pub FocusScopeId: ImGuiID,
    pub OpenCond: ImGuiCond,
    pub OpenVal: bool,
}
#[test]
fn bindgen_test_layout_ImGuiNextItemData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiNextItemData>(),
        20usize,
        concat!("Size of: ", stringify!(ImGuiNextItemData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNextItemData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiNextItemData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).Flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).Width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).FocusScopeId as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(FocusScopeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).OpenCond as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(OpenCond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiNextItemData>())).OpenVal as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiNextItemData),
            "::",
            stringify!(OpenVal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiShrinkWidthItem {
    pub Index: ::chlorine::c_int,
    pub Width: f32,
}
#[test]
fn bindgen_test_layout_ImGuiShrinkWidthItem() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiShrinkWidthItem>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiShrinkWidthItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiShrinkWidthItem>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiShrinkWidthItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiShrinkWidthItem>())).Index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiShrinkWidthItem),
            "::",
            stringify!(Index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiShrinkWidthItem>())).Width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiShrinkWidthItem),
            "::",
            stringify!(Width)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPtrOrIndex {
    pub Ptr: *mut ::chlorine::c_void,
    pub Index: ::chlorine::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiPtrOrIndex() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPtrOrIndex>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiPtrOrIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPtrOrIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPtrOrIndex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPtrOrIndex>())).Ptr as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiPtrOrIndex), "::", stringify!(Ptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiPtrOrIndex>())).Index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiPtrOrIndex),
            "::",
            stringify!(Index)
        )
    );
}
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_None: ImGuiOldColumnFlags_ = 0;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoBorder: ImGuiOldColumnFlags_ = 1;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoResize: ImGuiOldColumnFlags_ = 2;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoPreserveWidths: ImGuiOldColumnFlags_ = 4;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoForceWithinWindow: ImGuiOldColumnFlags_ = 8;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_GrowParentContentsSize: ImGuiOldColumnFlags_ = 16;
pub type ImGuiOldColumnFlags_ = ::chlorine::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOldColumnData {
    pub OffsetNorm: f32,
    pub OffsetNormBeforeResize: f32,
    pub Flags: ImGuiOldColumnFlags,
    pub ClipRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiOldColumnData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiOldColumnData>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiOldColumnData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOldColumnData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiOldColumnData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumnData>())).OffsetNorm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumnData),
            "::",
            stringify!(OffsetNorm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumnData>())).OffsetNormBeforeResize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumnData),
            "::",
            stringify!(OffsetNormBeforeResize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumnData>())).Flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumnData),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumnData>())).ClipRect as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumnData),
            "::",
            stringify!(ClipRect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOldColumns {
    pub ID: ImGuiID,
    pub Flags: ImGuiOldColumnFlags,
    pub IsFirstFrame: bool,
    pub IsBeingResized: bool,
    pub Current: ::chlorine::c_int,
    pub Count: ::chlorine::c_int,
    pub OffMinX: f32,
    pub OffMaxX: f32,
    pub LineMinY: f32,
    pub LineMaxY: f32,
    pub HostCursorPosY: f32,
    pub HostCursorMaxPosX: f32,
    pub HostInitialClipRect: ImRect,
    pub HostBackupClipRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub Columns: ImVector_ImGuiOldColumnData,
    pub Splitter: ImDrawListSplitter,
}
#[test]
fn bindgen_test_layout_ImGuiOldColumns() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiOldColumns>(),
        136usize,
        concat!("Size of: ", stringify!(ImGuiOldColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOldColumns>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiOldColumns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).ID as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiOldColumns), "::", stringify!(ID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).Flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).IsFirstFrame as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(IsFirstFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).IsBeingResized as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(IsBeingResized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).Current as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).Count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).OffMinX as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(OffMinX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).OffMaxX as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(OffMaxX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).LineMinY as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(LineMinY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).LineMaxY as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(LineMaxY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).HostCursorPosY as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostCursorPosY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).HostCursorMaxPosX as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostCursorMaxPosX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).HostInitialClipRect as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostInitialClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).HostBackupClipRect as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostBackupClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).HostBackupParentWorkRect as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(HostBackupParentWorkRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).Columns as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiOldColumns>())).Splitter as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiOldColumns),
            "::",
            stringify!(Splitter)
        )
    );
}
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_DockSpace: ImGuiDockNodeFlagsPrivate_ = 1024;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_CentralNode: ImGuiDockNodeFlagsPrivate_ = 2048;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoTabBar: ImGuiDockNodeFlagsPrivate_ = 4096;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_HiddenTabBar: ImGuiDockNodeFlagsPrivate_ = 8192;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoWindowMenuButton: ImGuiDockNodeFlagsPrivate_ = 16384;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoCloseButton: ImGuiDockNodeFlagsPrivate_ = 32768;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDocking: ImGuiDockNodeFlagsPrivate_ = 65536;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingSplitMe: ImGuiDockNodeFlagsPrivate_ = 131072;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingSplitOther: ImGuiDockNodeFlagsPrivate_ = 262144;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingOverMe: ImGuiDockNodeFlagsPrivate_ = 524288;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingOverOther: ImGuiDockNodeFlagsPrivate_ = 1048576;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoResizeX: ImGuiDockNodeFlagsPrivate_ = 2097152;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoResizeY: ImGuiDockNodeFlagsPrivate_ = 4194304;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_SharedFlagsInheritMask_: ImGuiDockNodeFlagsPrivate_ = -1;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoResizeFlagsMask_: ImGuiDockNodeFlagsPrivate_ = 6291488;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_LocalFlagsMask_: ImGuiDockNodeFlagsPrivate_ = 6421616;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_LocalFlagsTransferMask_: ImGuiDockNodeFlagsPrivate_ = 6420592;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_SavedFlagsMask_: ImGuiDockNodeFlagsPrivate_ = 6421536;
pub type ImGuiDockNodeFlagsPrivate_ = ::chlorine::c_int;
pub const ImGuiDataAuthority__ImGuiDataAuthority_Auto: ImGuiDataAuthority_ = 0;
pub const ImGuiDataAuthority__ImGuiDataAuthority_DockNode: ImGuiDataAuthority_ = 1;
pub const ImGuiDataAuthority__ImGuiDataAuthority_Window: ImGuiDataAuthority_ = 2;
pub type ImGuiDataAuthority_ = ::chlorine::c_uint;
pub const ImGuiDockNodeState_ImGuiDockNodeState_Unknown: ImGuiDockNodeState = 0;
pub const ImGuiDockNodeState_ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow: ImGuiDockNodeState = 1;
pub const ImGuiDockNodeState_ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing: ImGuiDockNodeState = 2;
pub const ImGuiDockNodeState_ImGuiDockNodeState_HostWindowVisible: ImGuiDockNodeState = 3;
pub type ImGuiDockNodeState = ::chlorine::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockNode {
    pub ID: ImGuiID,
    pub SharedFlags: ImGuiDockNodeFlags,
    pub LocalFlags: ImGuiDockNodeFlags,
    pub State: ImGuiDockNodeState,
    pub ParentNode: *mut ImGuiDockNode,
    pub ChildNodes: [*mut ImGuiDockNode; 2usize],
    pub Windows: ImVector_ImGuiWindowPtr,
    pub TabBar: *mut ImGuiTabBar,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeRef: ImVec2,
    pub SplitAxis: ImGuiAxis,
    pub WindowClass: ImGuiWindowClass,
    pub HostWindow: *mut ImGuiWindow,
    pub VisibleWindow: *mut ImGuiWindow,
    pub CentralNode: *mut ImGuiDockNode,
    pub OnlyNodeWithWindows: *mut ImGuiDockNode,
    pub LastFrameAlive: ::chlorine::c_int,
    pub LastFrameActive: ::chlorine::c_int,
    pub LastFrameFocused: ::chlorine::c_int,
    pub LastFocusedNodeId: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub WantCloseTabId: ImGuiID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: [u8; 5usize],
}
#[test]
fn bindgen_test_layout_ImGuiDockNode() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDockNode>(),
        192usize,
        concat!("Size of: ", stringify!(ImGuiDockNode))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDockNode>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDockNode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).ID as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiDockNode), "::", stringify!(ID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).SharedFlags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(SharedFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).LocalFlags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LocalFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).State as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(ImGuiDockNode), "::", stringify!(State))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).ParentNode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(ParentNode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).ChildNodes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(ChildNodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).Windows as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(Windows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).TabBar as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(ImGuiDockNode), "::", stringify!(TabBar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).Pos as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(ImGuiDockNode), "::", stringify!(Pos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).Size as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(ImGuiDockNode), "::", stringify!(Size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).SizeRef as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(SizeRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).SplitAxis as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(SplitAxis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).WindowClass as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(WindowClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).HostWindow as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(HostWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).VisibleWindow as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(VisibleWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).CentralNode as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(CentralNode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).OnlyNodeWithWindows as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(OnlyNodeWithWindows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).LastFrameAlive as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastFrameAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).LastFrameActive as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastFrameActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).LastFrameFocused as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastFrameFocused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).LastFocusedNodeId as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(LastFocusedNodeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).SelectedTabId as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(SelectedTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockNode>())).WantCloseTabId as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockNode),
            "::",
            stringify!(WantCloseTabId)
        )
    );
}
impl ImGuiDockNode {
    #[inline]
    pub fn AuthorityForPos(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForPos(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn AuthorityForSize(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForSize(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn AuthorityForViewport(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForViewport(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn IsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IsFocused(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsFocused(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HasCloseButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCloseButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HasWindowMenuButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasWindowMenuButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantCloseAll(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantCloseAll(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantLockSizeOnce(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantLockSizeOnce(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantMouseMove(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantMouseMove(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantHiddenTabBarUpdate(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarUpdate(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantHiddenTabBarToggle(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarToggle(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn MarkedForPosSizeWrite(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_MarkedForPosSizeWrite(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        AuthorityForPos: ImGuiDataAuthority,
        AuthorityForSize: ImGuiDataAuthority,
        AuthorityForViewport: ImGuiDataAuthority,
        IsVisible: bool,
        IsFocused: bool,
        HasCloseButton: bool,
        HasWindowMenuButton: bool,
        WantCloseAll: bool,
        WantLockSizeOnce: bool,
        WantMouseMove: bool,
        WantHiddenTabBarUpdate: bool,
        WantHiddenTabBarToggle: bool,
        MarkedForPosSizeWrite: bool,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let AuthorityForPos: u32 = unsafe { ::std::mem::transmute(AuthorityForPos) };
            AuthorityForPos as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let AuthorityForSize: u32 = unsafe { ::std::mem::transmute(AuthorityForSize) };
            AuthorityForSize as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let AuthorityForViewport: u32 = unsafe { ::std::mem::transmute(AuthorityForViewport) };
            AuthorityForViewport as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let IsVisible: u8 = unsafe { ::std::mem::transmute(IsVisible) };
            IsVisible as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let IsFocused: u8 = unsafe { ::std::mem::transmute(IsFocused) };
            IsFocused as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let HasCloseButton: u8 = unsafe { ::std::mem::transmute(HasCloseButton) };
            HasCloseButton as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let HasWindowMenuButton: u8 = unsafe { ::std::mem::transmute(HasWindowMenuButton) };
            HasWindowMenuButton as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let WantCloseAll: u8 = unsafe { ::std::mem::transmute(WantCloseAll) };
            WantCloseAll as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let WantLockSizeOnce: u8 = unsafe { ::std::mem::transmute(WantLockSizeOnce) };
            WantLockSizeOnce as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let WantMouseMove: u8 = unsafe { ::std::mem::transmute(WantMouseMove) };
            WantMouseMove as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let WantHiddenTabBarUpdate: u8 = unsafe { ::std::mem::transmute(WantHiddenTabBarUpdate) };
            WantHiddenTabBarUpdate as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let WantHiddenTabBarToggle: u8 = unsafe { ::std::mem::transmute(WantHiddenTabBarToggle) };
            WantHiddenTabBarToggle as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let MarkedForPosSizeWrite: u8 = unsafe { ::std::mem::transmute(MarkedForPosSizeWrite) };
            MarkedForPosSizeWrite as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_Text: ImGuiWindowDockStyleCol = 0;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_Tab: ImGuiWindowDockStyleCol = 1;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabHovered: ImGuiWindowDockStyleCol = 2;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabActive: ImGuiWindowDockStyleCol = 3;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabUnfocused: ImGuiWindowDockStyleCol = 4;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabUnfocusedActive: ImGuiWindowDockStyleCol = 5;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_COUNT: ImGuiWindowDockStyleCol = 6;
pub type ImGuiWindowDockStyleCol = ::chlorine::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowDockStyle {
    pub Colors: [ImU32; 6usize],
}
#[test]
fn bindgen_test_layout_ImGuiWindowDockStyle() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowDockStyle>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiWindowDockStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowDockStyle>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowDockStyle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowDockStyle>())).Colors as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowDockStyle),
            "::",
            stringify!(Colors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockContext {
    pub Nodes: ImGuiStorage,
    pub Requests: ImVector_ImGuiDockRequest,
    pub NodesSettings: ImVector_ImGuiDockNodeSettings,
    pub WantFullRebuild: bool,
}
#[test]
fn bindgen_test_layout_ImGuiDockContext() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDockContext>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiDockContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDockContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDockContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockContext>())).Nodes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockContext),
            "::",
            stringify!(Nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockContext>())).Requests as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockContext),
            "::",
            stringify!(Requests)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockContext>())).NodesSettings as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockContext),
            "::",
            stringify!(NodesSettings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiDockContext>())).WantFullRebuild as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiDockContext),
            "::",
            stringify!(WantFullRebuild)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiViewportP {
    pub _ImGuiViewport: ImGuiViewport,
    pub Idx: ::chlorine::c_int,
    pub LastFrameActive: ::chlorine::c_int,
    pub LastFrontMostStampCount: ::chlorine::c_int,
    pub LastNameHash: ImGuiID,
    pub LastPos: ImVec2,
    pub Alpha: f32,
    pub LastAlpha: f32,
    pub PlatformMonitor: ::chlorine::c_short,
    pub PlatformWindowCreated: bool,
    pub Window: *mut ImGuiWindow,
    pub DrawListsLastFrame: [::chlorine::c_int; 2usize],
    pub DrawLists: [*mut ImDrawList; 2usize],
    pub DrawDataP: ImDrawData,
    pub DrawDataBuilder: ImDrawDataBuilder,
    pub LastPlatformPos: ImVec2,
    pub LastPlatformSize: ImVec2,
    pub LastRendererSize: ImVec2,
    pub WorkOffsetMin: ImVec2,
    pub WorkOffsetMax: ImVec2,
    pub CurrWorkOffsetMin: ImVec2,
    pub CurrWorkOffsetMax: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiViewportP() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiViewportP>(),
        312usize,
        concat!("Size of: ", stringify!(ImGuiViewportP))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiViewportP>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiViewportP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>()))._ImGuiViewport as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(_ImGuiViewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).Idx as *const _ as usize },
        96usize,
        concat!("Offset of field: ", stringify!(ImGuiViewportP), "::", stringify!(Idx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastFrameActive as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastFrameActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastFrontMostStampCount as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastFrontMostStampCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastNameHash as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastNameHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastPos as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).Alpha as *const _ as usize },
        120usize,
        concat!("Offset of field: ", stringify!(ImGuiViewportP), "::", stringify!(Alpha))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastAlpha as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastAlpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).PlatformMonitor as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(PlatformMonitor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).PlatformWindowCreated as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(PlatformWindowCreated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).Window as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(Window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).DrawListsLastFrame as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(DrawListsLastFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).DrawLists as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(DrawLists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).DrawDataP as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(DrawDataP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).DrawDataBuilder as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(DrawDataBuilder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastPlatformPos as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastPlatformPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastPlatformSize as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastPlatformSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).LastRendererSize as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(LastRendererSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).WorkOffsetMin as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(WorkOffsetMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).WorkOffsetMax as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(WorkOffsetMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).CurrWorkOffsetMin as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(CurrWorkOffsetMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiViewportP>())).CurrWorkOffsetMax as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiViewportP),
            "::",
            stringify!(CurrWorkOffsetMax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowSettings {
    pub ID: ImGuiID,
    pub Pos: ImVec2ih,
    pub Size: ImVec2ih,
    pub ViewportPos: ImVec2ih,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub ClassId: ImGuiID,
    pub DockOrder: ::chlorine::c_short,
    pub Collapsed: bool,
    pub WantApply: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindowSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowSettings>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiWindowSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).Pos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).Size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).ViewportPos as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ViewportPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).ViewportId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ViewportId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).DockId as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(DockId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).ClassId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(ClassId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).DockOrder as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(DockOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).Collapsed as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(Collapsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowSettings>())).WantApply as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowSettings),
            "::",
            stringify!(WantApply)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSettingsHandler {
    pub TypeName: *const ::chlorine::c_char,
    pub TypeHash: ImGuiID,
    pub ClearAllFn:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler)>,
    pub ReadInitFn:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler)>,
    pub ReadOpenFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            name: *const ::chlorine::c_char,
        ) -> *mut ::chlorine::c_void,
    >,
    pub ReadLineFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            entry: *mut ::chlorine::c_void,
            line: *const ::chlorine::c_char,
        ),
    >,
    pub ApplyAllFn:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler)>,
    pub WriteAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler, out_buf: *mut ImGuiTextBuffer),
    >,
    pub UserData: *mut ::chlorine::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiSettingsHandler() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiSettingsHandler>(),
        72usize,
        concat!("Size of: ", stringify!(ImGuiSettingsHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSettingsHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSettingsHandler))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).TypeName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(TypeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).TypeHash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(TypeHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ClearAllFn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ClearAllFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ReadInitFn as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ReadInitFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ReadOpenFn as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ReadOpenFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ReadLineFn as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ReadLineFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).ApplyAllFn as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(ApplyAllFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).WriteAllFn as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(WriteAllFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiSettingsHandler>())).UserData as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiSettingsHandler),
            "::",
            stringify!(UserData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMetricsConfig {
    pub ShowWindowsRects: bool,
    pub ShowWindowsBeginOrder: bool,
    pub ShowTablesRects: bool,
    pub ShowDrawCmdMesh: bool,
    pub ShowDrawCmdBoundingBoxes: bool,
    pub ShowDockingNodes: bool,
    pub ShowWindowsRectsType: ::chlorine::c_int,
    pub ShowTablesRectsType: ::chlorine::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiMetricsConfig() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiMetricsConfig>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiMetricsConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiMetricsConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiMetricsConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowWindowsRects as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowWindowsRects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowWindowsBeginOrder as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowWindowsBeginOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowTablesRects as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowTablesRects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowDrawCmdMesh as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowDrawCmdMesh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowDrawCmdBoundingBoxes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowDrawCmdBoundingBoxes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowDockingNodes as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowDockingNodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowWindowsRectsType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowWindowsRectsType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiMetricsConfig>())).ShowTablesRectsType as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiMetricsConfig),
            "::",
            stringify!(ShowTablesRectsType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStackSizes {
    pub SizeOfIDStack: ::chlorine::c_short,
    pub SizeOfColorStack: ::chlorine::c_short,
    pub SizeOfStyleVarStack: ::chlorine::c_short,
    pub SizeOfFontStack: ::chlorine::c_short,
    pub SizeOfFocusScopeStack: ::chlorine::c_short,
    pub SizeOfGroupStack: ::chlorine::c_short,
    pub SizeOfBeginPopupStack: ::chlorine::c_short,
}
#[test]
fn bindgen_test_layout_ImGuiStackSizes() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStackSizes>(),
        14usize,
        concat!("Size of: ", stringify!(ImGuiStackSizes))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStackSizes>(),
        2usize,
        concat!("Alignment of ", stringify!(ImGuiStackSizes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfIDStack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfIDStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfColorStack as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfColorStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfStyleVarStack as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfStyleVarStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfFontStack as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfFontStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfFocusScopeStack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfFocusScopeStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfGroupStack as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfGroupStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiStackSizes>())).SizeOfBeginPopupStack as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiStackSizes),
            "::",
            stringify!(SizeOfBeginPopupStack)
        )
    );
}
pub const ImGuiContextHookType_ImGuiContextHookType_NewFramePre: ImGuiContextHookType = 0;
pub const ImGuiContextHookType_ImGuiContextHookType_NewFramePost: ImGuiContextHookType = 1;
pub const ImGuiContextHookType_ImGuiContextHookType_EndFramePre: ImGuiContextHookType = 2;
pub const ImGuiContextHookType_ImGuiContextHookType_EndFramePost: ImGuiContextHookType = 3;
pub const ImGuiContextHookType_ImGuiContextHookType_RenderPre: ImGuiContextHookType = 4;
pub const ImGuiContextHookType_ImGuiContextHookType_RenderPost: ImGuiContextHookType = 5;
pub const ImGuiContextHookType_ImGuiContextHookType_Shutdown: ImGuiContextHookType = 6;
pub const ImGuiContextHookType_ImGuiContextHookType_PendingRemoval_: ImGuiContextHookType = 7;
pub type ImGuiContextHookType = ::chlorine::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContextHook {
    pub HookId: ImGuiID,
    pub Type: ImGuiContextHookType,
    pub Owner: ImGuiID,
    pub Callback: ImGuiContextHookCallback,
    pub UserData: *mut ::chlorine::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiContextHook() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiContextHook>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiContextHook))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiContextHook>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiContextHook))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContextHook>())).HookId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(HookId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContextHook>())).Type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContextHook>())).Owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(Owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContextHook>())).Callback as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(Callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContextHook>())).UserData as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContextHook),
            "::",
            stringify!(UserData)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiContext {
    pub Initialized: bool,
    pub FontAtlasOwnedByContext: bool,
    pub IO: ImGuiIO,
    pub PlatformIO: ImGuiPlatformIO,
    pub Style: ImGuiStyle,
    pub ConfigFlagsCurrFrame: ImGuiConfigFlags,
    pub ConfigFlagsLastFrame: ImGuiConfigFlags,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub FontBaseSize: f32,
    pub DrawListSharedData: ImDrawListSharedData,
    pub Time: f64,
    pub FrameCount: ::chlorine::c_int,
    pub FrameCountEnded: ::chlorine::c_int,
    pub FrameCountPlatformEnded: ::chlorine::c_int,
    pub FrameCountRendered: ::chlorine::c_int,
    pub WithinFrameScope: bool,
    pub WithinFrameScopeWithImplicitWindow: bool,
    pub WithinEndChild: bool,
    pub GcCompactAll: bool,
    pub TestEngineHookItems: bool,
    pub TestEngineHookIdInfo: ImGuiID,
    pub TestEngine: *mut ::chlorine::c_void,
    pub Windows: ImVector_ImGuiWindowPtr,
    pub WindowsFocusOrder: ImVector_ImGuiWindowPtr,
    pub WindowsTempSortBuffer: ImVector_ImGuiWindowPtr,
    pub CurrentWindowStack: ImVector_ImGuiWindowPtr,
    pub WindowsById: ImGuiStorage,
    pub WindowsActiveCount: ::chlorine::c_int,
    pub CurrentWindow: *mut ImGuiWindow,
    pub HoveredWindow: *mut ImGuiWindow,
    pub HoveredWindowUnderMovingWindow: *mut ImGuiWindow,
    pub HoveredDockNode: *mut ImGuiDockNode,
    pub MovingWindow: *mut ImGuiWindow,
    pub WheelingWindow: *mut ImGuiWindow,
    pub WheelingWindowRefMousePos: ImVec2,
    pub WheelingWindowTimer: f32,
    pub HoveredId: ImGuiID,
    pub HoveredIdPreviousFrame: ImGuiID,
    pub HoveredIdAllowOverlap: bool,
    pub HoveredIdUsingMouseWheel: bool,
    pub HoveredIdPreviousFrameUsingMouseWheel: bool,
    pub HoveredIdDisabled: bool,
    pub HoveredIdTimer: f32,
    pub HoveredIdNotActiveTimer: f32,
    pub ActiveId: ImGuiID,
    pub ActiveIdIsAlive: ImGuiID,
    pub ActiveIdTimer: f32,
    pub ActiveIdIsJustActivated: bool,
    pub ActiveIdAllowOverlap: bool,
    pub ActiveIdNoClearOnFocusLoss: bool,
    pub ActiveIdHasBeenPressedBefore: bool,
    pub ActiveIdHasBeenEditedBefore: bool,
    pub ActiveIdHasBeenEditedThisFrame: bool,
    pub ActiveIdUsingMouseWheel: bool,
    pub ActiveIdUsingNavDirMask: ImU32,
    pub ActiveIdUsingNavInputMask: ImU32,
    pub ActiveIdUsingKeyInputMask: ImU64,
    pub ActiveIdClickOffset: ImVec2,
    pub ActiveIdWindow: *mut ImGuiWindow,
    pub ActiveIdSource: ImGuiInputSource,
    pub ActiveIdMouseButton: ::chlorine::c_int,
    pub ActiveIdPreviousFrame: ImGuiID,
    pub ActiveIdPreviousFrameIsAlive: bool,
    pub ActiveIdPreviousFrameHasBeenEditedBefore: bool,
    pub ActiveIdPreviousFrameWindow: *mut ImGuiWindow,
    pub LastActiveId: ImGuiID,
    pub LastActiveIdTimer: f32,
    pub NextWindowData: ImGuiNextWindowData,
    pub NextItemData: ImGuiNextItemData,
    pub ColorStack: ImVector_ImGuiColorMod,
    pub StyleVarStack: ImVector_ImGuiStyleMod,
    pub FontStack: ImVector_ImFontPtr,
    pub FocusScopeStack: ImVector_ImGuiID,
    pub ItemFlagsStack: ImVector_ImGuiItemFlags,
    pub GroupStack: ImVector_ImGuiGroupData,
    pub OpenPopupStack: ImVector_ImGuiPopupData,
    pub BeginPopupStack: ImVector_ImGuiPopupData,
    pub Viewports: ImVector_ImGuiViewportPPtr,
    pub CurrentDpiScale: f32,
    pub CurrentViewport: *mut ImGuiViewportP,
    pub MouseViewport: *mut ImGuiViewportP,
    pub MouseLastHoveredViewport: *mut ImGuiViewportP,
    pub PlatformLastFocusedViewportId: ImGuiID,
    pub FallbackMonitor: ImGuiPlatformMonitor,
    pub ViewportFrontMostStampCount: ::chlorine::c_int,
    pub NavWindow: *mut ImGuiWindow,
    pub NavId: ImGuiID,
    pub NavFocusScopeId: ImGuiID,
    pub NavActivateId: ImGuiID,
    pub NavActivateDownId: ImGuiID,
    pub NavActivatePressedId: ImGuiID,
    pub NavInputId: ImGuiID,
    pub NavJustTabbedId: ImGuiID,
    pub NavJustMovedToId: ImGuiID,
    pub NavJustMovedToFocusScopeId: ImGuiID,
    pub NavJustMovedToKeyMods: ImGuiKeyModFlags,
    pub NavNextActivateId: ImGuiID,
    pub NavInputSource: ImGuiInputSource,
    pub NavScoringRect: ImRect,
    pub NavScoringCount: ::chlorine::c_int,
    pub NavLayer: ImGuiNavLayer,
    pub NavIdTabCounter: ::chlorine::c_int,
    pub NavIdIsAlive: bool,
    pub NavMousePosDirty: bool,
    pub NavDisableHighlight: bool,
    pub NavDisableMouseHover: bool,
    pub NavAnyRequest: bool,
    pub NavInitRequest: bool,
    pub NavInitRequestFromMove: bool,
    pub NavInitResultId: ImGuiID,
    pub NavInitResultRectRel: ImRect,
    pub NavMoveRequest: bool,
    pub NavMoveRequestFlags: ImGuiNavMoveFlags,
    pub NavMoveRequestForward: ImGuiNavForward,
    pub NavMoveRequestKeyMods: ImGuiKeyModFlags,
    pub NavMoveDir: ImGuiDir,
    pub NavMoveDirLast: ImGuiDir,
    pub NavMoveClipDir: ImGuiDir,
    pub NavMoveResultLocal: ImGuiNavMoveResult,
    pub NavMoveResultLocalVisibleSet: ImGuiNavMoveResult,
    pub NavMoveResultOther: ImGuiNavMoveResult,
    pub NavWrapRequestWindow: *mut ImGuiWindow,
    pub NavWrapRequestFlags: ImGuiNavMoveFlags,
    pub NavWindowingTarget: *mut ImGuiWindow,
    pub NavWindowingTargetAnim: *mut ImGuiWindow,
    pub NavWindowingListWindow: *mut ImGuiWindow,
    pub NavWindowingTimer: f32,
    pub NavWindowingHighlightAlpha: f32,
    pub NavWindowingToggleLayer: bool,
    pub TabFocusRequestCurrWindow: *mut ImGuiWindow,
    pub TabFocusRequestNextWindow: *mut ImGuiWindow,
    pub TabFocusRequestCurrCounterRegular: ::chlorine::c_int,
    pub TabFocusRequestCurrCounterTabStop: ::chlorine::c_int,
    pub TabFocusRequestNextCounterRegular: ::chlorine::c_int,
    pub TabFocusRequestNextCounterTabStop: ::chlorine::c_int,
    pub TabFocusPressed: bool,
    pub DimBgRatio: f32,
    pub MouseCursor: ImGuiMouseCursor,
    pub DragDropActive: bool,
    pub DragDropWithinSource: bool,
    pub DragDropWithinTarget: bool,
    pub DragDropSourceFlags: ImGuiDragDropFlags,
    pub DragDropSourceFrameCount: ::chlorine::c_int,
    pub DragDropMouseButton: ::chlorine::c_int,
    pub DragDropPayload: ImGuiPayload,
    pub DragDropTargetRect: ImRect,
    pub DragDropTargetId: ImGuiID,
    pub DragDropAcceptFlags: ImGuiDragDropFlags,
    pub DragDropAcceptIdCurrRectSurface: f32,
    pub DragDropAcceptIdCurr: ImGuiID,
    pub DragDropAcceptIdPrev: ImGuiID,
    pub DragDropAcceptFrameCount: ::chlorine::c_int,
    pub DragDropHoldJustPressedId: ImGuiID,
    pub DragDropPayloadBufHeap: ImVector_unsigned_char,
    pub DragDropPayloadBufLocal: [::chlorine::c_uchar; 16usize],
    pub CurrentTable: *mut ImGuiTable,
    pub Tables: ImPool_ImGuiTable,
    pub CurrentTableStack: ImVector_ImGuiPtrOrIndex,
    pub TablesLastTimeActive: ImVector_float,
    pub DrawChannelsTempMergeBuffer: ImVector_ImDrawChannel,
    pub CurrentTabBar: *mut ImGuiTabBar,
    pub TabBars: ImPool_ImGuiTabBar,
    pub CurrentTabBarStack: ImVector_ImGuiPtrOrIndex,
    pub ShrinkWidthBuffer: ImVector_ImGuiShrinkWidthItem,
    pub LastValidMousePos: ImVec2,
    pub InputTextState: ImGuiInputTextState,
    pub InputTextPasswordFont: ImFont,
    pub TempInputId: ImGuiID,
    pub ColorEditOptions: ImGuiColorEditFlags,
    pub ColorEditLastHue: f32,
    pub ColorEditLastSat: f32,
    pub ColorEditLastColor: [f32; 3usize],
    pub ColorPickerRef: ImVec4,
    pub SliderCurrentAccum: f32,
    pub SliderCurrentAccumDirty: bool,
    pub DragCurrentAccumDirty: bool,
    pub DragCurrentAccum: f32,
    pub DragSpeedDefaultRatio: f32,
    pub ScrollbarClickDeltaToGrabCenter: f32,
    pub TooltipOverrideCount: ::chlorine::c_int,
    pub TooltipSlowDelay: f32,
    pub ClipboardHandlerData: ImVector_char,
    pub MenusIdSubmittedThisFrame: ImVector_ImGuiID,
    pub PlatformImePos: ImVec2,
    pub PlatformImeLastPos: ImVec2,
    pub PlatformImePosViewport: *mut ImGuiViewportP,
    pub PlatformLocaleDecimalPoint: ::chlorine::c_char,
    pub DockContext: ImGuiDockContext,
    pub SettingsLoaded: bool,
    pub SettingsDirtyTimer: f32,
    pub SettingsIniData: ImGuiTextBuffer,
    pub SettingsHandlers: ImVector_ImGuiSettingsHandler,
    pub SettingsWindows: ImChunkStream_ImGuiWindowSettings,
    pub SettingsTables: ImChunkStream_ImGuiTableSettings,
    pub Hooks: ImVector_ImGuiContextHook,
    pub HookIdNext: ImGuiID,
    pub LogEnabled: bool,
    pub LogType: ImGuiLogType,
    pub LogFile: ImFileHandle,
    pub LogBuffer: ImGuiTextBuffer,
    pub LogNextPrefix: *const ::chlorine::c_char,
    pub LogNextSuffix: *const ::chlorine::c_char,
    pub LogLinePosY: f32,
    pub LogLineFirstItem: bool,
    pub LogDepthRef: ::chlorine::c_int,
    pub LogDepthToExpand: ::chlorine::c_int,
    pub LogDepthToExpandDefault: ::chlorine::c_int,
    pub DebugItemPickerActive: bool,
    pub DebugItemPickerBreakId: ImGuiID,
    pub DebugMetricsConfig: ImGuiMetricsConfig,
    pub FramerateSecPerFrame: [f32; 120usize],
    pub FramerateSecPerFrameIdx: ::chlorine::c_int,
    pub FramerateSecPerFrameAccum: f32,
    pub WantCaptureMouseNextFrame: ::chlorine::c_int,
    pub WantCaptureKeyboardNextFrame: ::chlorine::c_int,
    pub WantTextInputNextFrame: ::chlorine::c_int,
    pub TempBuffer: [::chlorine::c_char; 3073usize],
}
#[test]
fn bindgen_test_layout_ImGuiContext() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiContext>(),
        16552usize,
        concat!("Size of: ", stringify!(ImGuiContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Initialized as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Initialized)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FontAtlasOwnedByContext as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontAtlasOwnedByContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).IO as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImGuiContext), "::", stringify!(IO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).PlatformIO as *const _ as usize },
        5464usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformIO)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Style as *const _ as usize },
        5688usize,
        concat!("Offset of field: ", stringify!(ImGuiContext), "::", stringify!(Style))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ConfigFlagsCurrFrame as *const _ as usize },
        6764usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ConfigFlagsCurrFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ConfigFlagsLastFrame as *const _ as usize },
        6768usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ConfigFlagsLastFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Font as *const _ as usize },
        6776usize,
        concat!("Offset of field: ", stringify!(ImGuiContext), "::", stringify!(Font))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FontSize as *const _ as usize },
        6784usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FontBaseSize as *const _ as usize },
        6788usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontBaseSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DrawListSharedData as *const _ as usize },
        6792usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DrawListSharedData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Time as *const _ as usize },
        7304usize,
        concat!("Offset of field: ", stringify!(ImGuiContext), "::", stringify!(Time))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FrameCount as *const _ as usize },
        7312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FrameCountEnded as *const _ as usize },
        7316usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCountEnded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FrameCountPlatformEnded as *const _ as usize },
        7320usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCountPlatformEnded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FrameCountRendered as *const _ as usize },
        7324usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FrameCountRendered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WithinFrameScope as *const _ as usize },
        7328usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WithinFrameScope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WithinFrameScopeWithImplicitWindow as *const _ as usize },
        7329usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WithinFrameScopeWithImplicitWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WithinEndChild as *const _ as usize },
        7330usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WithinEndChild)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).GcCompactAll as *const _ as usize },
        7331usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(GcCompactAll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TestEngineHookItems as *const _ as usize },
        7332usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TestEngineHookItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TestEngineHookIdInfo as *const _ as usize },
        7336usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TestEngineHookIdInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TestEngine as *const _ as usize },
        7344usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TestEngine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Windows as *const _ as usize },
        7352usize,
        concat!("Offset of field: ", stringify!(ImGuiContext), "::", stringify!(Windows))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WindowsFocusOrder as *const _ as usize },
        7368usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsFocusOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WindowsTempSortBuffer as *const _ as usize },
        7384usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsTempSortBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentWindowStack as *const _ as usize },
        7400usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentWindowStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WindowsById as *const _ as usize },
        7416usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsById)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WindowsActiveCount as *const _ as usize },
        7432usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WindowsActiveCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentWindow as *const _ as usize },
        7440usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredWindow as *const _ as usize },
        7448usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredWindowUnderMovingWindow as *const _ as usize },
        7456usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredWindowUnderMovingWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredDockNode as *const _ as usize },
        7464usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredDockNode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).MovingWindow as *const _ as usize },
        7472usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MovingWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WheelingWindow as *const _ as usize },
        7480usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WheelingWindowRefMousePos as *const _ as usize },
        7488usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindowRefMousePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WheelingWindowTimer as *const _ as usize },
        7496usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WheelingWindowTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredId as *const _ as usize },
        7500usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdPreviousFrame as *const _ as usize },
        7504usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdPreviousFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdAllowOverlap as *const _ as usize },
        7508usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdAllowOverlap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdUsingMouseWheel as *const _ as usize },
        7509usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdUsingMouseWheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdPreviousFrameUsingMouseWheel as *const _ as usize },
        7510usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdPreviousFrameUsingMouseWheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdDisabled as *const _ as usize },
        7511usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdDisabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdTimer as *const _ as usize },
        7512usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HoveredIdNotActiveTimer as *const _ as usize },
        7516usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HoveredIdNotActiveTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveId as *const _ as usize },
        7520usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdIsAlive as *const _ as usize },
        7524usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdIsAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdTimer as *const _ as usize },
        7528usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdIsJustActivated as *const _ as usize },
        7532usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdIsJustActivated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdAllowOverlap as *const _ as usize },
        7533usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdAllowOverlap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdNoClearOnFocusLoss as *const _ as usize },
        7534usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdNoClearOnFocusLoss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdHasBeenPressedBefore as *const _ as usize },
        7535usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdHasBeenPressedBefore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdHasBeenEditedBefore as *const _ as usize },
        7536usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdHasBeenEditedBefore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdHasBeenEditedThisFrame as *const _ as usize },
        7537usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdHasBeenEditedThisFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdUsingMouseWheel as *const _ as usize },
        7538usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdUsingMouseWheel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdUsingNavDirMask as *const _ as usize },
        7540usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdUsingNavDirMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdUsingNavInputMask as *const _ as usize },
        7544usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdUsingNavInputMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdUsingKeyInputMask as *const _ as usize },
        7552usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdUsingKeyInputMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdClickOffset as *const _ as usize },
        7560usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdClickOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdWindow as *const _ as usize },
        7568usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdSource as *const _ as usize },
        7576usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdSource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdMouseButton as *const _ as usize },
        7580usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdMouseButton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdPreviousFrame as *const _ as usize },
        7584usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdPreviousFrameIsAlive as *const _ as usize },
        7588usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrameIsAlive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdPreviousFrameHasBeenEditedBefore as *const _ as usize
        },
        7589usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrameHasBeenEditedBefore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ActiveIdPreviousFrameWindow as *const _ as usize },
        7592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ActiveIdPreviousFrameWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LastActiveId as *const _ as usize },
        7600usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastActiveId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LastActiveIdTimer as *const _ as usize },
        7604usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastActiveIdTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NextWindowData as *const _ as usize },
        7608usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NextWindowData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NextItemData as *const _ as usize },
        7760usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NextItemData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorStack as *const _ as usize },
        7784usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).StyleVarStack as *const _ as usize },
        7800usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(StyleVarStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FontStack as *const _ as usize },
        7816usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FontStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FocusScopeStack as *const _ as usize },
        7832usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FocusScopeStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ItemFlagsStack as *const _ as usize },
        7848usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ItemFlagsStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).GroupStack as *const _ as usize },
        7864usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(GroupStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).OpenPopupStack as *const _ as usize },
        7880usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(OpenPopupStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).BeginPopupStack as *const _ as usize },
        7896usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(BeginPopupStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Viewports as *const _ as usize },
        7912usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(Viewports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentDpiScale as *const _ as usize },
        7928usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentDpiScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentViewport as *const _ as usize },
        7936usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentViewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).MouseViewport as *const _ as usize },
        7944usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MouseViewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).MouseLastHoveredViewport as *const _ as usize },
        7952usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MouseLastHoveredViewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).PlatformLastFocusedViewportId as *const _ as usize },
        7960usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformLastFocusedViewportId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FallbackMonitor as *const _ as usize },
        7964usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FallbackMonitor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ViewportFrontMostStampCount as *const _ as usize },
        8000usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ViewportFrontMostStampCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindow as *const _ as usize },
        8008usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavId as *const _ as usize },
        8016usize,
        concat!("Offset of field: ", stringify!(ImGuiContext), "::", stringify!(NavId))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavFocusScopeId as *const _ as usize },
        8020usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavFocusScopeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavActivateId as *const _ as usize },
        8024usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivateId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavActivateDownId as *const _ as usize },
        8028usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivateDownId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavActivatePressedId as *const _ as usize },
        8032usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavActivatePressedId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInputId as *const _ as usize },
        8036usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInputId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavJustTabbedId as *const _ as usize },
        8040usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustTabbedId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavJustMovedToId as *const _ as usize },
        8044usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustMovedToId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavJustMovedToFocusScopeId as *const _ as usize },
        8048usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustMovedToFocusScopeId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavJustMovedToKeyMods as *const _ as usize },
        8052usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavJustMovedToKeyMods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavNextActivateId as *const _ as usize },
        8056usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavNextActivateId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInputSource as *const _ as usize },
        8060usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInputSource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavScoringRect as *const _ as usize },
        8064usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavScoringRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavScoringCount as *const _ as usize },
        8080usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavScoringCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavLayer as *const _ as usize },
        8084usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavLayer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavIdTabCounter as *const _ as usize },
        8088usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavIdTabCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavIdIsAlive as *const _ as usize },
        8092usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavIdIsAlive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMousePosDirty as *const _ as usize },
        8093usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMousePosDirty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavDisableHighlight as *const _ as usize },
        8094usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavDisableHighlight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavDisableMouseHover as *const _ as usize },
        8095usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavDisableMouseHover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavAnyRequest as *const _ as usize },
        8096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavAnyRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInitRequest as *const _ as usize },
        8097usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInitRequestFromMove as *const _ as usize },
        8098usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitRequestFromMove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInitResultId as *const _ as usize },
        8100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitResultId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavInitResultRectRel as *const _ as usize },
        8104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavInitResultRectRel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveRequest as *const _ as usize },
        8120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveRequestFlags as *const _ as usize },
        8124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveRequestFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveRequestForward as *const _ as usize },
        8128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveRequestForward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveRequestKeyMods as *const _ as usize },
        8132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveRequestKeyMods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveDir as *const _ as usize },
        8136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveDirLast as *const _ as usize },
        8140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveDirLast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveClipDir as *const _ as usize },
        8144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveClipDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveResultLocal as *const _ as usize },
        8152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveResultLocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveResultLocalVisibleSet as *const _ as usize },
        8200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveResultLocalVisibleSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavMoveResultOther as *const _ as usize },
        8248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavMoveResultOther)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWrapRequestWindow as *const _ as usize },
        8296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWrapRequestWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWrapRequestFlags as *const _ as usize },
        8304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWrapRequestFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingTarget as *const _ as usize },
        8312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingTarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingTargetAnim as *const _ as usize },
        8320usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingTargetAnim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingListWindow as *const _ as usize },
        8328usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingListWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingTimer as *const _ as usize },
        8336usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingHighlightAlpha as *const _ as usize },
        8340usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingHighlightAlpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).NavWindowingToggleLayer as *const _ as usize },
        8344usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(NavWindowingToggleLayer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TabFocusRequestCurrWindow as *const _ as usize },
        8352usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TabFocusRequestCurrWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TabFocusRequestNextWindow as *const _ as usize },
        8360usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TabFocusRequestNextWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TabFocusRequestCurrCounterRegular as *const _ as usize },
        8368usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TabFocusRequestCurrCounterRegular)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TabFocusRequestCurrCounterTabStop as *const _ as usize },
        8372usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TabFocusRequestCurrCounterTabStop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TabFocusRequestNextCounterRegular as *const _ as usize },
        8376usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TabFocusRequestNextCounterRegular)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TabFocusRequestNextCounterTabStop as *const _ as usize },
        8380usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TabFocusRequestNextCounterTabStop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TabFocusPressed as *const _ as usize },
        8384usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TabFocusPressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DimBgRatio as *const _ as usize },
        8388usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DimBgRatio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).MouseCursor as *const _ as usize },
        8392usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MouseCursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropActive as *const _ as usize },
        8396usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropWithinSource as *const _ as usize },
        8397usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropWithinSource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropWithinTarget as *const _ as usize },
        8398usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropWithinTarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropSourceFlags as *const _ as usize },
        8400usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropSourceFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropSourceFrameCount as *const _ as usize },
        8404usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropSourceFrameCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropMouseButton as *const _ as usize },
        8408usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropMouseButton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropPayload as *const _ as usize },
        8416usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropPayload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropTargetRect as *const _ as usize },
        8480usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropTargetRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropTargetId as *const _ as usize },
        8496usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropTargetId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptFlags as *const _ as usize },
        8500usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptIdCurrRectSurface as *const _ as usize },
        8504usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptIdCurrRectSurface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptIdCurr as *const _ as usize },
        8508usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptIdCurr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptIdPrev as *const _ as usize },
        8512usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptIdPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropAcceptFrameCount as *const _ as usize },
        8516usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropAcceptFrameCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropHoldJustPressedId as *const _ as usize },
        8520usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropHoldJustPressedId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropPayloadBufHeap as *const _ as usize },
        8528usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropPayloadBufHeap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragDropPayloadBufLocal as *const _ as usize },
        8544usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragDropPayloadBufLocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentTable as *const _ as usize },
        8560usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Tables as *const _ as usize },
        8568usize,
        concat!("Offset of field: ", stringify!(ImGuiContext), "::", stringify!(Tables))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentTableStack as *const _ as usize },
        8608usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentTableStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TablesLastTimeActive as *const _ as usize },
        8624usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TablesLastTimeActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DrawChannelsTempMergeBuffer as *const _ as usize },
        8640usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DrawChannelsTempMergeBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentTabBar as *const _ as usize },
        8656usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentTabBar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TabBars as *const _ as usize },
        8664usize,
        concat!("Offset of field: ", stringify!(ImGuiContext), "::", stringify!(TabBars))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).CurrentTabBarStack as *const _ as usize },
        8704usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(CurrentTabBarStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ShrinkWidthBuffer as *const _ as usize },
        8720usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ShrinkWidthBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LastValidMousePos as *const _ as usize },
        8736usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LastValidMousePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).InputTextState as *const _ as usize },
        8744usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputTextState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).InputTextPasswordFont as *const _ as usize },
        12480usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(InputTextPasswordFont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TempInputId as *const _ as usize },
        12592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TempInputId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorEditOptions as *const _ as usize },
        12596usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorEditLastHue as *const _ as usize },
        12600usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditLastHue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorEditLastSat as *const _ as usize },
        12604usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditLastSat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorEditLastColor as *const _ as usize },
        12608usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorEditLastColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ColorPickerRef as *const _ as usize },
        12620usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ColorPickerRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SliderCurrentAccum as *const _ as usize },
        12636usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SliderCurrentAccum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SliderCurrentAccumDirty as *const _ as usize },
        12640usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SliderCurrentAccumDirty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragCurrentAccumDirty as *const _ as usize },
        12641usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragCurrentAccumDirty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragCurrentAccum as *const _ as usize },
        12644usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragCurrentAccum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DragSpeedDefaultRatio as *const _ as usize },
        12648usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DragSpeedDefaultRatio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ScrollbarClickDeltaToGrabCenter as *const _ as usize },
        12652usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ScrollbarClickDeltaToGrabCenter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TooltipOverrideCount as *const _ as usize },
        12656usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TooltipOverrideCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TooltipSlowDelay as *const _ as usize },
        12660usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TooltipSlowDelay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).ClipboardHandlerData as *const _ as usize },
        12664usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(ClipboardHandlerData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).MenusIdSubmittedThisFrame as *const _ as usize },
        12680usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(MenusIdSubmittedThisFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).PlatformImePos as *const _ as usize },
        12696usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformImePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).PlatformImeLastPos as *const _ as usize },
        12704usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformImeLastPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).PlatformImePosViewport as *const _ as usize },
        12712usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformImePosViewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).PlatformLocaleDecimalPoint as *const _ as usize },
        12720usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(PlatformLocaleDecimalPoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DockContext as *const _ as usize },
        12728usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DockContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsLoaded as *const _ as usize },
        12784usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsLoaded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsDirtyTimer as *const _ as usize },
        12788usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsDirtyTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsIniData as *const _ as usize },
        12792usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsIniData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsHandlers as *const _ as usize },
        12808usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsHandlers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsWindows as *const _ as usize },
        12824usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsWindows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).SettingsTables as *const _ as usize },
        12840usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(SettingsTables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).Hooks as *const _ as usize },
        12856usize,
        concat!("Offset of field: ", stringify!(ImGuiContext), "::", stringify!(Hooks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).HookIdNext as *const _ as usize },
        12872usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(HookIdNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogEnabled as *const _ as usize },
        12876usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogType as *const _ as usize },
        12880usize,
        concat!("Offset of field: ", stringify!(ImGuiContext), "::", stringify!(LogType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogFile as *const _ as usize },
        12888usize,
        concat!("Offset of field: ", stringify!(ImGuiContext), "::", stringify!(LogFile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogBuffer as *const _ as usize },
        12896usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogNextPrefix as *const _ as usize },
        12912usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogNextPrefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogNextSuffix as *const _ as usize },
        12920usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogNextSuffix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogLinePosY as *const _ as usize },
        12928usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogLinePosY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogLineFirstItem as *const _ as usize },
        12932usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogLineFirstItem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogDepthRef as *const _ as usize },
        12936usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogDepthRef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogDepthToExpand as *const _ as usize },
        12940usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogDepthToExpand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).LogDepthToExpandDefault as *const _ as usize },
        12944usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(LogDepthToExpandDefault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DebugItemPickerActive as *const _ as usize },
        12948usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugItemPickerActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DebugItemPickerBreakId as *const _ as usize },
        12952usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugItemPickerBreakId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).DebugMetricsConfig as *const _ as usize },
        12956usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(DebugMetricsConfig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FramerateSecPerFrame as *const _ as usize },
        12972usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FramerateSecPerFrameIdx as *const _ as usize },
        13452usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrameIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).FramerateSecPerFrameAccum as *const _ as usize },
        13456usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(FramerateSecPerFrameAccum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WantCaptureMouseNextFrame as *const _ as usize },
        13460usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WantCaptureMouseNextFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WantCaptureKeyboardNextFrame as *const _ as usize },
        13464usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WantCaptureKeyboardNextFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).WantTextInputNextFrame as *const _ as usize },
        13468usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(WantTextInputNextFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiContext>())).TempBuffer as *const _ as usize },
        13472usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiContext),
            "::",
            stringify!(TempBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowTempData {
    pub CursorPos: ImVec2,
    pub CursorPosPrevLine: ImVec2,
    pub CursorStartPos: ImVec2,
    pub CursorMaxPos: ImVec2,
    pub IdealMaxPos: ImVec2,
    pub CurrLineSize: ImVec2,
    pub PrevLineSize: ImVec2,
    pub CurrLineTextBaseOffset: f32,
    pub PrevLineTextBaseOffset: f32,
    pub Indent: ImVec1,
    pub ColumnsOffset: ImVec1,
    pub GroupOffset: ImVec1,
    pub LastItemId: ImGuiID,
    pub LastItemStatusFlags: ImGuiItemStatusFlags,
    pub LastItemRect: ImRect,
    pub LastItemDisplayRect: ImRect,
    pub NavLayerCurrent: ImGuiNavLayer,
    pub NavLayerActiveMask: ::chlorine::c_int,
    pub NavLayerActiveMaskNext: ::chlorine::c_int,
    pub NavFocusScopeIdCurrent: ImGuiID,
    pub NavHideHighlightOneFrame: bool,
    pub NavHasScroll: bool,
    pub MenuBarAppending: bool,
    pub MenuBarOffset: ImVec2,
    pub MenuColumns: ImGuiMenuColumns,
    pub TreeDepth: ::chlorine::c_int,
    pub TreeJumpToParentOnPopMask: ImU32,
    pub ChildWindows: ImVector_ImGuiWindowPtr,
    pub StateStorage: *mut ImGuiStorage,
    pub CurrentColumns: *mut ImGuiOldColumns,
    pub CurrentTableIdx: ::chlorine::c_int,
    pub LayoutType: ImGuiLayoutType,
    pub ParentLayoutType: ImGuiLayoutType,
    pub FocusCounterRegular: ::chlorine::c_int,
    pub FocusCounterTabStop: ::chlorine::c_int,
    pub ItemFlags: ImGuiItemFlags,
    pub ItemWidth: f32,
    pub TextWrapPos: f32,
    pub ItemWidthStack: ImVector_float,
    pub TextWrapPosStack: ImVector_float,
    pub StackSizesOnBegin: ImGuiStackSizes,
}
#[test]
fn bindgen_test_layout_ImGuiWindowTempData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowTempData>(),
        304usize,
        concat!("Size of: ", stringify!(ImGuiWindowTempData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowTempData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiWindowTempData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).CursorPos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).CursorPosPrevLine as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorPosPrevLine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).CursorStartPos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorStartPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).CursorMaxPos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CursorMaxPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).IdealMaxPos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(IdealMaxPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).CurrLineSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrLineSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).PrevLineSize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(PrevLineSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).CurrLineTextBaseOffset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).PrevLineTextBaseOffset as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(PrevLineTextBaseOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).Indent as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(Indent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).ColumnsOffset as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ColumnsOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).GroupOffset as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(GroupOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).LastItemId as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LastItemId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).LastItemStatusFlags as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LastItemStatusFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).LastItemRect as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LastItemRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).LastItemDisplayRect as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LastItemDisplayRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavLayerCurrent as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavLayerCurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavLayerActiveMask as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavLayerActiveMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavLayerActiveMaskNext as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavLayerActiveMaskNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavFocusScopeIdCurrent as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavFocusScopeIdCurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavHideHighlightOneFrame as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavHideHighlightOneFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).NavHasScroll as *const _ as usize },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(NavHasScroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).MenuBarAppending as *const _ as usize },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(MenuBarAppending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).MenuBarOffset as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(MenuBarOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).MenuColumns as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(MenuColumns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).TreeDepth as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TreeDepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).TreeJumpToParentOnPopMask as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TreeJumpToParentOnPopMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).ChildWindows as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ChildWindows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).StateStorage as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(StateStorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).CurrentColumns as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrentColumns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).CurrentTableIdx as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(CurrentTableIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).LayoutType as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(LayoutType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).ParentLayoutType as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ParentLayoutType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).FocusCounterRegular as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(FocusCounterRegular)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).FocusCounterTabStop as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(FocusCounterTabStop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).ItemFlags as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ItemFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).ItemWidth as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ItemWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).TextWrapPos as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TextWrapPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).ItemWidthStack as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(ItemWidthStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).TextWrapPosStack as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(TextWrapPosStack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindowTempData>())).StackSizesOnBegin as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindowTempData),
            "::",
            stringify!(StackSizesOnBegin)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindow {
    pub Name: *mut ::chlorine::c_char,
    pub ID: ImGuiID,
    pub Flags: ImGuiWindowFlags,
    pub FlagsPreviousFrame: ImGuiWindowFlags,
    pub WindowClass: ImGuiWindowClass,
    pub Viewport: *mut ImGuiViewportP,
    pub ViewportId: ImGuiID,
    pub ViewportPos: ImVec2,
    pub ViewportAllowPlatformMonitorExtend: ::chlorine::c_int,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeFull: ImVec2,
    pub ContentSize: ImVec2,
    pub ContentSizeIdeal: ImVec2,
    pub ContentSizeExplicit: ImVec2,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub NameBufLen: ::chlorine::c_int,
    pub MoveId: ImGuiID,
    pub ChildId: ImGuiID,
    pub Scroll: ImVec2,
    pub ScrollMax: ImVec2,
    pub ScrollTarget: ImVec2,
    pub ScrollTargetCenterRatio: ImVec2,
    pub ScrollTargetEdgeSnapDist: ImVec2,
    pub ScrollbarSizes: ImVec2,
    pub ScrollbarX: bool,
    pub ScrollbarY: bool,
    pub ViewportOwned: bool,
    pub Active: bool,
    pub WasActive: bool,
    pub WriteAccessed: bool,
    pub Collapsed: bool,
    pub WantCollapseToggle: bool,
    pub SkipItems: bool,
    pub Appearing: bool,
    pub Hidden: bool,
    pub IsFallbackWindow: bool,
    pub HasCloseButton: bool,
    pub ResizeBorderHeld: ::chlorine::c_schar,
    pub BeginCount: ::chlorine::c_short,
    pub BeginOrderWithinParent: ::chlorine::c_short,
    pub BeginOrderWithinContext: ::chlorine::c_short,
    pub PopupId: ImGuiID,
    pub AutoFitFramesX: ImS8,
    pub AutoFitFramesY: ImS8,
    pub AutoFitChildAxises: ImS8,
    pub AutoFitOnlyGrows: bool,
    pub AutoPosLastDirection: ImGuiDir,
    pub HiddenFramesCanSkipItems: ImS8,
    pub HiddenFramesCannotSkipItems: ImS8,
    pub HiddenFramesForRenderOnly: ImS8,
    pub DisableInputsFrames: ImS8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub SetWindowPosVal: ImVec2,
    pub SetWindowPosPivot: ImVec2,
    pub IDStack: ImVector_ImGuiID,
    pub DC: ImGuiWindowTempData,
    pub OuterRectClipped: ImRect,
    pub InnerRect: ImRect,
    pub InnerClipRect: ImRect,
    pub WorkRect: ImRect,
    pub ParentWorkRect: ImRect,
    pub ClipRect: ImRect,
    pub ContentRegionRect: ImRect,
    pub HitTestHoleSize: ImVec2ih,
    pub HitTestHoleOffset: ImVec2ih,
    pub LastFrameActive: ::chlorine::c_int,
    pub LastFrameJustFocused: ::chlorine::c_int,
    pub LastTimeActive: f32,
    pub ItemWidthDefault: f32,
    pub StateStorage: ImGuiStorage,
    pub ColumnsStorage: ImVector_ImGuiOldColumns,
    pub FontWindowScale: f32,
    pub FontDpiScale: f32,
    pub SettingsOffset: ::chlorine::c_int,
    pub DrawList: *mut ImDrawList,
    pub DrawListInst: ImDrawList,
    pub ParentWindow: *mut ImGuiWindow,
    pub RootWindow: *mut ImGuiWindow,
    pub RootWindowDockTree: *mut ImGuiWindow,
    pub RootWindowForTitleBarHighlight: *mut ImGuiWindow,
    pub RootWindowForNav: *mut ImGuiWindow,
    pub NavLastChildNavWindow: *mut ImGuiWindow,
    pub NavLastIds: [ImGuiID; 2usize],
    pub NavRectRel: [ImRect; 2usize],
    pub MemoryDrawListIdxCapacity: ::chlorine::c_int,
    pub MemoryDrawListVtxCapacity: ::chlorine::c_int,
    pub MemoryCompacted: bool,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub DockOrder: ::chlorine::c_short,
    pub DockStyle: ImGuiWindowDockStyle,
    pub DockNode: *mut ImGuiDockNode,
    pub DockNodeAsHost: *mut ImGuiDockNode,
    pub DockId: ImGuiID,
    pub DockTabItemStatusFlags: ImGuiItemStatusFlags,
    pub DockTabItemRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiWindow() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindow>(),
        1144usize,
        concat!("Size of: ", stringify!(ImGuiWindow))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindow>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiWindow))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Name as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(Name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ID as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(ID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Flags as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(Flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).FlagsPreviousFrame as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(FlagsPreviousFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WindowClass as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowClass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Viewport as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(Viewport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ViewportId as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ViewportId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ViewportPos as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ViewportPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ViewportAllowPlatformMonitorExtend as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ViewportAllowPlatformMonitorExtend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Pos as *const _ as usize },
        80usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(Pos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Size as *const _ as usize },
        88usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(Size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SizeFull as *const _ as usize },
        96usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(SizeFull))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ContentSize as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ContentSizeIdeal as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentSizeIdeal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ContentSizeExplicit as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentSizeExplicit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WindowPadding as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WindowRounding as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowRounding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WindowBorderSize as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WindowBorderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).NameBufLen as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NameBufLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).MoveId as *const _ as usize },
        148usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(MoveId))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ChildId as *const _ as usize },
        152usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(ChildId))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Scroll as *const _ as usize },
        156usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(Scroll))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollMax as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollTarget as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollTarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollTargetCenterRatio as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollTargetCenterRatio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollTargetEdgeSnapDist as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollTargetEdgeSnapDist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollbarSizes as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollbarSizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollbarX as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollbarX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ScrollbarY as *const _ as usize },
        205usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ScrollbarY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ViewportOwned as *const _ as usize },
        206usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ViewportOwned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Active as *const _ as usize },
        207usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(Active))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WasActive as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WasActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WriteAccessed as *const _ as usize },
        209usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WriteAccessed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Collapsed as *const _ as usize },
        210usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Collapsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WantCollapseToggle as *const _ as usize },
        211usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(WantCollapseToggle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SkipItems as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SkipItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Appearing as *const _ as usize },
        213usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(Appearing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).Hidden as *const _ as usize },
        214usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(Hidden))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).IsFallbackWindow as *const _ as usize },
        215usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(IsFallbackWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).HasCloseButton as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HasCloseButton)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ResizeBorderHeld as *const _ as usize },
        217usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ResizeBorderHeld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).BeginCount as *const _ as usize },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).BeginOrderWithinParent as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginOrderWithinParent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).BeginOrderWithinContext as *const _ as usize },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(BeginOrderWithinContext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).PopupId as *const _ as usize },
        224usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(PopupId))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoFitFramesX as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitFramesX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoFitFramesY as *const _ as usize },
        229usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitFramesY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoFitChildAxises as *const _ as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitChildAxises)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoFitOnlyGrows as *const _ as usize },
        231usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoFitOnlyGrows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).AutoPosLastDirection as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(AutoPosLastDirection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).HiddenFramesCanSkipItems as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HiddenFramesCanSkipItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).HiddenFramesCannotSkipItems as *const _ as usize },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HiddenFramesCannotSkipItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).HiddenFramesForRenderOnly as *const _ as usize },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HiddenFramesForRenderOnly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DisableInputsFrames as *const _ as usize },
        239usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DisableInputsFrames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowPosVal as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowPosVal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SetWindowPosPivot as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SetWindowPosPivot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).IDStack as *const _ as usize },
        264usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(IDStack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DC as *const _ as usize },
        280usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(DC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).OuterRectClipped as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(OuterRectClipped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).InnerRect as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(InnerRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).InnerClipRect as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(InnerClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).WorkRect as *const _ as usize },
        632usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(WorkRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ParentWorkRect as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ParentWorkRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ClipRect as *const _ as usize },
        664usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(ClipRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ContentRegionRect as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ContentRegionRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).HitTestHoleSize as *const _ as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HitTestHoleSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).HitTestHoleOffset as *const _ as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(HitTestHoleOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).LastFrameActive as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(LastFrameActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).LastFrameJustFocused as *const _ as usize },
        708usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(LastFrameJustFocused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).LastTimeActive as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(LastTimeActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ItemWidthDefault as *const _ as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ItemWidthDefault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).StateStorage as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(StateStorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ColumnsStorage as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ColumnsStorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).FontWindowScale as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(FontWindowScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).FontDpiScale as *const _ as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(FontDpiScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).SettingsOffset as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(SettingsOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DrawList as *const _ as usize },
        768usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(DrawList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DrawListInst as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DrawListInst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).ParentWindow as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(ParentWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).RootWindow as *const _ as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).RootWindowDockTree as *const _ as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindowDockTree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).RootWindowForTitleBarHighlight as *const _ as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindowForTitleBarHighlight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).RootWindowForNav as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(RootWindowForNav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).NavLastChildNavWindow as *const _ as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavLastChildNavWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).NavLastIds as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavLastIds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).NavRectRel as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(NavRectRel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).MemoryDrawListIdxCapacity as *const _ as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MemoryDrawListIdxCapacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).MemoryDrawListVtxCapacity as *const _ as usize },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MemoryDrawListVtxCapacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).MemoryCompacted as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(MemoryCompacted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DockOrder as *const _ as usize },
        1074usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DockStyle as *const _ as usize },
        1076usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockStyle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DockNode as *const _ as usize },
        1104usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(DockNode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DockNodeAsHost as *const _ as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockNodeAsHost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DockId as *const _ as usize },
        1120usize,
        concat!("Offset of field: ", stringify!(ImGuiWindow), "::", stringify!(DockId))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DockTabItemStatusFlags as *const _ as usize },
        1124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockTabItemStatusFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiWindow>())).DockTabItemRect as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiWindow),
            "::",
            stringify!(DockTabItemRect)
        )
    );
}
impl ImGuiWindow {
    #[inline]
    pub fn SetWindowPosAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowPosAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn SetWindowSizeAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowSizeAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn SetWindowCollapsedAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowCollapsedAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn SetWindowDockAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowDockAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SetWindowPosAllowFlags: ImGuiCond,
        SetWindowSizeAllowFlags: ImGuiCond,
        SetWindowCollapsedAllowFlags: ImGuiCond,
        SetWindowDockAllowFlags: ImGuiCond,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let SetWindowPosAllowFlags: u32 = unsafe { ::std::mem::transmute(SetWindowPosAllowFlags) };
            SetWindowPosAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let SetWindowSizeAllowFlags: u32 = unsafe { ::std::mem::transmute(SetWindowSizeAllowFlags) };
            SetWindowSizeAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let SetWindowCollapsedAllowFlags: u32 = unsafe { ::std::mem::transmute(SetWindowCollapsedAllowFlags) };
            SetWindowCollapsedAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let SetWindowDockAllowFlags: u32 = unsafe { ::std::mem::transmute(SetWindowDockAllowFlags) };
            SetWindowDockAllowFlags as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn DockIsActive(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockIsActive(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DockTabIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DockTabWantClose(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabWantClose(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        DockIsActive: bool,
        DockTabIsVisible: bool,
        DockTabWantClose: bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let DockIsActive: u8 = unsafe { ::std::mem::transmute(DockIsActive) };
            DockIsActive as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let DockTabIsVisible: u8 = unsafe { ::std::mem::transmute(DockTabIsVisible) };
            DockTabIsVisible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let DockTabWantClose: u8 = unsafe { ::std::mem::transmute(DockTabWantClose) };
            DockTabWantClose as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiLastItemDataBackup {
    pub LastItemId: ImGuiID,
    pub LastItemStatusFlags: ImGuiItemStatusFlags,
    pub LastItemRect: ImRect,
    pub LastItemDisplayRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiLastItemDataBackup() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiLastItemDataBackup>(),
        40usize,
        concat!("Size of: ", stringify!(ImGuiLastItemDataBackup))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiLastItemDataBackup>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiLastItemDataBackup))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiLastItemDataBackup>())).LastItemId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemDataBackup),
            "::",
            stringify!(LastItemId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiLastItemDataBackup>())).LastItemStatusFlags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemDataBackup),
            "::",
            stringify!(LastItemStatusFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiLastItemDataBackup>())).LastItemRect as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemDataBackup),
            "::",
            stringify!(LastItemRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiLastItemDataBackup>())).LastItemDisplayRect as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiLastItemDataBackup),
            "::",
            stringify!(LastItemDisplayRect)
        )
    );
}
pub const ImGuiTabBarFlagsPrivate__ImGuiTabBarFlags_DockNode: ImGuiTabBarFlagsPrivate_ = 1048576;
pub const ImGuiTabBarFlagsPrivate__ImGuiTabBarFlags_IsFocused: ImGuiTabBarFlagsPrivate_ = 2097152;
pub const ImGuiTabBarFlagsPrivate__ImGuiTabBarFlags_SaveSettings: ImGuiTabBarFlagsPrivate_ = 4194304;
pub type ImGuiTabBarFlagsPrivate_ = ::chlorine::c_uint;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_NoCloseButton: ImGuiTabItemFlagsPrivate_ = 1048576;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_Button: ImGuiTabItemFlagsPrivate_ = 2097152;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_Unsorted: ImGuiTabItemFlagsPrivate_ = 4194304;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_Preview: ImGuiTabItemFlagsPrivate_ = 8388608;
pub type ImGuiTabItemFlagsPrivate_ = ::chlorine::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTabItem {
    pub ID: ImGuiID,
    pub Flags: ImGuiTabItemFlags,
    pub Window: *mut ImGuiWindow,
    pub LastFrameVisible: ::chlorine::c_int,
    pub LastFrameSelected: ::chlorine::c_int,
    pub Offset: f32,
    pub Width: f32,
    pub ContentWidth: f32,
    pub NameOffset: ImS16,
    pub BeginOrder: ImS16,
    pub IndexDuringLayout: ImS16,
    pub WantClose: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTabItem() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTabItem>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiTabItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTabItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTabItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).ID as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiTabItem), "::", stringify!(ID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).Flags as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImGuiTabItem), "::", stringify!(Flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).Window as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImGuiTabItem), "::", stringify!(Window))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).LastFrameVisible as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(LastFrameVisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).LastFrameSelected as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(LastFrameSelected)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).Offset as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(ImGuiTabItem), "::", stringify!(Offset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).Width as *const _ as usize },
        28usize,
        concat!("Offset of field: ", stringify!(ImGuiTabItem), "::", stringify!(Width))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).ContentWidth as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(ContentWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).NameOffset as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(NameOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).BeginOrder as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(BeginOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).IndexDuringLayout as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(IndexDuringLayout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabItem>())).WantClose as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabItem),
            "::",
            stringify!(WantClose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTabBar {
    pub Tabs: ImVector_ImGuiTabItem,
    pub Flags: ImGuiTabBarFlags,
    pub ID: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub NextSelectedTabId: ImGuiID,
    pub VisibleTabId: ImGuiID,
    pub CurrFrameVisible: ::chlorine::c_int,
    pub PrevFrameVisible: ::chlorine::c_int,
    pub BarRect: ImRect,
    pub CurrTabsContentsHeight: f32,
    pub PrevTabsContentsHeight: f32,
    pub WidthAllTabs: f32,
    pub WidthAllTabsIdeal: f32,
    pub ScrollingAnim: f32,
    pub ScrollingTarget: f32,
    pub ScrollingTargetDistToVisibility: f32,
    pub ScrollingSpeed: f32,
    pub ScrollingRectMinX: f32,
    pub ScrollingRectMaxX: f32,
    pub ReorderRequestTabId: ImGuiID,
    pub ReorderRequestDir: ImS8,
    pub BeginCount: ImS8,
    pub WantLayout: bool,
    pub VisibleTabWasSubmitted: bool,
    pub TabsAddedNew: bool,
    pub TabsActiveCount: ImS16,
    pub LastTabItemIdx: ImS16,
    pub ItemSpacingY: f32,
    pub FramePadding: ImVec2,
    pub BackupCursorPos: ImVec2,
    pub TabsNames: ImGuiTextBuffer,
}
#[test]
fn bindgen_test_layout_ImGuiTabBar() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTabBar>(),
        152usize,
        concat!("Size of: ", stringify!(ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTabBar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).Tabs as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiTabBar), "::", stringify!(Tabs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).Flags as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ImGuiTabBar), "::", stringify!(Flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ID as *const _ as usize },
        20usize,
        concat!("Offset of field: ", stringify!(ImGuiTabBar), "::", stringify!(ID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).SelectedTabId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(SelectedTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).NextSelectedTabId as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(NextSelectedTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).VisibleTabId as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(VisibleTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).CurrFrameVisible as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(CurrFrameVisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).PrevFrameVisible as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(PrevFrameVisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).BarRect as *const _ as usize },
        44usize,
        concat!("Offset of field: ", stringify!(ImGuiTabBar), "::", stringify!(BarRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).CurrTabsContentsHeight as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(CurrTabsContentsHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).PrevTabsContentsHeight as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(PrevTabsContentsHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).WidthAllTabs as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(WidthAllTabs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).WidthAllTabsIdeal as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(WidthAllTabsIdeal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingAnim as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingAnim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingTarget as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingTarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingTargetDistToVisibility as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingTargetDistToVisibility)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingSpeed as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingSpeed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingRectMinX as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingRectMinX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ScrollingRectMaxX as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ScrollingRectMaxX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ReorderRequestTabId as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ReorderRequestTabId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ReorderRequestDir as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ReorderRequestDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).BeginCount as *const _ as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(BeginCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).WantLayout as *const _ as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(WantLayout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).VisibleTabWasSubmitted as *const _ as usize },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(VisibleTabWasSubmitted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).TabsAddedNew as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(TabsAddedNew)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).TabsActiveCount as *const _ as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(TabsActiveCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).LastTabItemIdx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(LastTabItemIdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).ItemSpacingY as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(ItemSpacingY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).FramePadding as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(FramePadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).BackupCursorPos as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(BackupCursorPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTabBar>())).TabsNames as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTabBar),
            "::",
            stringify!(TabsNames)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumn {
    pub Flags: ImGuiTableColumnFlags,
    pub WidthGiven: f32,
    pub MinX: f32,
    pub MaxX: f32,
    pub WidthRequest: f32,
    pub WidthAuto: f32,
    pub StretchWeight: f32,
    pub InitStretchWeightOrWidth: f32,
    pub ClipRect: ImRect,
    pub UserID: ImGuiID,
    pub WorkMinX: f32,
    pub WorkMaxX: f32,
    pub ItemWidth: f32,
    pub ContentMaxXFrozen: f32,
    pub ContentMaxXUnfrozen: f32,
    pub ContentMaxXHeadersUsed: f32,
    pub ContentMaxXHeadersIdeal: f32,
    pub NameOffset: ImS16,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub IndexWithinEnabledSet: ImGuiTableColumnIdx,
    pub PrevEnabledColumn: ImGuiTableColumnIdx,
    pub NextEnabledColumn: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub DrawChannelFrozen: ImGuiTableDrawChannelIdx,
    pub DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub IsEnabled: bool,
    pub IsEnabledNextFrame: bool,
    pub IsVisibleX: bool,
    pub IsVisibleY: bool,
    pub IsRequestOutput: bool,
    pub IsSkipItems: bool,
    pub IsPreserveWidthAuto: bool,
    pub NavLayerCurrent: ImS8,
    pub AutoFitQueue: ImU8,
    pub CannotSkipItemsQueue: ImU8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub SortDirectionsAvailList: ImU8,
}
#[test]
fn bindgen_test_layout_ImGuiTableColumn() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableColumn>(),
        104usize,
        concat!("Size of: ", stringify!(ImGuiTableColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableColumn>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableColumn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).Flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).WidthGiven as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(WidthGiven)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).MinX as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(MinX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).MaxX as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(MaxX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).WidthRequest as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(WidthRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).WidthAuto as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(WidthAuto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).StretchWeight as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(StretchWeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).InitStretchWeightOrWidth as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(InitStretchWeightOrWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).ClipRect as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(ClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).UserID as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).WorkMinX as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(WorkMinX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).WorkMaxX as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(WorkMaxX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).ItemWidth as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(ItemWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).ContentMaxXFrozen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(ContentMaxXFrozen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).ContentMaxXUnfrozen as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(ContentMaxXUnfrozen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).ContentMaxXHeadersUsed as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(ContentMaxXHeadersUsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).ContentMaxXHeadersIdeal as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(ContentMaxXHeadersIdeal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).NameOffset as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(NameOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).DisplayOrder as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(DisplayOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).IndexWithinEnabledSet as *const _ as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IndexWithinEnabledSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).PrevEnabledColumn as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(PrevEnabledColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).NextEnabledColumn as *const _ as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(NextEnabledColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).SortOrder as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(SortOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).DrawChannelCurrent as *const _ as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(DrawChannelCurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).DrawChannelFrozen as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(DrawChannelFrozen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).DrawChannelUnfrozen as *const _ as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(DrawChannelUnfrozen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).IsEnabled as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).IsEnabledNextFrame as *const _ as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsEnabledNextFrame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).IsVisibleX as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsVisibleX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).IsVisibleY as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsVisibleY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).IsRequestOutput as *const _ as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsRequestOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).IsSkipItems as *const _ as usize },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsSkipItems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).IsPreserveWidthAuto as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(IsPreserveWidthAuto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).NavLayerCurrent as *const _ as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(NavLayerCurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).AutoFitQueue as *const _ as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(AutoFitQueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).CannotSkipItemsQueue as *const _ as usize },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(CannotSkipItemsQueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumn>())).SortDirectionsAvailList as *const _ as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumn),
            "::",
            stringify!(SortDirectionsAvailList)
        )
    );
}
impl ImGuiTableColumn {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn SortDirectionsAvailCount(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailCount(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn SortDirectionsAvailMask(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailMask(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        SortDirectionsAvailCount: ImU8,
        SortDirectionsAvailMask: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let SortDirectionsAvailCount: u8 = unsafe { ::std::mem::transmute(SortDirectionsAvailCount) };
            SortDirectionsAvailCount as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let SortDirectionsAvailMask: u8 = unsafe { ::std::mem::transmute(SortDirectionsAvailMask) };
            SortDirectionsAvailMask as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableCellData {
    pub BgColor: ImU32,
    pub Column: ImGuiTableColumnIdx,
}
#[test]
fn bindgen_test_layout_ImGuiTableCellData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableCellData>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiTableCellData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableCellData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableCellData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableCellData>())).BgColor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableCellData),
            "::",
            stringify!(BgColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableCellData>())).Column as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableCellData),
            "::",
            stringify!(Column)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTable {
    pub ID: ImGuiID,
    pub Flags: ImGuiTableFlags,
    pub RawData: *mut ::chlorine::c_void,
    pub Columns: ImSpan_ImGuiTableColumn,
    pub DisplayOrderToIndex: ImSpan_ImGuiTableColumnIdx,
    pub RowCellData: ImSpan_ImGuiTableCellData,
    pub EnabledMaskByDisplayOrder: ImU64,
    pub EnabledMaskByIndex: ImU64,
    pub VisibleMaskByIndex: ImU64,
    pub RequestOutputMaskByIndex: ImU64,
    pub SettingsLoadedFlags: ImGuiTableFlags,
    pub SettingsOffset: ::chlorine::c_int,
    pub LastFrameActive: ::chlorine::c_int,
    pub ColumnsCount: ::chlorine::c_int,
    pub CurrentRow: ::chlorine::c_int,
    pub CurrentColumn: ::chlorine::c_int,
    pub InstanceCurrent: ImS16,
    pub InstanceInteracted: ImS16,
    pub RowPosY1: f32,
    pub RowPosY2: f32,
    pub RowMinHeight: f32,
    pub RowTextBaseline: f32,
    pub RowIndentOffsetX: f32,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub RowBgColorCounter: ::chlorine::c_int,
    pub RowBgColor: [ImU32; 2usize],
    pub BorderColorStrong: ImU32,
    pub BorderColorLight: ImU32,
    pub BorderX1: f32,
    pub BorderX2: f32,
    pub HostIndentX: f32,
    pub MinColumnWidth: f32,
    pub OuterPaddingX: f32,
    pub CellPaddingX: f32,
    pub CellPaddingY: f32,
    pub CellSpacingX1: f32,
    pub CellSpacingX2: f32,
    pub LastOuterHeight: f32,
    pub LastFirstRowHeight: f32,
    pub InnerWidth: f32,
    pub ColumnsGivenWidth: f32,
    pub ColumnsAutoFitWidth: f32,
    pub ResizedColumnNextWidth: f32,
    pub ResizeLockMinContentsX2: f32,
    pub RefScale: f32,
    pub OuterRect: ImRect,
    pub InnerRect: ImRect,
    pub WorkRect: ImRect,
    pub InnerClipRect: ImRect,
    pub BgClipRect: ImRect,
    pub Bg0ClipRectForDrawCmd: ImRect,
    pub Bg2ClipRectForDrawCmd: ImRect,
    pub HostClipRect: ImRect,
    pub HostBackupWorkRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub HostBackupInnerClipRect: ImRect,
    pub HostBackupPrevLineSize: ImVec2,
    pub HostBackupCurrLineSize: ImVec2,
    pub HostBackupCursorMaxPos: ImVec2,
    pub UserOuterSize: ImVec2,
    pub HostBackupColumnsOffset: ImVec1,
    pub HostBackupItemWidth: f32,
    pub HostBackupItemWidthStackSize: ::chlorine::c_int,
    pub OuterWindow: *mut ImGuiWindow,
    pub InnerWindow: *mut ImGuiWindow,
    pub ColumnsNames: ImGuiTextBuffer,
    pub DrawSplitter: ImDrawListSplitter,
    pub SortSpecsSingle: ImGuiTableColumnSortSpecs,
    pub SortSpecsMulti: ImVector_ImGuiTableColumnSortSpecs,
    pub SortSpecs: ImGuiTableSortSpecs,
    pub SortSpecsCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledFixedCount: ImGuiTableColumnIdx,
    pub DeclColumnsCount: ImGuiTableColumnIdx,
    pub HoveredColumnBody: ImGuiTableColumnIdx,
    pub HoveredColumnBorder: ImGuiTableColumnIdx,
    pub AutoFitSingleColumn: ImGuiTableColumnIdx,
    pub ResizedColumn: ImGuiTableColumnIdx,
    pub LastResizedColumn: ImGuiTableColumnIdx,
    pub HeldHeaderColumn: ImGuiTableColumnIdx,
    pub ReorderColumn: ImGuiTableColumnIdx,
    pub ReorderColumnDir: ImGuiTableColumnIdx,
    pub LeftMostEnabledColumn: ImGuiTableColumnIdx,
    pub RightMostEnabledColumn: ImGuiTableColumnIdx,
    pub LeftMostStretchedColumn: ImGuiTableColumnIdx,
    pub RightMostStretchedColumn: ImGuiTableColumnIdx,
    pub ContextPopupColumn: ImGuiTableColumnIdx,
    pub FreezeRowsRequest: ImGuiTableColumnIdx,
    pub FreezeRowsCount: ImGuiTableColumnIdx,
    pub FreezeColumnsRequest: ImGuiTableColumnIdx,
    pub FreezeColumnsCount: ImGuiTableColumnIdx,
    pub RowCellDataCurrent: ImGuiTableColumnIdx,
    pub DummyDrawChannel: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub IsLayoutLocked: bool,
    pub IsInsideRow: bool,
    pub IsInitializing: bool,
    pub IsSortSpecsDirty: bool,
    pub IsUsingHeaders: bool,
    pub IsContextPopupOpen: bool,
    pub IsSettingsRequestLoad: bool,
    pub IsSettingsDirty: bool,
    pub IsDefaultDisplayOrder: bool,
    pub IsResetAllRequest: bool,
    pub IsResetDisplayOrderRequest: bool,
    pub IsUnfrozenRows: bool,
    pub IsDefaultSizingPolicy: bool,
    pub MemoryCompacted: bool,
    pub HostSkipItems: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTable() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTable>(),
        600usize,
        concat!("Size of: ", stringify!(ImGuiTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ID as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(ID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).Flags as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(Flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RawData as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(RawData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).Columns as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(Columns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).DisplayOrderToIndex as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(DisplayOrderToIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RowCellData as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowCellData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).EnabledMaskByDisplayOrder as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(EnabledMaskByDisplayOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).EnabledMaskByIndex as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(EnabledMaskByIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).VisibleMaskByIndex as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(VisibleMaskByIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RequestOutputMaskByIndex as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RequestOutputMaskByIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).SettingsLoadedFlags as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(SettingsLoadedFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).SettingsOffset as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(SettingsOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).LastFrameActive as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(LastFrameActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ColumnsCount as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).CurrentRow as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(CurrentRow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).CurrentColumn as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(CurrentColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).InstanceCurrent as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InstanceCurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).InstanceInteracted as *const _ as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InstanceInteracted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RowPosY1 as *const _ as usize },
        124usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(RowPosY1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RowPosY2 as *const _ as usize },
        128usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(RowPosY2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RowMinHeight as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowMinHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RowTextBaseline as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowTextBaseline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RowIndentOffsetX as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowIndentOffsetX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RowBgColorCounter as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowBgColorCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RowBgColor as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowBgColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).BorderColorStrong as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(BorderColorStrong)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).BorderColorLight as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(BorderColorLight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).BorderX1 as *const _ as usize },
        168usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(BorderX1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).BorderX2 as *const _ as usize },
        172usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(BorderX2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HostIndentX as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostIndentX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).MinColumnWidth as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(MinColumnWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).OuterPaddingX as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(OuterPaddingX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).CellPaddingX as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(CellPaddingX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).CellPaddingY as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(CellPaddingY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).CellSpacingX1 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(CellSpacingX1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).CellSpacingX2 as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(CellSpacingX2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).LastOuterHeight as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(LastOuterHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).LastFirstRowHeight as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(LastFirstRowHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).InnerWidth as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InnerWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ColumnsGivenWidth as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsGivenWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ColumnsAutoFitWidth as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsAutoFitWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ResizedColumnNextWidth as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ResizedColumnNextWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ResizeLockMinContentsX2 as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ResizeLockMinContentsX2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RefScale as *const _ as usize },
        232usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(RefScale))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).OuterRect as *const _ as usize },
        236usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(OuterRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).InnerRect as *const _ as usize },
        252usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(InnerRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).WorkRect as *const _ as usize },
        268usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(WorkRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).InnerClipRect as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InnerClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).BgClipRect as *const _ as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(BgClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).Bg0ClipRectForDrawCmd as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(Bg0ClipRectForDrawCmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).Bg2ClipRectForDrawCmd as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(Bg2ClipRectForDrawCmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HostClipRect as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HostBackupWorkRect as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostBackupWorkRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HostBackupParentWorkRect as *const _ as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostBackupParentWorkRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HostBackupInnerClipRect as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostBackupInnerClipRect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HostBackupPrevLineSize as *const _ as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostBackupPrevLineSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HostBackupCurrLineSize as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostBackupCurrLineSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HostBackupCursorMaxPos as *const _ as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostBackupCursorMaxPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).UserOuterSize as *const _ as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(UserOuterSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HostBackupColumnsOffset as *const _ as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostBackupColumnsOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HostBackupItemWidth as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostBackupItemWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HostBackupItemWidthStackSize as *const _ as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostBackupItemWidthStackSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).OuterWindow as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(OuterWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).InnerWindow as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(InnerWindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ColumnsNames as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).DrawSplitter as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(DrawSplitter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).SortSpecsSingle as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(SortSpecsSingle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).SortSpecsMulti as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(SortSpecsMulti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).SortSpecs as *const _ as usize },
        544usize,
        concat!("Offset of field: ", stringify!(ImGuiTable), "::", stringify!(SortSpecs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).SortSpecsCount as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(SortSpecsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ColumnsEnabledCount as *const _ as usize },
        561usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsEnabledCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ColumnsEnabledFixedCount as *const _ as usize },
        562usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ColumnsEnabledFixedCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).DeclColumnsCount as *const _ as usize },
        563usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(DeclColumnsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HoveredColumnBody as *const _ as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HoveredColumnBody)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HoveredColumnBorder as *const _ as usize },
        565usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HoveredColumnBorder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).AutoFitSingleColumn as *const _ as usize },
        566usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(AutoFitSingleColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ResizedColumn as *const _ as usize },
        567usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ResizedColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).LastResizedColumn as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(LastResizedColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HeldHeaderColumn as *const _ as usize },
        569usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HeldHeaderColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ReorderColumn as *const _ as usize },
        570usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ReorderColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ReorderColumnDir as *const _ as usize },
        571usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ReorderColumnDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).LeftMostEnabledColumn as *const _ as usize },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(LeftMostEnabledColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RightMostEnabledColumn as *const _ as usize },
        573usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RightMostEnabledColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).LeftMostStretchedColumn as *const _ as usize },
        574usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(LeftMostStretchedColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RightMostStretchedColumn as *const _ as usize },
        575usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RightMostStretchedColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).ContextPopupColumn as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(ContextPopupColumn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).FreezeRowsRequest as *const _ as usize },
        577usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(FreezeRowsRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).FreezeRowsCount as *const _ as usize },
        578usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(FreezeRowsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).FreezeColumnsRequest as *const _ as usize },
        579usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(FreezeColumnsRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).FreezeColumnsCount as *const _ as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(FreezeColumnsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).RowCellDataCurrent as *const _ as usize },
        581usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(RowCellDataCurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).DummyDrawChannel as *const _ as usize },
        582usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(DummyDrawChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).Bg2DrawChannelCurrent as *const _ as usize },
        583usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(Bg2DrawChannelCurrent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).Bg2DrawChannelUnfrozen as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(Bg2DrawChannelUnfrozen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsLayoutLocked as *const _ as usize },
        585usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsLayoutLocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsInsideRow as *const _ as usize },
        586usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsInsideRow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsInitializing as *const _ as usize },
        587usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsInitializing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsSortSpecsDirty as *const _ as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsSortSpecsDirty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsUsingHeaders as *const _ as usize },
        589usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsUsingHeaders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsContextPopupOpen as *const _ as usize },
        590usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsContextPopupOpen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsSettingsRequestLoad as *const _ as usize },
        591usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsSettingsRequestLoad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsSettingsDirty as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsSettingsDirty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsDefaultDisplayOrder as *const _ as usize },
        593usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsDefaultDisplayOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsResetAllRequest as *const _ as usize },
        594usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsResetAllRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsResetDisplayOrderRequest as *const _ as usize },
        595usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsResetDisplayOrderRequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsUnfrozenRows as *const _ as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsUnfrozenRows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).IsDefaultSizingPolicy as *const _ as usize },
        597usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(IsDefaultSizingPolicy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).MemoryCompacted as *const _ as usize },
        598usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(MemoryCompacted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTable>())).HostSkipItems as *const _ as usize },
        599usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTable),
            "::",
            stringify!(HostSkipItems)
        )
    );
}
impl ImGuiTable {
    #[inline]
    pub fn RowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_RowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn LastRowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_LastRowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        RowFlags: ImGuiTableRowFlags,
        LastRowFlags: ImGuiTableRowFlags,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let RowFlags: u32 = unsafe { ::std::mem::transmute(RowFlags) };
            RowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let LastRowFlags: u32 = unsafe { ::std::mem::transmute(LastRowFlags) };
            LastRowFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSettings {
    pub WidthOrWeight: f32,
    pub UserID: ImGuiID,
    pub Index: ImGuiTableColumnIdx,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ImGuiTableColumnSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableColumnSettings>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiTableColumnSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableColumnSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableColumnSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumnSettings>())).WidthOrWeight as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSettings),
            "::",
            stringify!(WidthOrWeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumnSettings>())).UserID as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSettings),
            "::",
            stringify!(UserID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumnSettings>())).Index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSettings),
            "::",
            stringify!(Index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumnSettings>())).DisplayOrder as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSettings),
            "::",
            stringify!(DisplayOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableColumnSettings>())).SortOrder as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableColumnSettings),
            "::",
            stringify!(SortOrder)
        )
    );
}
impl ImGuiTableColumnSettings {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn IsEnabled(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsEnabled(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IsStretch(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsStretch(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        IsEnabled: ImU8,
        IsStretch: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let IsEnabled: u8 = unsafe { ::std::mem::transmute(IsEnabled) };
            IsEnabled as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let IsStretch: u8 = unsafe { ::std::mem::transmute(IsStretch) };
            IsStretch as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSettings {
    pub ID: ImGuiID,
    pub SaveFlags: ImGuiTableFlags,
    pub RefScale: f32,
    pub ColumnsCount: ImGuiTableColumnIdx,
    pub ColumnsCountMax: ImGuiTableColumnIdx,
    pub WantApply: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTableSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTableSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableSettings>())).ID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSettings),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableSettings>())).SaveFlags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSettings),
            "::",
            stringify!(SaveFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableSettings>())).RefScale as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSettings),
            "::",
            stringify!(RefScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableSettings>())).ColumnsCount as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSettings),
            "::",
            stringify!(ColumnsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableSettings>())).ColumnsCountMax as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSettings),
            "::",
            stringify!(ColumnsCountMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImGuiTableSettings>())).WantApply as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ImGuiTableSettings),
            "::",
            stringify!(WantApply)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontBuilderIO {
    pub FontBuilder_Build: ::std::option::Option<unsafe extern "C" fn(atlas: *mut ImFontAtlas) -> bool>,
}
#[test]
fn bindgen_test_layout_ImFontBuilderIO() {
    assert_eq!(
        ::std::mem::size_of::<ImFontBuilderIO>(),
        8usize,
        concat!("Size of: ", stringify!(ImFontBuilderIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontBuilderIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontBuilderIO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImFontBuilderIO>())).FontBuilder_Build as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImFontBuilderIO),
            "::",
            stringify!(FontBuilder_Build)
        )
    );
}
extern "C" {
    pub fn ImVec2_ImVec2Nil() -> *mut ImVec2;
}
extern "C" {
    pub fn ImVec2_destroy(self_: *mut ImVec2);
}
extern "C" {
    pub fn ImVec2_ImVec2Float(_x: f32, _y: f32) -> *mut ImVec2;
}
extern "C" {
    pub fn ImVec4_ImVec4Nil() -> *mut ImVec4;
}
extern "C" {
    pub fn ImVec4_destroy(self_: *mut ImVec4);
}
extern "C" {
    pub fn ImVec4_ImVec4Float(_x: f32, _y: f32, _z: f32, _w: f32) -> *mut ImVec4;
}
extern "C" {
    pub fn igCreateContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
extern "C" {
    pub fn igDestroyContext(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igGetCurrentContext() -> *mut ImGuiContext;
}
extern "C" {
    pub fn igSetCurrentContext(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igGetIO() -> *mut ImGuiIO;
}
extern "C" {
    pub fn igGetStyle() -> *mut ImGuiStyle;
}
extern "C" {
    pub fn igNewFrame();
}
extern "C" {
    pub fn igEndFrame();
}
extern "C" {
    pub fn igRender();
}
extern "C" {
    pub fn igGetDrawData() -> *mut ImDrawData;
}
extern "C" {
    pub fn igShowDemoWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowMetricsWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowAboutWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowStyleEditor(ref_: *mut ImGuiStyle);
}
extern "C" {
    pub fn igShowStyleSelector(label: *const ::chlorine::c_char) -> bool;
}
extern "C" {
    pub fn igShowFontSelector(label: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igShowUserGuide();
}
extern "C" {
    pub fn igGetVersion() -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igStyleColorsDark(dst: *mut ImGuiStyle);
}
extern "C" {
    pub fn igStyleColorsLight(dst: *mut ImGuiStyle);
}
extern "C" {
    pub fn igStyleColorsClassic(dst: *mut ImGuiStyle);
}
extern "C" {
    pub fn igBegin(name: *const ::chlorine::c_char, p_open: *mut bool, flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    pub fn igEnd();
}
extern "C" {
    pub fn igBeginChildStr(
        str_id: *const ::chlorine::c_char,
        size: ImVec2,
        border: bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igBeginChildID(id: ImGuiID, size: ImVec2, border: bool, flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    pub fn igEndChild();
}
extern "C" {
    pub fn igIsWindowAppearing() -> bool;
}
extern "C" {
    pub fn igIsWindowCollapsed() -> bool;
}
extern "C" {
    pub fn igIsWindowFocused(flags: ImGuiFocusedFlags) -> bool;
}
extern "C" {
    pub fn igIsWindowHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    pub fn igGetWindowDrawList() -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetWindowDpiScale() -> f32;
}
extern "C" {
    pub fn igGetWindowPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowSize(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowWidth() -> f32;
}
extern "C" {
    pub fn igGetWindowHeight() -> f32;
}
extern "C" {
    pub fn igGetWindowViewport() -> *mut ImGuiViewport;
}
extern "C" {
    pub fn igSetNextWindowPos(pos: ImVec2, cond: ImGuiCond, pivot: ImVec2);
}
extern "C" {
    pub fn igSetNextWindowSize(size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetNextWindowSizeConstraints(
        size_min: ImVec2,
        size_max: ImVec2,
        custom_callback: ImGuiSizeCallback,
        custom_callback_data: *mut ::chlorine::c_void,
    );
}
extern "C" {
    pub fn igSetNextWindowContentSize(size: ImVec2);
}
extern "C" {
    pub fn igSetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetNextWindowFocus();
}
extern "C" {
    pub fn igSetNextWindowBgAlpha(alpha: f32);
}
extern "C" {
    pub fn igSetNextWindowViewport(viewport_id: ImGuiID);
}
extern "C" {
    pub fn igSetWindowPosVec2(pos: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowSizeVec2(size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowCollapsedBool(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowFocusNil();
}
extern "C" {
    pub fn igSetWindowFontScale(scale: f32);
}
extern "C" {
    pub fn igSetWindowPosStr(name: *const ::chlorine::c_char, pos: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowSizeStr(name: *const ::chlorine::c_char, size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowCollapsedStr(name: *const ::chlorine::c_char, collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowFocusStr(name: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igGetContentRegionAvail(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetContentRegionMax(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowContentRegionMin(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowContentRegionMax(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowContentRegionWidth() -> f32;
}
extern "C" {
    pub fn igGetScrollX() -> f32;
}
extern "C" {
    pub fn igGetScrollY() -> f32;
}
extern "C" {
    pub fn igSetScrollXFloat(scroll_x: f32);
}
extern "C" {
    pub fn igSetScrollYFloat(scroll_y: f32);
}
extern "C" {
    pub fn igGetScrollMaxX() -> f32;
}
extern "C" {
    pub fn igGetScrollMaxY() -> f32;
}
extern "C" {
    pub fn igSetScrollHereX(center_x_ratio: f32);
}
extern "C" {
    pub fn igSetScrollHereY(center_y_ratio: f32);
}
extern "C" {
    pub fn igSetScrollFromPosXFloat(local_x: f32, center_x_ratio: f32);
}
extern "C" {
    pub fn igSetScrollFromPosYFloat(local_y: f32, center_y_ratio: f32);
}
extern "C" {
    pub fn igPushFont(font: *mut ImFont);
}
extern "C" {
    pub fn igPopFont();
}
extern "C" {
    pub fn igPushStyleColorU32(idx: ImGuiCol, col: ImU32);
}
extern "C" {
    pub fn igPushStyleColorVec4(idx: ImGuiCol, col: ImVec4);
}
extern "C" {
    pub fn igPopStyleColor(count: ::chlorine::c_int);
}
extern "C" {
    pub fn igPushStyleVarFloat(idx: ImGuiStyleVar, val: f32);
}
extern "C" {
    pub fn igPushStyleVarVec2(idx: ImGuiStyleVar, val: ImVec2);
}
extern "C" {
    pub fn igPopStyleVar(count: ::chlorine::c_int);
}
extern "C" {
    pub fn igPushAllowKeyboardFocus(allow_keyboard_focus: bool);
}
extern "C" {
    pub fn igPopAllowKeyboardFocus();
}
extern "C" {
    pub fn igPushButtonRepeat(repeat: bool);
}
extern "C" {
    pub fn igPopButtonRepeat();
}
extern "C" {
    pub fn igPushItemWidth(item_width: f32);
}
extern "C" {
    pub fn igPopItemWidth();
}
extern "C" {
    pub fn igSetNextItemWidth(item_width: f32);
}
extern "C" {
    pub fn igCalcItemWidth() -> f32;
}
extern "C" {
    pub fn igPushTextWrapPos(wrap_local_pos_x: f32);
}
extern "C" {
    pub fn igPopTextWrapPos();
}
extern "C" {
    pub fn igGetFont() -> *mut ImFont;
}
extern "C" {
    pub fn igGetFontSize() -> f32;
}
extern "C" {
    pub fn igGetFontTexUvWhitePixel(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetColorU32Col(idx: ImGuiCol, alpha_mul: f32) -> ImU32;
}
extern "C" {
    pub fn igGetColorU32Vec4(col: ImVec4) -> ImU32;
}
extern "C" {
    pub fn igGetColorU32U32(col: ImU32) -> ImU32;
}
extern "C" {
    pub fn igGetStyleColorVec4(idx: ImGuiCol) -> *const ImVec4;
}
extern "C" {
    pub fn igSeparator();
}
extern "C" {
    pub fn igSameLine(offset_from_start_x: f32, spacing: f32);
}
extern "C" {
    pub fn igNewLine();
}
extern "C" {
    pub fn igSpacing();
}
extern "C" {
    pub fn igDummy(size: ImVec2);
}
extern "C" {
    pub fn igIndent(indent_w: f32);
}
extern "C" {
    pub fn igUnindent(indent_w: f32);
}
extern "C" {
    pub fn igBeginGroup();
}
extern "C" {
    pub fn igEndGroup();
}
extern "C" {
    pub fn igGetCursorPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetCursorPosX() -> f32;
}
extern "C" {
    pub fn igGetCursorPosY() -> f32;
}
extern "C" {
    pub fn igSetCursorPos(local_pos: ImVec2);
}
extern "C" {
    pub fn igSetCursorPosX(local_x: f32);
}
extern "C" {
    pub fn igSetCursorPosY(local_y: f32);
}
extern "C" {
    pub fn igGetCursorStartPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetCursorScreenPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igSetCursorScreenPos(pos: ImVec2);
}
extern "C" {
    pub fn igAlignTextToFramePadding();
}
extern "C" {
    pub fn igGetTextLineHeight() -> f32;
}
extern "C" {
    pub fn igGetTextLineHeightWithSpacing() -> f32;
}
extern "C" {
    pub fn igGetFrameHeight() -> f32;
}
extern "C" {
    pub fn igGetFrameHeightWithSpacing() -> f32;
}
extern "C" {
    pub fn igPushIDStr(str_id: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igPushIDStrStr(str_id_begin: *const ::chlorine::c_char, str_id_end: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igPushIDPtr(ptr_id: *const ::chlorine::c_void);
}
extern "C" {
    pub fn igPushIDInt(int_id: ::chlorine::c_int);
}
extern "C" {
    pub fn igPopID();
}
extern "C" {
    pub fn igGetIDStr(str_id: *const ::chlorine::c_char) -> ImGuiID;
}
extern "C" {
    pub fn igGetIDStrStr(str_id_begin: *const ::chlorine::c_char, str_id_end: *const ::chlorine::c_char) -> ImGuiID;
}
extern "C" {
    pub fn igGetIDPtr(ptr_id: *const ::chlorine::c_void) -> ImGuiID;
}
extern "C" {
    pub fn igTextUnformatted(text: *const ::chlorine::c_char, text_end: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igText(fmt: *const ::chlorine::c_char, ...);
}
extern "C" {
    pub fn igTextV(fmt: *const ::chlorine::c_char, args: va_list);
}
extern "C" {
    pub fn igTextColored(col: ImVec4, fmt: *const ::chlorine::c_char, ...);
}
extern "C" {
    pub fn igTextColoredV(col: ImVec4, fmt: *const ::chlorine::c_char, args: va_list);
}
extern "C" {
    pub fn igTextDisabled(fmt: *const ::chlorine::c_char, ...);
}
extern "C" {
    pub fn igTextDisabledV(fmt: *const ::chlorine::c_char, args: va_list);
}
extern "C" {
    pub fn igTextWrapped(fmt: *const ::chlorine::c_char, ...);
}
extern "C" {
    pub fn igTextWrappedV(fmt: *const ::chlorine::c_char, args: va_list);
}
extern "C" {
    pub fn igLabelText(label: *const ::chlorine::c_char, fmt: *const ::chlorine::c_char, ...);
}
extern "C" {
    pub fn igLabelTextV(label: *const ::chlorine::c_char, fmt: *const ::chlorine::c_char, args: va_list);
}
extern "C" {
    pub fn igBulletText(fmt: *const ::chlorine::c_char, ...);
}
extern "C" {
    pub fn igBulletTextV(fmt: *const ::chlorine::c_char, args: va_list);
}
extern "C" {
    pub fn igButton(label: *const ::chlorine::c_char, size: ImVec2) -> bool;
}
extern "C" {
    pub fn igSmallButton(label: *const ::chlorine::c_char) -> bool;
}
extern "C" {
    pub fn igInvisibleButton(str_id: *const ::chlorine::c_char, size: ImVec2, flags: ImGuiButtonFlags) -> bool;
}
extern "C" {
    pub fn igArrowButton(str_id: *const ::chlorine::c_char, dir: ImGuiDir) -> bool;
}
extern "C" {
    pub fn igImage(
        user_texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        tint_col: ImVec4,
        border_col: ImVec4,
    );
}
extern "C" {
    pub fn igImageButton(
        user_texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        frame_padding: ::chlorine::c_int,
        bg_col: ImVec4,
        tint_col: ImVec4,
    ) -> bool;
}
extern "C" {
    pub fn igCheckbox(label: *const ::chlorine::c_char, v: *mut bool) -> bool;
}
extern "C" {
    pub fn igCheckboxFlagsIntPtr(
        label: *const ::chlorine::c_char,
        flags: *mut ::chlorine::c_int,
        flags_value: ::chlorine::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igCheckboxFlagsUintPtr(
        label: *const ::chlorine::c_char,
        flags: *mut ::chlorine::c_uint,
        flags_value: ::chlorine::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn igRadioButtonBool(label: *const ::chlorine::c_char, active: bool) -> bool;
}
extern "C" {
    pub fn igRadioButtonIntPtr(
        label: *const ::chlorine::c_char,
        v: *mut ::chlorine::c_int,
        v_button: ::chlorine::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igProgressBar(fraction: f32, size_arg: ImVec2, overlay: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igBullet();
}
extern "C" {
    pub fn igBeginCombo(
        label: *const ::chlorine::c_char,
        preview_value: *const ::chlorine::c_char,
        flags: ImGuiComboFlags,
    ) -> bool;
}
extern "C" {
    pub fn igEndCombo();
}
extern "C" {
    pub fn igComboStr_arr(
        label: *const ::chlorine::c_char,
        current_item: *mut ::chlorine::c_int,
        items: *const *const ::chlorine::c_char,
        items_count: ::chlorine::c_int,
        popup_max_height_in_items: ::chlorine::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igComboStr(
        label: *const ::chlorine::c_char,
        current_item: *mut ::chlorine::c_int,
        items_separated_by_zeros: *const ::chlorine::c_char,
        popup_max_height_in_items: ::chlorine::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igComboFnBoolPtr(
        label: *const ::chlorine::c_char,
        current_item: *mut ::chlorine::c_int,
        items_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::chlorine::c_void,
                idx: ::chlorine::c_int,
                out_text: *mut *const ::chlorine::c_char,
            ) -> bool,
        >,
        data: *mut ::chlorine::c_void,
        items_count: ::chlorine::c_int,
        popup_max_height_in_items: ::chlorine::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloat(
        label: *const ::chlorine::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloat2(
        label: *const ::chlorine::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloat3(
        label: *const ::chlorine::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloat4(
        label: *const ::chlorine::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloatRange2(
        label: *const ::chlorine::c_char,
        v_current_min: *mut f32,
        v_current_max: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::chlorine::c_char,
        format_max: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragInt(
        label: *const ::chlorine::c_char,
        v: *mut ::chlorine::c_int,
        v_speed: f32,
        v_min: ::chlorine::c_int,
        v_max: ::chlorine::c_int,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragInt2(
        label: *const ::chlorine::c_char,
        v: *mut ::chlorine::c_int,
        v_speed: f32,
        v_min: ::chlorine::c_int,
        v_max: ::chlorine::c_int,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragInt3(
        label: *const ::chlorine::c_char,
        v: *mut ::chlorine::c_int,
        v_speed: f32,
        v_min: ::chlorine::c_int,
        v_max: ::chlorine::c_int,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragInt4(
        label: *const ::chlorine::c_char,
        v: *mut ::chlorine::c_int,
        v_speed: f32,
        v_min: ::chlorine::c_int,
        v_max: ::chlorine::c_int,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragIntRange2(
        label: *const ::chlorine::c_char,
        v_current_min: *mut ::chlorine::c_int,
        v_current_max: *mut ::chlorine::c_int,
        v_speed: f32,
        v_min: ::chlorine::c_int,
        v_max: ::chlorine::c_int,
        format: *const ::chlorine::c_char,
        format_max: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragScalar(
        label: *const ::chlorine::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::chlorine::c_void,
        v_speed: f32,
        p_min: *const ::chlorine::c_void,
        p_max: *const ::chlorine::c_void,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragScalarN(
        label: *const ::chlorine::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::chlorine::c_void,
        components: ::chlorine::c_int,
        v_speed: f32,
        p_min: *const ::chlorine::c_void,
        p_max: *const ::chlorine::c_void,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderFloat(
        label: *const ::chlorine::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderFloat2(
        label: *const ::chlorine::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderFloat3(
        label: *const ::chlorine::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderFloat4(
        label: *const ::chlorine::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderAngle(
        label: *const ::chlorine::c_char,
        v_rad: *mut f32,
        v_degrees_min: f32,
        v_degrees_max: f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderInt(
        label: *const ::chlorine::c_char,
        v: *mut ::chlorine::c_int,
        v_min: ::chlorine::c_int,
        v_max: ::chlorine::c_int,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderInt2(
        label: *const ::chlorine::c_char,
        v: *mut ::chlorine::c_int,
        v_min: ::chlorine::c_int,
        v_max: ::chlorine::c_int,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderInt3(
        label: *const ::chlorine::c_char,
        v: *mut ::chlorine::c_int,
        v_min: ::chlorine::c_int,
        v_max: ::chlorine::c_int,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderInt4(
        label: *const ::chlorine::c_char,
        v: *mut ::chlorine::c_int,
        v_min: ::chlorine::c_int,
        v_max: ::chlorine::c_int,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderScalar(
        label: *const ::chlorine::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::chlorine::c_void,
        p_min: *const ::chlorine::c_void,
        p_max: *const ::chlorine::c_void,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderScalarN(
        label: *const ::chlorine::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::chlorine::c_void,
        components: ::chlorine::c_int,
        p_min: *const ::chlorine::c_void,
        p_max: *const ::chlorine::c_void,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igVSliderFloat(
        label: *const ::chlorine::c_char,
        size: ImVec2,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igVSliderInt(
        label: *const ::chlorine::c_char,
        size: ImVec2,
        v: *mut ::chlorine::c_int,
        v_min: ::chlorine::c_int,
        v_max: ::chlorine::c_int,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igVSliderScalar(
        label: *const ::chlorine::c_char,
        size: ImVec2,
        data_type: ImGuiDataType,
        p_data: *mut ::chlorine::c_void,
        p_min: *const ::chlorine::c_void,
        p_max: *const ::chlorine::c_void,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputText(
        label: *const ::chlorine::c_char,
        buf: *mut ::chlorine::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::chlorine::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputTextMultiline(
        label: *const ::chlorine::c_char,
        buf: *mut ::chlorine::c_char,
        buf_size: usize,
        size: ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::chlorine::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputTextWithHint(
        label: *const ::chlorine::c_char,
        hint: *const ::chlorine::c_char,
        buf: *mut ::chlorine::c_char,
        buf_size: usize,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::chlorine::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputFloat(
        label: *const ::chlorine::c_char,
        v: *mut f32,
        step: f32,
        step_fast: f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputFloat2(
        label: *const ::chlorine::c_char,
        v: *mut f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputFloat3(
        label: *const ::chlorine::c_char,
        v: *mut f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputFloat4(
        label: *const ::chlorine::c_char,
        v: *mut f32,
        format: *const ::chlorine::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputInt(
        label: *const ::chlorine::c_char,
        v: *mut ::chlorine::c_int,
        step: ::chlorine::c_int,
        step_fast: ::chlorine::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputInt2(label: *const ::chlorine::c_char, v: *mut ::chlorine::c_int, flags: ImGuiInputTextFlags)
    -> bool;
}
extern "C" {
    pub fn igInputInt3(label: *const ::chlorine::c_char, v: *mut ::chlorine::c_int, flags: ImGuiInputTextFlags)
    -> bool;
}
extern "C" {
    pub fn igInputInt4(label: *const ::chlorine::c_char, v: *mut ::chlorine::c_int, flags: ImGuiInputTextFlags)
    -> bool;
}
extern "C" {
    pub fn igInputDouble(
        label: *const ::chlorine::c_char,
        v: *mut f64,
        step: f64,
        step_fast: f64,
        format: *const ::chlorine::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputScalar(
        label: *const ::chlorine::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::chlorine::c_void,
        p_step: *const ::chlorine::c_void,
        p_step_fast: *const ::chlorine::c_void,
        format: *const ::chlorine::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputScalarN(
        label: *const ::chlorine::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::chlorine::c_void,
        components: ::chlorine::c_int,
        p_step: *const ::chlorine::c_void,
        p_step_fast: *const ::chlorine::c_void,
        format: *const ::chlorine::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igColorEdit3(label: *const ::chlorine::c_char, col: *mut f32, flags: ImGuiColorEditFlags) -> bool;
}
extern "C" {
    pub fn igColorEdit4(label: *const ::chlorine::c_char, col: *mut f32, flags: ImGuiColorEditFlags) -> bool;
}
extern "C" {
    pub fn igColorPicker3(label: *const ::chlorine::c_char, col: *mut f32, flags: ImGuiColorEditFlags) -> bool;
}
extern "C" {
    pub fn igColorPicker4(
        label: *const ::chlorine::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
        ref_col: *const f32,
    ) -> bool;
}
extern "C" {
    pub fn igColorButton(
        desc_id: *const ::chlorine::c_char,
        col: ImVec4,
        flags: ImGuiColorEditFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn igSetColorEditOptions(flags: ImGuiColorEditFlags);
}
extern "C" {
    pub fn igTreeNodeStr(label: *const ::chlorine::c_char) -> bool;
}
extern "C" {
    pub fn igTreeNodeStrStr(str_id: *const ::chlorine::c_char, fmt: *const ::chlorine::c_char, ...) -> bool;
}
extern "C" {
    pub fn igTreeNodePtr(ptr_id: *const ::chlorine::c_void, fmt: *const ::chlorine::c_char, ...) -> bool;
}
extern "C" {
    pub fn igTreeNodeVStr(str_id: *const ::chlorine::c_char, fmt: *const ::chlorine::c_char, args: va_list) -> bool;
}
extern "C" {
    pub fn igTreeNodeVPtr(ptr_id: *const ::chlorine::c_void, fmt: *const ::chlorine::c_char, args: va_list) -> bool;
}
extern "C" {
    pub fn igTreeNodeExStr(label: *const ::chlorine::c_char, flags: ImGuiTreeNodeFlags) -> bool;
}
extern "C" {
    pub fn igTreeNodeExStrStr(
        str_id: *const ::chlorine::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::chlorine::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeExPtr(
        ptr_id: *const ::chlorine::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::chlorine::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeExVStr(
        str_id: *const ::chlorine::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::chlorine::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeExVPtr(
        ptr_id: *const ::chlorine::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::chlorine::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    pub fn igTreePushStr(str_id: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igTreePushPtr(ptr_id: *const ::chlorine::c_void);
}
extern "C" {
    pub fn igTreePop();
}
extern "C" {
    pub fn igGetTreeNodeToLabelSpacing() -> f32;
}
extern "C" {
    pub fn igCollapsingHeaderTreeNodeFlags(label: *const ::chlorine::c_char, flags: ImGuiTreeNodeFlags) -> bool;
}
extern "C" {
    pub fn igCollapsingHeaderBoolPtr(
        label: *const ::chlorine::c_char,
        p_visible: *mut bool,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSetNextItemOpen(is_open: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn igSelectableBool(
        label: *const ::chlorine::c_char,
        selected: bool,
        flags: ImGuiSelectableFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn igSelectableBoolPtr(
        label: *const ::chlorine::c_char,
        p_selected: *mut bool,
        flags: ImGuiSelectableFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn igBeginListBox(label: *const ::chlorine::c_char, size: ImVec2) -> bool;
}
extern "C" {
    pub fn igEndListBox();
}
extern "C" {
    pub fn igListBoxStr_arr(
        label: *const ::chlorine::c_char,
        current_item: *mut ::chlorine::c_int,
        items: *const *const ::chlorine::c_char,
        items_count: ::chlorine::c_int,
        height_in_items: ::chlorine::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igListBoxFnBoolPtr(
        label: *const ::chlorine::c_char,
        current_item: *mut ::chlorine::c_int,
        items_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::chlorine::c_void,
                idx: ::chlorine::c_int,
                out_text: *mut *const ::chlorine::c_char,
            ) -> bool,
        >,
        data: *mut ::chlorine::c_void,
        items_count: ::chlorine::c_int,
        height_in_items: ::chlorine::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igPlotLinesFloatPtr(
        label: *const ::chlorine::c_char,
        values: *const f32,
        values_count: ::chlorine::c_int,
        values_offset: ::chlorine::c_int,
        overlay_text: *const ::chlorine::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn igPlotLinesFnFloatPtr(
        label: *const ::chlorine::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(data: *mut ::chlorine::c_void, idx: ::chlorine::c_int) -> f32,
        >,
        data: *mut ::chlorine::c_void,
        values_count: ::chlorine::c_int,
        values_offset: ::chlorine::c_int,
        overlay_text: *const ::chlorine::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    pub fn igPlotHistogramFloatPtr(
        label: *const ::chlorine::c_char,
        values: *const f32,
        values_count: ::chlorine::c_int,
        values_offset: ::chlorine::c_int,
        overlay_text: *const ::chlorine::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn igPlotHistogramFnFloatPtr(
        label: *const ::chlorine::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(data: *mut ::chlorine::c_void, idx: ::chlorine::c_int) -> f32,
        >,
        data: *mut ::chlorine::c_void,
        values_count: ::chlorine::c_int,
        values_offset: ::chlorine::c_int,
        overlay_text: *const ::chlorine::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    pub fn igValueBool(prefix: *const ::chlorine::c_char, b: bool);
}
extern "C" {
    pub fn igValueInt(prefix: *const ::chlorine::c_char, v: ::chlorine::c_int);
}
extern "C" {
    pub fn igValueUint(prefix: *const ::chlorine::c_char, v: ::chlorine::c_uint);
}
extern "C" {
    pub fn igValueFloat(prefix: *const ::chlorine::c_char, v: f32, float_format: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igBeginMenuBar() -> bool;
}
extern "C" {
    pub fn igEndMenuBar();
}
extern "C" {
    pub fn igBeginMainMenuBar() -> bool;
}
extern "C" {
    pub fn igEndMainMenuBar();
}
extern "C" {
    pub fn igBeginMenu(label: *const ::chlorine::c_char, enabled: bool) -> bool;
}
extern "C" {
    pub fn igEndMenu();
}
extern "C" {
    pub fn igMenuItemBool(
        label: *const ::chlorine::c_char,
        shortcut: *const ::chlorine::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    pub fn igMenuItemBoolPtr(
        label: *const ::chlorine::c_char,
        shortcut: *const ::chlorine::c_char,
        p_selected: *mut bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    pub fn igBeginTooltip();
}
extern "C" {
    pub fn igEndTooltip();
}
extern "C" {
    pub fn igSetTooltip(fmt: *const ::chlorine::c_char, ...);
}
extern "C" {
    pub fn igSetTooltipV(fmt: *const ::chlorine::c_char, args: va_list);
}
extern "C" {
    pub fn igBeginPopup(str_id: *const ::chlorine::c_char, flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    pub fn igBeginPopupModal(name: *const ::chlorine::c_char, p_open: *mut bool, flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    pub fn igEndPopup();
}
extern "C" {
    pub fn igOpenPopup(str_id: *const ::chlorine::c_char, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    pub fn igOpenPopupOnItemClick(str_id: *const ::chlorine::c_char, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    pub fn igCloseCurrentPopup();
}
extern "C" {
    pub fn igBeginPopupContextItem(str_id: *const ::chlorine::c_char, popup_flags: ImGuiPopupFlags) -> bool;
}
extern "C" {
    pub fn igBeginPopupContextWindow(str_id: *const ::chlorine::c_char, popup_flags: ImGuiPopupFlags) -> bool;
}
extern "C" {
    pub fn igBeginPopupContextVoid(str_id: *const ::chlorine::c_char, popup_flags: ImGuiPopupFlags) -> bool;
}
extern "C" {
    pub fn igIsPopupOpenStr(str_id: *const ::chlorine::c_char, flags: ImGuiPopupFlags) -> bool;
}
extern "C" {
    pub fn igBeginTable(
        str_id: *const ::chlorine::c_char,
        column: ::chlorine::c_int,
        flags: ImGuiTableFlags,
        outer_size: ImVec2,
        inner_width: f32,
    ) -> bool;
}
extern "C" {
    pub fn igEndTable();
}
extern "C" {
    pub fn igTableNextRow(row_flags: ImGuiTableRowFlags, min_row_height: f32);
}
extern "C" {
    pub fn igTableNextColumn() -> bool;
}
extern "C" {
    pub fn igTableSetColumnIndex(column_n: ::chlorine::c_int) -> bool;
}
extern "C" {
    pub fn igTableSetupColumn(
        label: *const ::chlorine::c_char,
        flags: ImGuiTableColumnFlags,
        init_width_or_weight: f32,
        user_id: ImGuiID,
    );
}
extern "C" {
    pub fn igTableSetupScrollFreeze(cols: ::chlorine::c_int, rows: ::chlorine::c_int);
}
extern "C" {
    pub fn igTableHeadersRow();
}
extern "C" {
    pub fn igTableHeader(label: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igTableGetSortSpecs() -> *mut ImGuiTableSortSpecs;
}
extern "C" {
    pub fn igTableGetColumnCount() -> ::chlorine::c_int;
}
extern "C" {
    pub fn igTableGetColumnIndex() -> ::chlorine::c_int;
}
extern "C" {
    pub fn igTableGetRowIndex() -> ::chlorine::c_int;
}
extern "C" {
    pub fn igTableGetColumnNameInt(column_n: ::chlorine::c_int) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igTableGetColumnFlags(column_n: ::chlorine::c_int) -> ImGuiTableColumnFlags;
}
extern "C" {
    pub fn igTableSetBgColor(target: ImGuiTableBgTarget, color: ImU32, column_n: ::chlorine::c_int);
}
extern "C" {
    pub fn igColumns(count: ::chlorine::c_int, id: *const ::chlorine::c_char, border: bool);
}
extern "C" {
    pub fn igNextColumn();
}
extern "C" {
    pub fn igGetColumnIndex() -> ::chlorine::c_int;
}
extern "C" {
    pub fn igGetColumnWidth(column_index: ::chlorine::c_int) -> f32;
}
extern "C" {
    pub fn igSetColumnWidth(column_index: ::chlorine::c_int, width: f32);
}
extern "C" {
    pub fn igGetColumnOffset(column_index: ::chlorine::c_int) -> f32;
}
extern "C" {
    pub fn igSetColumnOffset(column_index: ::chlorine::c_int, offset_x: f32);
}
extern "C" {
    pub fn igGetColumnsCount() -> ::chlorine::c_int;
}
extern "C" {
    pub fn igBeginTabBar(str_id: *const ::chlorine::c_char, flags: ImGuiTabBarFlags) -> bool;
}
extern "C" {
    pub fn igEndTabBar();
}
extern "C" {
    pub fn igBeginTabItem(label: *const ::chlorine::c_char, p_open: *mut bool, flags: ImGuiTabItemFlags) -> bool;
}
extern "C" {
    pub fn igEndTabItem();
}
extern "C" {
    pub fn igTabItemButton(label: *const ::chlorine::c_char, flags: ImGuiTabItemFlags) -> bool;
}
extern "C" {
    pub fn igSetTabItemClosed(tab_or_docked_window_label: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igDockSpace(id: ImGuiID, size: ImVec2, flags: ImGuiDockNodeFlags, window_class: *const ImGuiWindowClass);
}
extern "C" {
    pub fn igDockSpaceOverViewport(
        viewport: *const ImGuiViewport,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igSetNextWindowDockID(dock_id: ImGuiID, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetNextWindowClass(window_class: *const ImGuiWindowClass);
}
extern "C" {
    pub fn igGetWindowDockID() -> ImGuiID;
}
extern "C" {
    pub fn igIsWindowDocked() -> bool;
}
extern "C" {
    pub fn igLogToTTY(auto_open_depth: ::chlorine::c_int);
}
extern "C" {
    pub fn igLogToFile(auto_open_depth: ::chlorine::c_int, filename: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igLogToClipboard(auto_open_depth: ::chlorine::c_int);
}
extern "C" {
    pub fn igLogFinish();
}
extern "C" {
    pub fn igLogButtons();
}
extern "C" {
    pub fn igLogTextV(fmt: *const ::chlorine::c_char, args: va_list);
}
extern "C" {
    pub fn igBeginDragDropSource(flags: ImGuiDragDropFlags) -> bool;
}
extern "C" {
    pub fn igSetDragDropPayload(
        type_: *const ::chlorine::c_char,
        data: *const ::chlorine::c_void,
        sz: usize,
        cond: ImGuiCond,
    ) -> bool;
}
extern "C" {
    pub fn igEndDragDropSource();
}
extern "C" {
    pub fn igBeginDragDropTarget() -> bool;
}
extern "C" {
    pub fn igAcceptDragDropPayload(type_: *const ::chlorine::c_char, flags: ImGuiDragDropFlags) -> *const ImGuiPayload;
}
extern "C" {
    pub fn igEndDragDropTarget();
}
extern "C" {
    pub fn igGetDragDropPayload() -> *const ImGuiPayload;
}
extern "C" {
    pub fn igPushClipRect(clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: bool);
}
extern "C" {
    pub fn igPopClipRect();
}
extern "C" {
    pub fn igSetItemDefaultFocus();
}
extern "C" {
    pub fn igSetKeyboardFocusHere(offset: ::chlorine::c_int);
}
extern "C" {
    pub fn igIsItemHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    pub fn igIsItemActive() -> bool;
}
extern "C" {
    pub fn igIsItemFocused() -> bool;
}
extern "C" {
    pub fn igIsItemClicked(mouse_button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn igIsItemVisible() -> bool;
}
extern "C" {
    pub fn igIsItemEdited() -> bool;
}
extern "C" {
    pub fn igIsItemActivated() -> bool;
}
extern "C" {
    pub fn igIsItemDeactivated() -> bool;
}
extern "C" {
    pub fn igIsItemDeactivatedAfterEdit() -> bool;
}
extern "C" {
    pub fn igIsItemToggledOpen() -> bool;
}
extern "C" {
    pub fn igIsAnyItemHovered() -> bool;
}
extern "C" {
    pub fn igIsAnyItemActive() -> bool;
}
extern "C" {
    pub fn igIsAnyItemFocused() -> bool;
}
extern "C" {
    pub fn igGetItemRectMin(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetItemRectMax(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetItemRectSize(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igSetItemAllowOverlap();
}
extern "C" {
    pub fn igGetMainViewport() -> *mut ImGuiViewport;
}
extern "C" {
    pub fn igIsRectVisibleNil(size: ImVec2) -> bool;
}
extern "C" {
    pub fn igIsRectVisibleVec2(rect_min: ImVec2, rect_max: ImVec2) -> bool;
}
extern "C" {
    pub fn igGetTime() -> f64;
}
extern "C" {
    pub fn igGetFrameCount() -> ::chlorine::c_int;
}
extern "C" {
    pub fn igGetBackgroundDrawListNil() -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetForegroundDrawListNil() -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetBackgroundDrawListViewportPtr(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetForegroundDrawListViewportPtr(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetDrawListSharedData() -> *mut ImDrawListSharedData;
}
extern "C" {
    pub fn igGetStyleColorName(idx: ImGuiCol) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igSetStateStorage(storage: *mut ImGuiStorage);
}
extern "C" {
    pub fn igGetStateStorage() -> *mut ImGuiStorage;
}
extern "C" {
    pub fn igCalcListClipping(
        items_count: ::chlorine::c_int,
        items_height: f32,
        out_items_display_start: *mut ::chlorine::c_int,
        out_items_display_end: *mut ::chlorine::c_int,
    );
}
extern "C" {
    pub fn igBeginChildFrame(id: ImGuiID, size: ImVec2, flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    pub fn igEndChildFrame();
}
extern "C" {
    pub fn igCalcTextSize(
        pOut: *mut ImVec2,
        text: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
        hide_text_after_double_hash: bool,
        wrap_width: f32,
    );
}
extern "C" {
    pub fn igColorConvertU32ToFloat4(pOut: *mut ImVec4, in_: ImU32);
}
extern "C" {
    pub fn igColorConvertFloat4ToU32(in_: ImVec4) -> ImU32;
}
extern "C" {
    pub fn igColorConvertRGBtoHSV(r: f32, g: f32, b: f32, out_h: *mut f32, out_s: *mut f32, out_v: *mut f32);
}
extern "C" {
    pub fn igColorConvertHSVtoRGB(h: f32, s: f32, v: f32, out_r: *mut f32, out_g: *mut f32, out_b: *mut f32);
}
extern "C" {
    pub fn igGetKeyIndex(imgui_key: ImGuiKey) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igIsKeyDown(user_key_index: ::chlorine::c_int) -> bool;
}
extern "C" {
    pub fn igIsKeyPressed(user_key_index: ::chlorine::c_int, repeat: bool) -> bool;
}
extern "C" {
    pub fn igIsKeyReleased(user_key_index: ::chlorine::c_int) -> bool;
}
extern "C" {
    pub fn igGetKeyPressedAmount(key_index: ::chlorine::c_int, repeat_delay: f32, rate: f32) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igCaptureKeyboardFromApp(want_capture_keyboard_value: bool);
}
extern "C" {
    pub fn igIsMouseDown(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn igIsMouseClicked(button: ImGuiMouseButton, repeat: bool) -> bool;
}
extern "C" {
    pub fn igIsMouseReleased(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn igIsMouseDoubleClicked(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn igIsMouseHoveringRect(r_min: ImVec2, r_max: ImVec2, clip: bool) -> bool;
}
extern "C" {
    pub fn igIsMousePosValid(mouse_pos: *const ImVec2) -> bool;
}
extern "C" {
    pub fn igIsAnyMouseDown() -> bool;
}
extern "C" {
    pub fn igGetMousePos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetMousePosOnOpeningCurrentPopup(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igIsMouseDragging(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
extern "C" {
    pub fn igGetMouseDragDelta(pOut: *mut ImVec2, button: ImGuiMouseButton, lock_threshold: f32);
}
extern "C" {
    pub fn igResetMouseDragDelta(button: ImGuiMouseButton);
}
extern "C" {
    pub fn igGetMouseCursor() -> ImGuiMouseCursor;
}
extern "C" {
    pub fn igSetMouseCursor(cursor_type: ImGuiMouseCursor);
}
extern "C" {
    pub fn igCaptureMouseFromApp(want_capture_mouse_value: bool);
}
extern "C" {
    pub fn igGetClipboardText() -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igSetClipboardText(text: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igLoadIniSettingsFromDisk(ini_filename: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igLoadIniSettingsFromMemory(ini_data: *const ::chlorine::c_char, ini_size: usize);
}
extern "C" {
    pub fn igSaveIniSettingsToDisk(ini_filename: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igSaveIniSettingsToMemory(out_ini_size: *mut usize) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igDebugCheckVersionAndDataLayout(
        version_str: *const ::chlorine::c_char,
        sz_io: usize,
        sz_style: usize,
        sz_vec2: usize,
        sz_vec4: usize,
        sz_drawvert: usize,
        sz_drawidx: usize,
    ) -> bool;
}
extern "C" {
    pub fn igSetAllocatorFunctions(
        alloc_func: ImGuiMemAllocFunc,
        free_func: ImGuiMemFreeFunc,
        user_data: *mut ::chlorine::c_void,
    );
}
extern "C" {
    pub fn igGetAllocatorFunctions(
        p_alloc_func: *mut ImGuiMemAllocFunc,
        p_free_func: *mut ImGuiMemFreeFunc,
        p_user_data: *mut *mut ::chlorine::c_void,
    );
}
extern "C" {
    pub fn igMemAlloc(size: usize) -> *mut ::chlorine::c_void;
}
extern "C" {
    pub fn igMemFree(ptr: *mut ::chlorine::c_void);
}
extern "C" {
    pub fn igGetPlatformIO() -> *mut ImGuiPlatformIO;
}
extern "C" {
    pub fn igUpdatePlatformWindows();
}
extern "C" {
    pub fn igRenderPlatformWindowsDefault(
        platform_render_arg: *mut ::chlorine::c_void,
        renderer_render_arg: *mut ::chlorine::c_void,
    );
}
extern "C" {
    pub fn igDestroyPlatformWindows();
}
extern "C" {
    pub fn igFindViewportByID(id: ImGuiID) -> *mut ImGuiViewport;
}
extern "C" {
    pub fn igFindViewportByPlatformHandle(platform_handle: *mut ::chlorine::c_void) -> *mut ImGuiViewport;
}
extern "C" {
    pub fn ImGuiStyle_ImGuiStyle() -> *mut ImGuiStyle;
}
extern "C" {
    pub fn ImGuiStyle_destroy(self_: *mut ImGuiStyle);
}
extern "C" {
    pub fn ImGuiStyle_ScaleAllSizes(self_: *mut ImGuiStyle, scale_factor: f32);
}
extern "C" {
    pub fn ImGuiIO_AddInputCharacter(self_: *mut ImGuiIO, c: ::chlorine::c_uint);
}
extern "C" {
    pub fn ImGuiIO_AddInputCharacterUTF16(self_: *mut ImGuiIO, c: ImWchar16);
}
extern "C" {
    pub fn ImGuiIO_AddInputCharactersUTF8(self_: *mut ImGuiIO, str_: *const ::chlorine::c_char);
}
extern "C" {
    pub fn ImGuiIO_ClearInputCharacters(self_: *mut ImGuiIO);
}
extern "C" {
    pub fn ImGuiIO_ImGuiIO() -> *mut ImGuiIO;
}
extern "C" {
    pub fn ImGuiIO_destroy(self_: *mut ImGuiIO);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_ImGuiInputTextCallbackData() -> *mut ImGuiInputTextCallbackData;
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_destroy(self_: *mut ImGuiInputTextCallbackData);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_DeleteChars(
        self_: *mut ImGuiInputTextCallbackData,
        pos: ::chlorine::c_int,
        bytes_count: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_InsertChars(
        self_: *mut ImGuiInputTextCallbackData,
        pos: ::chlorine::c_int,
        text: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
    );
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_SelectAll(self_: *mut ImGuiInputTextCallbackData);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_ClearSelection(self_: *mut ImGuiInputTextCallbackData);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_HasSelection(self_: *mut ImGuiInputTextCallbackData) -> bool;
}
extern "C" {
    pub fn ImGuiWindowClass_ImGuiWindowClass() -> *mut ImGuiWindowClass;
}
extern "C" {
    pub fn ImGuiWindowClass_destroy(self_: *mut ImGuiWindowClass);
}
extern "C" {
    pub fn ImGuiPayload_ImGuiPayload() -> *mut ImGuiPayload;
}
extern "C" {
    pub fn ImGuiPayload_destroy(self_: *mut ImGuiPayload);
}
extern "C" {
    pub fn ImGuiPayload_Clear(self_: *mut ImGuiPayload);
}
extern "C" {
    pub fn ImGuiPayload_IsDataType(self_: *mut ImGuiPayload, type_: *const ::chlorine::c_char) -> bool;
}
extern "C" {
    pub fn ImGuiPayload_IsPreview(self_: *mut ImGuiPayload) -> bool;
}
extern "C" {
    pub fn ImGuiPayload_IsDelivery(self_: *mut ImGuiPayload) -> bool;
}
extern "C" {
    pub fn ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs() -> *mut ImGuiTableColumnSortSpecs;
}
extern "C" {
    pub fn ImGuiTableColumnSortSpecs_destroy(self_: *mut ImGuiTableColumnSortSpecs);
}
extern "C" {
    pub fn ImGuiTableSortSpecs_ImGuiTableSortSpecs() -> *mut ImGuiTableSortSpecs;
}
extern "C" {
    pub fn ImGuiTableSortSpecs_destroy(self_: *mut ImGuiTableSortSpecs);
}
extern "C" {
    pub fn ImGuiOnceUponAFrame_ImGuiOnceUponAFrame() -> *mut ImGuiOnceUponAFrame;
}
extern "C" {
    pub fn ImGuiOnceUponAFrame_destroy(self_: *mut ImGuiOnceUponAFrame);
}
extern "C" {
    pub fn ImGuiTextFilter_ImGuiTextFilter(default_filter: *const ::chlorine::c_char) -> *mut ImGuiTextFilter;
}
extern "C" {
    pub fn ImGuiTextFilter_destroy(self_: *mut ImGuiTextFilter);
}
extern "C" {
    pub fn ImGuiTextFilter_Draw(self_: *mut ImGuiTextFilter, label: *const ::chlorine::c_char, width: f32) -> bool;
}
extern "C" {
    pub fn ImGuiTextFilter_PassFilter(
        self_: *mut ImGuiTextFilter,
        text: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiTextFilter_Build(self_: *mut ImGuiTextFilter);
}
extern "C" {
    pub fn ImGuiTextFilter_Clear(self_: *mut ImGuiTextFilter);
}
extern "C" {
    pub fn ImGuiTextFilter_IsActive(self_: *mut ImGuiTextFilter) -> bool;
}
extern "C" {
    pub fn ImGuiTextRange_ImGuiTextRangeNil() -> *mut ImGuiTextRange;
}
extern "C" {
    pub fn ImGuiTextRange_destroy(self_: *mut ImGuiTextRange);
}
extern "C" {
    pub fn ImGuiTextRange_ImGuiTextRangeStr(
        _b: *const ::chlorine::c_char,
        _e: *const ::chlorine::c_char,
    ) -> *mut ImGuiTextRange;
}
extern "C" {
    pub fn ImGuiTextRange_empty(self_: *mut ImGuiTextRange) -> bool;
}
extern "C" {
    pub fn ImGuiTextRange_split(
        self_: *mut ImGuiTextRange,
        separator: ::chlorine::c_char,
        out: *mut ImVector_ImGuiTextRange,
    );
}
extern "C" {
    pub fn ImGuiTextBuffer_ImGuiTextBuffer() -> *mut ImGuiTextBuffer;
}
extern "C" {
    pub fn ImGuiTextBuffer_destroy(self_: *mut ImGuiTextBuffer);
}
extern "C" {
    pub fn ImGuiTextBuffer_begin(self_: *mut ImGuiTextBuffer) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn ImGuiTextBuffer_end(self_: *mut ImGuiTextBuffer) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn ImGuiTextBuffer_size(self_: *mut ImGuiTextBuffer) -> ::chlorine::c_int;
}
extern "C" {
    pub fn ImGuiTextBuffer_empty(self_: *mut ImGuiTextBuffer) -> bool;
}
extern "C" {
    pub fn ImGuiTextBuffer_clear(self_: *mut ImGuiTextBuffer);
}
extern "C" {
    pub fn ImGuiTextBuffer_reserve(self_: *mut ImGuiTextBuffer, capacity: ::chlorine::c_int);
}
extern "C" {
    pub fn ImGuiTextBuffer_c_str(self_: *mut ImGuiTextBuffer) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn ImGuiTextBuffer_append(
        self_: *mut ImGuiTextBuffer,
        str_: *const ::chlorine::c_char,
        str_end: *const ::chlorine::c_char,
    );
}
extern "C" {
    pub fn ImGuiTextBuffer_appendfv(self_: *mut ImGuiTextBuffer, fmt: *const ::chlorine::c_char, args: va_list);
}
extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePairInt(_key: ImGuiID, _val_i: ::chlorine::c_int) -> *mut ImGuiStoragePair;
}
extern "C" {
    pub fn ImGuiStoragePair_destroy(self_: *mut ImGuiStoragePair);
}
extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePairFloat(_key: ImGuiID, _val_f: f32) -> *mut ImGuiStoragePair;
}
extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePairPtr(
        _key: ImGuiID,
        _val_p: *mut ::chlorine::c_void,
    ) -> *mut ImGuiStoragePair;
}
extern "C" {
    pub fn ImGuiStorage_Clear(self_: *mut ImGuiStorage);
}
extern "C" {
    pub fn ImGuiStorage_GetInt(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::chlorine::c_int,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn ImGuiStorage_SetInt(self_: *mut ImGuiStorage, key: ImGuiID, val: ::chlorine::c_int);
}
extern "C" {
    pub fn ImGuiStorage_GetBool(self_: *mut ImGuiStorage, key: ImGuiID, default_val: bool) -> bool;
}
extern "C" {
    pub fn ImGuiStorage_SetBool(self_: *mut ImGuiStorage, key: ImGuiID, val: bool);
}
extern "C" {
    pub fn ImGuiStorage_GetFloat(self_: *mut ImGuiStorage, key: ImGuiID, default_val: f32) -> f32;
}
extern "C" {
    pub fn ImGuiStorage_SetFloat(self_: *mut ImGuiStorage, key: ImGuiID, val: f32);
}
extern "C" {
    pub fn ImGuiStorage_GetVoidPtr(self_: *mut ImGuiStorage, key: ImGuiID) -> *mut ::chlorine::c_void;
}
extern "C" {
    pub fn ImGuiStorage_SetVoidPtr(self_: *mut ImGuiStorage, key: ImGuiID, val: *mut ::chlorine::c_void);
}
extern "C" {
    pub fn ImGuiStorage_GetIntRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::chlorine::c_int,
    ) -> *mut ::chlorine::c_int;
}
extern "C" {
    pub fn ImGuiStorage_GetBoolRef(self_: *mut ImGuiStorage, key: ImGuiID, default_val: bool) -> *mut bool;
}
extern "C" {
    pub fn ImGuiStorage_GetFloatRef(self_: *mut ImGuiStorage, key: ImGuiID, default_val: f32) -> *mut f32;
}
extern "C" {
    pub fn ImGuiStorage_GetVoidPtrRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: *mut ::chlorine::c_void,
    ) -> *mut *mut ::chlorine::c_void;
}
extern "C" {
    pub fn ImGuiStorage_SetAllInt(self_: *mut ImGuiStorage, val: ::chlorine::c_int);
}
extern "C" {
    pub fn ImGuiStorage_BuildSortByKey(self_: *mut ImGuiStorage);
}
extern "C" {
    pub fn ImGuiListClipper_ImGuiListClipper() -> *mut ImGuiListClipper;
}
extern "C" {
    pub fn ImGuiListClipper_destroy(self_: *mut ImGuiListClipper);
}
extern "C" {
    pub fn ImGuiListClipper_Begin(self_: *mut ImGuiListClipper, items_count: ::chlorine::c_int, items_height: f32);
}
extern "C" {
    pub fn ImGuiListClipper_End(self_: *mut ImGuiListClipper);
}
extern "C" {
    pub fn ImGuiListClipper_Step(self_: *mut ImGuiListClipper) -> bool;
}
extern "C" {
    pub fn ImColor_ImColorNil() -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_destroy(self_: *mut ImColor);
}
extern "C" {
    pub fn ImColor_ImColorInt(
        r: ::chlorine::c_int,
        g: ::chlorine::c_int,
        b: ::chlorine::c_int,
        a: ::chlorine::c_int,
    ) -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_ImColorU32(rgba: ImU32) -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_ImColorFloat(r: f32, g: f32, b: f32, a: f32) -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_ImColorVec4(col: ImVec4) -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_SetHSV(self_: *mut ImColor, h: f32, s: f32, v: f32, a: f32);
}
extern "C" {
    pub fn ImColor_HSV(pOut: *mut ImColor, h: f32, s: f32, v: f32, a: f32);
}
extern "C" {
    pub fn ImDrawCmd_ImDrawCmd() -> *mut ImDrawCmd;
}
extern "C" {
    pub fn ImDrawCmd_destroy(self_: *mut ImDrawCmd);
}
extern "C" {
    pub fn ImDrawListSplitter_ImDrawListSplitter() -> *mut ImDrawListSplitter;
}
extern "C" {
    pub fn ImDrawListSplitter_destroy(self_: *mut ImDrawListSplitter);
}
extern "C" {
    pub fn ImDrawListSplitter_Clear(self_: *mut ImDrawListSplitter);
}
extern "C" {
    pub fn ImDrawListSplitter_ClearFreeMemory(self_: *mut ImDrawListSplitter);
}
extern "C" {
    pub fn ImDrawListSplitter_Split(
        self_: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        count: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImDrawListSplitter_Merge(self_: *mut ImDrawListSplitter, draw_list: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawListSplitter_SetCurrentChannel(
        self_: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        channel_idx: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_ImDrawList(shared_data: *const ImDrawListSharedData) -> *mut ImDrawList;
}
extern "C" {
    pub fn ImDrawList_destroy(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PushClipRect(
        self_: *mut ImDrawList,
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    pub fn ImDrawList_PushClipRectFullScreen(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PopClipRect(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PushTextureID(self_: *mut ImDrawList, texture_id: ImTextureID);
}
extern "C" {
    pub fn ImDrawList_PopTextureID(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_GetClipRectMin(pOut: *mut ImVec2, self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_GetClipRectMax(pOut: *mut ImVec2, self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_AddLine(self_: *mut ImDrawList, p1: ImVec2, p2: ImVec2, col: ImU32, thickness: f32);
}
extern "C" {
    pub fn ImDrawList_AddRect(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddRectFilled(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn ImDrawList_AddRectFilledMultiColor(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddQuad(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddQuadFilled(self_: *mut ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_AddTriangle(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddTriangleFilled(self_: *mut ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_AddCircle(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::chlorine::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddCircleFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddNgon(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::chlorine::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddNgonFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddTextVec2(
        self_: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
    );
}
extern "C" {
    pub fn ImDrawList_AddTextFontPtr(
        self_: *mut ImDrawList,
        font: *const ImFont,
        font_size: f32,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    );
}
extern "C" {
    pub fn ImDrawList_AddPolyline(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::chlorine::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddConvexPolyFilled(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::chlorine::c_int,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddBezierCubic(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddBezierQuadratic(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddImage(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
        uv_min: ImVec2,
        uv_max: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddImageQuad(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        uv1: ImVec2,
        uv2: ImVec2,
        uv3: ImVec2,
        uv4: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddImageRounded(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
        uv_min: ImVec2,
        uv_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn ImDrawList_PathClear(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PathLineTo(self_: *mut ImDrawList, pos: ImVec2);
}
extern "C" {
    pub fn ImDrawList_PathLineToMergeDuplicate(self_: *mut ImDrawList, pos: ImVec2);
}
extern "C" {
    pub fn ImDrawList_PathFillConvex(self_: *mut ImDrawList, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PathStroke(self_: *mut ImDrawList, col: ImU32, flags: ImDrawFlags, thickness: f32);
}
extern "C" {
    pub fn ImDrawList_PathArcTo(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathArcToFast(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min_of_12: ::chlorine::c_int,
        a_max_of_12: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathBezierCubicCurveTo(
        self_: *mut ImDrawList,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        num_segments: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathBezierQuadraticCurveTo(
        self_: *mut ImDrawList,
        p2: ImVec2,
        p3: ImVec2,
        num_segments: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathRect(
        self_: *mut ImDrawList,
        rect_min: ImVec2,
        rect_max: ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn ImDrawList_AddCallback(
        self_: *mut ImDrawList,
        callback: ImDrawCallback,
        callback_data: *mut ::chlorine::c_void,
    );
}
extern "C" {
    pub fn ImDrawList_AddDrawCmd(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_CloneOutput(self_: *mut ImDrawList) -> *mut ImDrawList;
}
extern "C" {
    pub fn ImDrawList_ChannelsSplit(self_: *mut ImDrawList, count: ::chlorine::c_int);
}
extern "C" {
    pub fn ImDrawList_ChannelsMerge(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_ChannelsSetCurrent(self_: *mut ImDrawList, n: ::chlorine::c_int);
}
extern "C" {
    pub fn ImDrawList_PrimReserve(self_: *mut ImDrawList, idx_count: ::chlorine::c_int, vtx_count: ::chlorine::c_int);
}
extern "C" {
    pub fn ImDrawList_PrimUnreserve(self_: *mut ImDrawList, idx_count: ::chlorine::c_int, vtx_count: ::chlorine::c_int);
}
extern "C" {
    pub fn ImDrawList_PrimRect(self_: *mut ImDrawList, a: ImVec2, b: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PrimRectUV(self_: *mut ImDrawList, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PrimQuadUV(
        self_: *mut ImDrawList,
        a: ImVec2,
        b: ImVec2,
        c: ImVec2,
        d: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        uv_c: ImVec2,
        uv_d: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_PrimWriteVtx(self_: *mut ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PrimWriteIdx(self_: *mut ImDrawList, idx: ImDrawIdx);
}
extern "C" {
    pub fn ImDrawList_PrimVtx(self_: *mut ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList__ResetForNewFrame(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__ClearFreeMemory(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__PopUnusedDrawCmd(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__OnChangedClipRect(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__OnChangedTextureID(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__OnChangedVtxOffset(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__CalcCircleAutoSegmentCount(self_: *mut ImDrawList, radius: f32) -> ::chlorine::c_int;
}
extern "C" {
    pub fn ImDrawList__PathArcToFastEx(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min_sample: ::chlorine::c_int,
        a_max_sample: ::chlorine::c_int,
        a_step: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImDrawList__PathArcToN(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImDrawData_ImDrawData() -> *mut ImDrawData;
}
extern "C" {
    pub fn ImDrawData_destroy(self_: *mut ImDrawData);
}
extern "C" {
    pub fn ImDrawData_Clear(self_: *mut ImDrawData);
}
extern "C" {
    pub fn ImDrawData_DeIndexAllBuffers(self_: *mut ImDrawData);
}
extern "C" {
    pub fn ImDrawData_ScaleClipRects(self_: *mut ImDrawData, fb_scale: ImVec2);
}
extern "C" {
    pub fn ImFontConfig_ImFontConfig() -> *mut ImFontConfig;
}
extern "C" {
    pub fn ImFontConfig_destroy(self_: *mut ImFontConfig);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder() -> *mut ImFontGlyphRangesBuilder;
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_destroy(self_: *mut ImFontGlyphRangesBuilder);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_Clear(self_: *mut ImFontGlyphRangesBuilder);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_GetBit(self_: *mut ImFontGlyphRangesBuilder, n: usize) -> bool;
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_SetBit(self_: *mut ImFontGlyphRangesBuilder, n: usize);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddChar(self_: *mut ImFontGlyphRangesBuilder, c: ImWchar);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddText(
        self_: *mut ImFontGlyphRangesBuilder,
        text: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
    );
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddRanges(self_: *mut ImFontGlyphRangesBuilder, ranges: *const ImWchar);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_BuildRanges(
        self_: *mut ImFontGlyphRangesBuilder,
        out_ranges: *mut ImVector_ImWchar,
    );
}
extern "C" {
    pub fn ImFontAtlasCustomRect_ImFontAtlasCustomRect() -> *mut ImFontAtlasCustomRect;
}
extern "C" {
    pub fn ImFontAtlasCustomRect_destroy(self_: *mut ImFontAtlasCustomRect);
}
extern "C" {
    pub fn ImFontAtlasCustomRect_IsPacked(self_: *mut ImFontAtlasCustomRect) -> bool;
}
extern "C" {
    pub fn ImFontAtlas_ImFontAtlas() -> *mut ImFontAtlas;
}
extern "C" {
    pub fn ImFontAtlas_destroy(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_AddFont(self_: *mut ImFontAtlas, font_cfg: *const ImFontConfig) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontDefault(self_: *mut ImFontAtlas, font_cfg: *const ImFontConfig) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromFileTTF(
        self_: *mut ImFontAtlas,
        filename: *const ::chlorine::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryTTF(
        self_: *mut ImFontAtlas,
        font_data: *mut ::chlorine::c_void,
        font_size: ::chlorine::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(
        self_: *mut ImFontAtlas,
        compressed_font_data: *const ::chlorine::c_void,
        compressed_font_size: ::chlorine::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
        self_: *mut ImFontAtlas,
        compressed_font_data_base85: *const ::chlorine::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_ClearInputData(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_ClearTexData(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_ClearFonts(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_Clear(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_Build(self_: *mut ImFontAtlas) -> bool;
}
extern "C" {
    pub fn ImFontAtlas_GetTexDataAsAlpha8(
        self_: *mut ImFontAtlas,
        out_pixels: *mut *mut ::chlorine::c_uchar,
        out_width: *mut ::chlorine::c_int,
        out_height: *mut ::chlorine::c_int,
        out_bytes_per_pixel: *mut ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImFontAtlas_GetTexDataAsRGBA32(
        self_: *mut ImFontAtlas,
        out_pixels: *mut *mut ::chlorine::c_uchar,
        out_width: *mut ::chlorine::c_int,
        out_height: *mut ::chlorine::c_int,
        out_bytes_per_pixel: *mut ::chlorine::c_int,
    );
}
extern "C" {
    pub fn ImFontAtlas_IsBuilt(self_: *mut ImFontAtlas) -> bool;
}
extern "C" {
    pub fn ImFontAtlas_SetTexID(self_: *mut ImFontAtlas, id: ImTextureID);
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesDefault(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesKorean(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesJapanese(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesChineseFull(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesCyrillic(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesThai(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesVietnamese(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_AddCustomRectRegular(
        self_: *mut ImFontAtlas,
        width: ::chlorine::c_int,
        height: ::chlorine::c_int,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn ImFontAtlas_AddCustomRectFontGlyph(
        self_: *mut ImFontAtlas,
        font: *mut ImFont,
        id: ImWchar,
        width: ::chlorine::c_int,
        height: ::chlorine::c_int,
        advance_x: f32,
        offset: ImVec2,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn ImFontAtlas_GetCustomRectByIndex(
        self_: *mut ImFontAtlas,
        index: ::chlorine::c_int,
    ) -> *mut ImFontAtlasCustomRect;
}
extern "C" {
    pub fn ImFontAtlas_CalcCustomRectUV(
        self_: *mut ImFontAtlas,
        rect: *const ImFontAtlasCustomRect,
        out_uv_min: *mut ImVec2,
        out_uv_max: *mut ImVec2,
    );
}
extern "C" {
    pub fn ImFontAtlas_GetMouseCursorTexData(
        self_: *mut ImFontAtlas,
        cursor: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn ImFont_ImFont() -> *mut ImFont;
}
extern "C" {
    pub fn ImFont_destroy(self_: *mut ImFont);
}
extern "C" {
    pub fn ImFont_FindGlyph(self_: *mut ImFont, c: ImWchar) -> *const ImFontGlyph;
}
extern "C" {
    pub fn ImFont_FindGlyphNoFallback(self_: *mut ImFont, c: ImWchar) -> *const ImFontGlyph;
}
extern "C" {
    pub fn ImFont_GetCharAdvance(self_: *mut ImFont, c: ImWchar) -> f32;
}
extern "C" {
    pub fn ImFont_IsLoaded(self_: *mut ImFont) -> bool;
}
extern "C" {
    pub fn ImFont_GetDebugName(self_: *mut ImFont) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn ImFont_CalcTextSizeA(
        pOut: *mut ImVec2,
        self_: *mut ImFont,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
        remaining: *mut *const ::chlorine::c_char,
    );
}
extern "C" {
    pub fn ImFont_CalcWordWrapPositionA(
        self_: *mut ImFont,
        scale: f32,
        text: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
        wrap_width: f32,
    ) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn ImFont_RenderChar(
        self_: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        c: ImWchar,
    );
}
extern "C" {
    pub fn ImFont_RenderText(
        self_: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        clip_rect: ImVec4,
        text_begin: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    );
}
extern "C" {
    pub fn ImFont_BuildLookupTable(self_: *mut ImFont);
}
extern "C" {
    pub fn ImFont_ClearOutputData(self_: *mut ImFont);
}
extern "C" {
    pub fn ImFont_GrowIndex(self_: *mut ImFont, new_size: ::chlorine::c_int);
}
extern "C" {
    pub fn ImFont_AddGlyph(
        self_: *mut ImFont,
        src_cfg: *const ImFontConfig,
        c: ImWchar,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
        u0: f32,
        v0: f32,
        u1: f32,
        v1: f32,
        advance_x: f32,
    );
}
extern "C" {
    pub fn ImFont_AddRemapChar(self_: *mut ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool);
}
extern "C" {
    pub fn ImFont_SetGlyphVisible(self_: *mut ImFont, c: ImWchar, visible: bool);
}
extern "C" {
    pub fn ImFont_SetFallbackChar(self_: *mut ImFont, c: ImWchar);
}
extern "C" {
    pub fn ImFont_IsGlyphRangeUnused(
        self_: *mut ImFont,
        c_begin: ::chlorine::c_uint,
        c_last: ::chlorine::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiViewport_ImGuiViewport() -> *mut ImGuiViewport;
}
extern "C" {
    pub fn ImGuiViewport_destroy(self_: *mut ImGuiViewport);
}
extern "C" {
    pub fn ImGuiViewport_GetCenter(pOut: *mut ImVec2, self_: *mut ImGuiViewport);
}
extern "C" {
    pub fn ImGuiViewport_GetWorkCenter(pOut: *mut ImVec2, self_: *mut ImGuiViewport);
}
extern "C" {
    pub fn ImGuiPlatformIO_ImGuiPlatformIO() -> *mut ImGuiPlatformIO;
}
extern "C" {
    pub fn ImGuiPlatformIO_destroy(self_: *mut ImGuiPlatformIO);
}
extern "C" {
    pub fn ImGuiPlatformMonitor_ImGuiPlatformMonitor() -> *mut ImGuiPlatformMonitor;
}
extern "C" {
    pub fn ImGuiPlatformMonitor_destroy(self_: *mut ImGuiPlatformMonitor);
}
extern "C" {
    pub fn igImHashData(data: *const ::chlorine::c_void, data_size: usize, seed: ImU32) -> ImGuiID;
}
extern "C" {
    pub fn igImHashStr(data: *const ::chlorine::c_char, data_size: usize, seed: ImU32) -> ImGuiID;
}
extern "C" {
    pub fn igImAlphaBlendColors(col_a: ImU32, col_b: ImU32) -> ImU32;
}
extern "C" {
    pub fn igImIsPowerOfTwoInt(v: ::chlorine::c_int) -> bool;
}
extern "C" {
    pub fn igImIsPowerOfTwoU64(v: ImU64) -> bool;
}
extern "C" {
    pub fn igImUpperPowerOfTwo(v: ::chlorine::c_int) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImStricmp(str1: *const ::chlorine::c_char, str2: *const ::chlorine::c_char) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImStrnicmp(
        str1: *const ::chlorine::c_char,
        str2: *const ::chlorine::c_char,
        count: usize,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImStrncpy(dst: *mut ::chlorine::c_char, src: *const ::chlorine::c_char, count: usize);
}
extern "C" {
    pub fn igImStrdup(str_: *const ::chlorine::c_char) -> *mut ::chlorine::c_char;
}
extern "C" {
    pub fn igImStrdupcpy(
        dst: *mut ::chlorine::c_char,
        p_dst_size: *mut usize,
        str_: *const ::chlorine::c_char,
    ) -> *mut ::chlorine::c_char;
}
extern "C" {
    pub fn igImStrchrRange(
        str_begin: *const ::chlorine::c_char,
        str_end: *const ::chlorine::c_char,
        c: ::chlorine::c_char,
    ) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igImStrlenW(str_: *const ImWchar) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImStreolRange(
        str_: *const ::chlorine::c_char,
        str_end: *const ::chlorine::c_char,
    ) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igImStrbolW(buf_mid_line: *const ImWchar, buf_begin: *const ImWchar) -> *const ImWchar;
}
extern "C" {
    pub fn igImStristr(
        haystack: *const ::chlorine::c_char,
        haystack_end: *const ::chlorine::c_char,
        needle: *const ::chlorine::c_char,
        needle_end: *const ::chlorine::c_char,
    ) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igImStrTrimBlanks(str_: *mut ::chlorine::c_char);
}
extern "C" {
    pub fn igImStrSkipBlank(str_: *const ::chlorine::c_char) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igImFormatString(
        buf: *mut ::chlorine::c_char,
        buf_size: usize,
        fmt: *const ::chlorine::c_char,
        ...
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImFormatStringV(
        buf: *mut ::chlorine::c_char,
        buf_size: usize,
        fmt: *const ::chlorine::c_char,
        args: va_list,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImParseFormatFindStart(format: *const ::chlorine::c_char) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igImParseFormatFindEnd(format: *const ::chlorine::c_char) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igImParseFormatTrimDecorations(
        format: *const ::chlorine::c_char,
        buf: *mut ::chlorine::c_char,
        buf_size: usize,
    ) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igImParseFormatPrecision(
        format: *const ::chlorine::c_char,
        default_value: ::chlorine::c_int,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImCharIsBlankA(c: ::chlorine::c_char) -> bool;
}
extern "C" {
    pub fn igImCharIsBlankW(c: ::chlorine::c_uint) -> bool;
}
extern "C" {
    pub fn igImTextStrToUtf8(
        buf: *mut ::chlorine::c_char,
        buf_size: ::chlorine::c_int,
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImTextCharFromUtf8(
        out_char: *mut ::chlorine::c_uint,
        in_text: *const ::chlorine::c_char,
        in_text_end: *const ::chlorine::c_char,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImTextStrFromUtf8(
        buf: *mut ImWchar,
        buf_size: ::chlorine::c_int,
        in_text: *const ::chlorine::c_char,
        in_text_end: *const ::chlorine::c_char,
        in_remaining: *mut *const ::chlorine::c_char,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImTextCountCharsFromUtf8(
        in_text: *const ::chlorine::c_char,
        in_text_end: *const ::chlorine::c_char,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImTextCountUtf8BytesFromChar(
        in_text: *const ::chlorine::c_char,
        in_text_end: *const ::chlorine::c_char,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImTextCountUtf8BytesFromStr(in_text: *const ImWchar, in_text_end: *const ImWchar) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImFileOpen(filename: *const ::chlorine::c_char, mode: *const ::chlorine::c_char) -> ImFileHandle;
}
extern "C" {
    pub fn igImFileClose(file: ImFileHandle) -> bool;
}
extern "C" {
    pub fn igImFileGetSize(file: ImFileHandle) -> ImU64;
}
extern "C" {
    pub fn igImFileRead(data: *mut ::chlorine::c_void, size: ImU64, count: ImU64, file: ImFileHandle) -> ImU64;
}
extern "C" {
    pub fn igImFileWrite(data: *const ::chlorine::c_void, size: ImU64, count: ImU64, file: ImFileHandle) -> ImU64;
}
extern "C" {
    pub fn igImFileLoadToMemory(
        filename: *const ::chlorine::c_char,
        mode: *const ::chlorine::c_char,
        out_file_size: *mut usize,
        padding_bytes: ::chlorine::c_int,
    ) -> *mut ::chlorine::c_void;
}
extern "C" {
    pub fn igImPowFloat(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn igImPowdouble(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn igImLogFloat(x: f32) -> f32;
}
extern "C" {
    pub fn igImLogdouble(x: f64) -> f64;
}
extern "C" {
    pub fn igImAbsFloat(x: f32) -> f32;
}
extern "C" {
    pub fn igImAbsdouble(x: f64) -> f64;
}
extern "C" {
    pub fn igImSignFloat(x: f32) -> f32;
}
extern "C" {
    pub fn igImSigndouble(x: f64) -> f64;
}
extern "C" {
    pub fn igImMin(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
extern "C" {
    pub fn igImMax(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
extern "C" {
    pub fn igImClamp(pOut: *mut ImVec2, v: ImVec2, mn: ImVec2, mx: ImVec2);
}
extern "C" {
    pub fn igImLerpVec2Float(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, t: f32);
}
extern "C" {
    pub fn igImLerpVec2Vec2(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, t: ImVec2);
}
extern "C" {
    pub fn igImLerpVec4(pOut: *mut ImVec4, a: ImVec4, b: ImVec4, t: f32);
}
extern "C" {
    pub fn igImSaturate(f: f32) -> f32;
}
extern "C" {
    pub fn igImLengthSqrVec2(lhs: ImVec2) -> f32;
}
extern "C" {
    pub fn igImLengthSqrVec4(lhs: ImVec4) -> f32;
}
extern "C" {
    pub fn igImInvLength(lhs: ImVec2, fail_value: f32) -> f32;
}
extern "C" {
    pub fn igImFloorFloat(f: f32) -> f32;
}
extern "C" {
    pub fn igImFloorVec2(pOut: *mut ImVec2, v: ImVec2);
}
extern "C" {
    pub fn igImModPositive(a: ::chlorine::c_int, b: ::chlorine::c_int) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igImDot(a: ImVec2, b: ImVec2) -> f32;
}
extern "C" {
    pub fn igImRotate(pOut: *mut ImVec2, v: ImVec2, cos_a: f32, sin_a: f32);
}
extern "C" {
    pub fn igImLinearSweep(current: f32, target: f32, speed: f32) -> f32;
}
extern "C" {
    pub fn igImMul(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
extern "C" {
    pub fn igImBezierCubicCalc(pOut: *mut ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, t: f32);
}
extern "C" {
    pub fn igImBezierCubicClosestPoint(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        p: ImVec2,
        num_segments: ::chlorine::c_int,
    );
}
extern "C" {
    pub fn igImBezierCubicClosestPointCasteljau(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        p: ImVec2,
        tess_tol: f32,
    );
}
extern "C" {
    pub fn igImBezierQuadraticCalc(pOut: *mut ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, t: f32);
}
extern "C" {
    pub fn igImLineClosestPoint(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, p: ImVec2);
}
extern "C" {
    pub fn igImTriangleContainsPoint(a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2) -> bool;
}
extern "C" {
    pub fn igImTriangleClosestPoint(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2);
}
extern "C" {
    pub fn igImTriangleBarycentricCoords(
        a: ImVec2,
        b: ImVec2,
        c: ImVec2,
        p: ImVec2,
        out_u: *mut f32,
        out_v: *mut f32,
        out_w: *mut f32,
    );
}
extern "C" {
    pub fn igImTriangleArea(a: ImVec2, b: ImVec2, c: ImVec2) -> f32;
}
extern "C" {
    pub fn igImGetDirQuadrantFromDelta(dx: f32, dy: f32) -> ImGuiDir;
}
extern "C" {
    pub fn ImVec1_ImVec1Nil() -> *mut ImVec1;
}
extern "C" {
    pub fn ImVec1_destroy(self_: *mut ImVec1);
}
extern "C" {
    pub fn ImVec1_ImVec1Float(_x: f32) -> *mut ImVec1;
}
extern "C" {
    pub fn ImVec2ih_ImVec2ihNil() -> *mut ImVec2ih;
}
extern "C" {
    pub fn ImVec2ih_destroy(self_: *mut ImVec2ih);
}
extern "C" {
    pub fn ImVec2ih_ImVec2ihshort(_x: ::chlorine::c_short, _y: ::chlorine::c_short) -> *mut ImVec2ih;
}
extern "C" {
    pub fn ImVec2ih_ImVec2ihVec2(rhs: ImVec2) -> *mut ImVec2ih;
}
extern "C" {
    pub fn ImRect_ImRectNil() -> *mut ImRect;
}
extern "C" {
    pub fn ImRect_destroy(self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_ImRectVec2(min: ImVec2, max: ImVec2) -> *mut ImRect;
}
extern "C" {
    pub fn ImRect_ImRectVec4(v: ImVec4) -> *mut ImRect;
}
extern "C" {
    pub fn ImRect_ImRectFloat(x1: f32, y1: f32, x2: f32, y2: f32) -> *mut ImRect;
}
extern "C" {
    pub fn ImRect_GetCenter(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetSize(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetWidth(self_: *mut ImRect) -> f32;
}
extern "C" {
    pub fn ImRect_GetHeight(self_: *mut ImRect) -> f32;
}
extern "C" {
    pub fn ImRect_GetArea(self_: *mut ImRect) -> f32;
}
extern "C" {
    pub fn ImRect_GetTL(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetTR(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetBL(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetBR(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_ContainsVec2(self_: *mut ImRect, p: ImVec2) -> bool;
}
extern "C" {
    pub fn ImRect_ContainsRect(self_: *mut ImRect, r: ImRect) -> bool;
}
extern "C" {
    pub fn ImRect_Overlaps(self_: *mut ImRect, r: ImRect) -> bool;
}
extern "C" {
    pub fn ImRect_AddVec2(self_: *mut ImRect, p: ImVec2);
}
extern "C" {
    pub fn ImRect_AddRect(self_: *mut ImRect, r: ImRect);
}
extern "C" {
    pub fn ImRect_ExpandFloat(self_: *mut ImRect, amount: f32);
}
extern "C" {
    pub fn ImRect_ExpandVec2(self_: *mut ImRect, amount: ImVec2);
}
extern "C" {
    pub fn ImRect_Translate(self_: *mut ImRect, d: ImVec2);
}
extern "C" {
    pub fn ImRect_TranslateX(self_: *mut ImRect, dx: f32);
}
extern "C" {
    pub fn ImRect_TranslateY(self_: *mut ImRect, dy: f32);
}
extern "C" {
    pub fn ImRect_ClipWith(self_: *mut ImRect, r: ImRect);
}
extern "C" {
    pub fn ImRect_ClipWithFull(self_: *mut ImRect, r: ImRect);
}
extern "C" {
    pub fn ImRect_Floor(self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_IsInverted(self_: *mut ImRect) -> bool;
}
extern "C" {
    pub fn ImRect_ToVec4(pOut: *mut ImVec4, self_: *mut ImRect);
}
extern "C" {
    pub fn igImBitArrayTestBit(arr: *const ImU32, n: ::chlorine::c_int) -> bool;
}
extern "C" {
    pub fn igImBitArrayClearBit(arr: *mut ImU32, n: ::chlorine::c_int);
}
extern "C" {
    pub fn igImBitArraySetBit(arr: *mut ImU32, n: ::chlorine::c_int);
}
extern "C" {
    pub fn igImBitArraySetBitRange(arr: *mut ImU32, n: ::chlorine::c_int, n2: ::chlorine::c_int);
}
extern "C" {
    pub fn ImBitVector_Create(self_: *mut ImBitVector, sz: ::chlorine::c_int);
}
extern "C" {
    pub fn ImBitVector_Clear(self_: *mut ImBitVector);
}
extern "C" {
    pub fn ImBitVector_TestBit(self_: *mut ImBitVector, n: ::chlorine::c_int) -> bool;
}
extern "C" {
    pub fn ImBitVector_SetBit(self_: *mut ImBitVector, n: ::chlorine::c_int);
}
extern "C" {
    pub fn ImBitVector_ClearBit(self_: *mut ImBitVector, n: ::chlorine::c_int);
}
extern "C" {
    pub fn ImDrawListSharedData_ImDrawListSharedData() -> *mut ImDrawListSharedData;
}
extern "C" {
    pub fn ImDrawListSharedData_destroy(self_: *mut ImDrawListSharedData);
}
extern "C" {
    pub fn ImDrawListSharedData_SetCircleTessellationMaxError(self_: *mut ImDrawListSharedData, max_error: f32);
}
extern "C" {
    pub fn ImDrawDataBuilder_Clear(self_: *mut ImDrawDataBuilder);
}
extern "C" {
    pub fn ImDrawDataBuilder_ClearFreeMemory(self_: *mut ImDrawDataBuilder);
}
extern "C" {
    pub fn ImDrawDataBuilder_GetDrawListCount(self_: *mut ImDrawDataBuilder) -> ::chlorine::c_int;
}
extern "C" {
    pub fn ImDrawDataBuilder_FlattenIntoSingleLayer(self_: *mut ImDrawDataBuilder);
}
extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleModInt(idx: ImGuiStyleVar, v: ::chlorine::c_int) -> *mut ImGuiStyleMod;
}
extern "C" {
    pub fn ImGuiStyleMod_destroy(self_: *mut ImGuiStyleMod);
}
extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleModFloat(idx: ImGuiStyleVar, v: f32) -> *mut ImGuiStyleMod;
}
extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleModVec2(idx: ImGuiStyleVar, v: ImVec2) -> *mut ImGuiStyleMod;
}
extern "C" {
    pub fn ImGuiMenuColumns_ImGuiMenuColumns() -> *mut ImGuiMenuColumns;
}
extern "C" {
    pub fn ImGuiMenuColumns_destroy(self_: *mut ImGuiMenuColumns);
}
extern "C" {
    pub fn ImGuiMenuColumns_Update(self_: *mut ImGuiMenuColumns, count: ::chlorine::c_int, spacing: f32, clear: bool);
}
extern "C" {
    pub fn ImGuiMenuColumns_DeclColumns(self_: *mut ImGuiMenuColumns, w0: f32, w1: f32, w2: f32) -> f32;
}
extern "C" {
    pub fn ImGuiMenuColumns_CalcExtraSpace(self_: *mut ImGuiMenuColumns, avail_w: f32) -> f32;
}
extern "C" {
    pub fn ImGuiInputTextState_ImGuiInputTextState() -> *mut ImGuiInputTextState;
}
extern "C" {
    pub fn ImGuiInputTextState_destroy(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_ClearText(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_ClearFreeMemory(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_GetUndoAvailCount(self_: *mut ImGuiInputTextState) -> ::chlorine::c_int;
}
extern "C" {
    pub fn ImGuiInputTextState_GetRedoAvailCount(self_: *mut ImGuiInputTextState) -> ::chlorine::c_int;
}
extern "C" {
    pub fn ImGuiInputTextState_OnKeyPressed(self_: *mut ImGuiInputTextState, key: ::chlorine::c_int);
}
extern "C" {
    pub fn ImGuiInputTextState_CursorAnimReset(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_CursorClamp(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_HasSelection(self_: *mut ImGuiInputTextState) -> bool;
}
extern "C" {
    pub fn ImGuiInputTextState_ClearSelection(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_SelectAll(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiPopupData_ImGuiPopupData() -> *mut ImGuiPopupData;
}
extern "C" {
    pub fn ImGuiPopupData_destroy(self_: *mut ImGuiPopupData);
}
extern "C" {
    pub fn ImGuiNavMoveResult_ImGuiNavMoveResult() -> *mut ImGuiNavMoveResult;
}
extern "C" {
    pub fn ImGuiNavMoveResult_destroy(self_: *mut ImGuiNavMoveResult);
}
extern "C" {
    pub fn ImGuiNavMoveResult_Clear(self_: *mut ImGuiNavMoveResult);
}
extern "C" {
    pub fn ImGuiNextWindowData_ImGuiNextWindowData() -> *mut ImGuiNextWindowData;
}
extern "C" {
    pub fn ImGuiNextWindowData_destroy(self_: *mut ImGuiNextWindowData);
}
extern "C" {
    pub fn ImGuiNextWindowData_ClearFlags(self_: *mut ImGuiNextWindowData);
}
extern "C" {
    pub fn ImGuiNextItemData_ImGuiNextItemData() -> *mut ImGuiNextItemData;
}
extern "C" {
    pub fn ImGuiNextItemData_destroy(self_: *mut ImGuiNextItemData);
}
extern "C" {
    pub fn ImGuiNextItemData_ClearFlags(self_: *mut ImGuiNextItemData);
}
extern "C" {
    pub fn ImGuiPtrOrIndex_ImGuiPtrOrIndexPtr(ptr: *mut ::chlorine::c_void) -> *mut ImGuiPtrOrIndex;
}
extern "C" {
    pub fn ImGuiPtrOrIndex_destroy(self_: *mut ImGuiPtrOrIndex);
}
extern "C" {
    pub fn ImGuiPtrOrIndex_ImGuiPtrOrIndexInt(index: ::chlorine::c_int) -> *mut ImGuiPtrOrIndex;
}
extern "C" {
    pub fn ImGuiOldColumnData_ImGuiOldColumnData() -> *mut ImGuiOldColumnData;
}
extern "C" {
    pub fn ImGuiOldColumnData_destroy(self_: *mut ImGuiOldColumnData);
}
extern "C" {
    pub fn ImGuiOldColumns_ImGuiOldColumns() -> *mut ImGuiOldColumns;
}
extern "C" {
    pub fn ImGuiOldColumns_destroy(self_: *mut ImGuiOldColumns);
}
extern "C" {
    pub fn ImGuiDockNode_ImGuiDockNode(id: ImGuiID) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn ImGuiDockNode_destroy(self_: *mut ImGuiDockNode);
}
extern "C" {
    pub fn ImGuiDockNode_IsRootNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsDockSpace(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsFloatingNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsCentralNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsHiddenTabBar(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsNoTabBar(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsSplitNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsLeafNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsEmpty(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_GetMergedFlags(self_: *mut ImGuiDockNode) -> ImGuiDockNodeFlags;
}
extern "C" {
    pub fn ImGuiDockNode_Rect(pOut: *mut ImRect, self_: *mut ImGuiDockNode);
}
extern "C" {
    pub fn ImGuiDockContext_ImGuiDockContext() -> *mut ImGuiDockContext;
}
extern "C" {
    pub fn ImGuiDockContext_destroy(self_: *mut ImGuiDockContext);
}
extern "C" {
    pub fn ImGuiViewportP_ImGuiViewportP() -> *mut ImGuiViewportP;
}
extern "C" {
    pub fn ImGuiViewportP_destroy(self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_GetMainRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_GetWorkRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_UpdateWorkRect(self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_ClearRequestFlags(self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiWindowSettings_ImGuiWindowSettings() -> *mut ImGuiWindowSettings;
}
extern "C" {
    pub fn ImGuiWindowSettings_destroy(self_: *mut ImGuiWindowSettings);
}
extern "C" {
    pub fn ImGuiWindowSettings_GetName(self_: *mut ImGuiWindowSettings) -> *mut ::chlorine::c_char;
}
extern "C" {
    pub fn ImGuiSettingsHandler_ImGuiSettingsHandler() -> *mut ImGuiSettingsHandler;
}
extern "C" {
    pub fn ImGuiSettingsHandler_destroy(self_: *mut ImGuiSettingsHandler);
}
extern "C" {
    pub fn ImGuiMetricsConfig_ImGuiMetricsConfig() -> *mut ImGuiMetricsConfig;
}
extern "C" {
    pub fn ImGuiMetricsConfig_destroy(self_: *mut ImGuiMetricsConfig);
}
extern "C" {
    pub fn ImGuiStackSizes_ImGuiStackSizes() -> *mut ImGuiStackSizes;
}
extern "C" {
    pub fn ImGuiStackSizes_destroy(self_: *mut ImGuiStackSizes);
}
extern "C" {
    pub fn ImGuiStackSizes_SetToCurrentState(self_: *mut ImGuiStackSizes);
}
extern "C" {
    pub fn ImGuiStackSizes_CompareWithCurrentState(self_: *mut ImGuiStackSizes);
}
extern "C" {
    pub fn ImGuiContextHook_ImGuiContextHook() -> *mut ImGuiContextHook;
}
extern "C" {
    pub fn ImGuiContextHook_destroy(self_: *mut ImGuiContextHook);
}
extern "C" {
    pub fn ImGuiContext_ImGuiContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
extern "C" {
    pub fn ImGuiContext_destroy(self_: *mut ImGuiContext);
}
extern "C" {
    pub fn ImGuiWindow_ImGuiWindow(context: *mut ImGuiContext, name: *const ::chlorine::c_char) -> *mut ImGuiWindow;
}
extern "C" {
    pub fn ImGuiWindow_destroy(self_: *mut ImGuiWindow);
}
extern "C" {
    pub fn ImGuiWindow_GetIDStr(
        self_: *mut ImGuiWindow,
        str_: *const ::chlorine::c_char,
        str_end: *const ::chlorine::c_char,
    ) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_GetIDPtr(self_: *mut ImGuiWindow, ptr: *const ::chlorine::c_void) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_GetIDInt(self_: *mut ImGuiWindow, n: ::chlorine::c_int) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_GetIDNoKeepAliveStr(
        self_: *mut ImGuiWindow,
        str_: *const ::chlorine::c_char,
        str_end: *const ::chlorine::c_char,
    ) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_GetIDNoKeepAlivePtr(self_: *mut ImGuiWindow, ptr: *const ::chlorine::c_void) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_GetIDNoKeepAliveInt(self_: *mut ImGuiWindow, n: ::chlorine::c_int) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_GetIDFromRectangle(self_: *mut ImGuiWindow, r_abs: ImRect) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_Rect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
extern "C" {
    pub fn ImGuiWindow_CalcFontSize(self_: *mut ImGuiWindow) -> f32;
}
extern "C" {
    pub fn ImGuiWindow_TitleBarHeight(self_: *mut ImGuiWindow) -> f32;
}
extern "C" {
    pub fn ImGuiWindow_TitleBarRect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
extern "C" {
    pub fn ImGuiWindow_MenuBarHeight(self_: *mut ImGuiWindow) -> f32;
}
extern "C" {
    pub fn ImGuiWindow_MenuBarRect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
extern "C" {
    pub fn ImGuiLastItemDataBackup_ImGuiLastItemDataBackup() -> *mut ImGuiLastItemDataBackup;
}
extern "C" {
    pub fn ImGuiLastItemDataBackup_destroy(self_: *mut ImGuiLastItemDataBackup);
}
extern "C" {
    pub fn ImGuiLastItemDataBackup_Backup(self_: *mut ImGuiLastItemDataBackup);
}
extern "C" {
    pub fn ImGuiLastItemDataBackup_Restore(self_: *mut ImGuiLastItemDataBackup);
}
extern "C" {
    pub fn ImGuiTabItem_ImGuiTabItem() -> *mut ImGuiTabItem;
}
extern "C" {
    pub fn ImGuiTabItem_destroy(self_: *mut ImGuiTabItem);
}
extern "C" {
    pub fn ImGuiTabBar_ImGuiTabBar() -> *mut ImGuiTabBar;
}
extern "C" {
    pub fn ImGuiTabBar_destroy(self_: *mut ImGuiTabBar);
}
extern "C" {
    pub fn ImGuiTabBar_GetTabOrder(self_: *mut ImGuiTabBar, tab: *const ImGuiTabItem) -> ::chlorine::c_int;
}
extern "C" {
    pub fn ImGuiTabBar_GetTabName(self_: *mut ImGuiTabBar, tab: *const ImGuiTabItem) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn ImGuiTableColumn_ImGuiTableColumn() -> *mut ImGuiTableColumn;
}
extern "C" {
    pub fn ImGuiTableColumn_destroy(self_: *mut ImGuiTableColumn);
}
extern "C" {
    pub fn ImGuiTable_ImGuiTable() -> *mut ImGuiTable;
}
extern "C" {
    pub fn ImGuiTable_destroy(self_: *mut ImGuiTable);
}
extern "C" {
    pub fn ImGuiTableColumnSettings_ImGuiTableColumnSettings() -> *mut ImGuiTableColumnSettings;
}
extern "C" {
    pub fn ImGuiTableColumnSettings_destroy(self_: *mut ImGuiTableColumnSettings);
}
extern "C" {
    pub fn ImGuiTableSettings_ImGuiTableSettings() -> *mut ImGuiTableSettings;
}
extern "C" {
    pub fn ImGuiTableSettings_destroy(self_: *mut ImGuiTableSettings);
}
extern "C" {
    pub fn ImGuiTableSettings_GetColumnSettings(self_: *mut ImGuiTableSettings) -> *mut ImGuiTableColumnSettings;
}
extern "C" {
    pub fn igGetCurrentWindowRead() -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igGetCurrentWindow() -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igFindWindowByID(id: ImGuiID) -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igFindWindowByName(name: *const ::chlorine::c_char) -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igUpdateWindowParentAndRootLinks(
        window: *mut ImGuiWindow,
        flags: ImGuiWindowFlags,
        parent_window: *mut ImGuiWindow,
    );
}
extern "C" {
    pub fn igCalcWindowNextAutoFitSize(pOut: *mut ImVec2, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igIsWindowChildOf(window: *mut ImGuiWindow, potential_parent: *mut ImGuiWindow) -> bool;
}
extern "C" {
    pub fn igIsWindowAbove(potential_above: *mut ImGuiWindow, potential_below: *mut ImGuiWindow) -> bool;
}
extern "C" {
    pub fn igIsWindowNavFocusable(window: *mut ImGuiWindow) -> bool;
}
extern "C" {
    pub fn igGetWindowAllowedExtentRect(pOut: *mut ImRect, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igSetWindowPosWindowPtr(window: *mut ImGuiWindow, pos: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowSizeWindowPtr(window: *mut ImGuiWindow, size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowCollapsedWindowPtr(window: *mut ImGuiWindow, collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowHitTestHole(window: *mut ImGuiWindow, pos: ImVec2, size: ImVec2);
}
extern "C" {
    pub fn igFocusWindow(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igFocusTopMostWindowUnderOne(under_this_window: *mut ImGuiWindow, ignore_window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igBringWindowToFocusFront(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igBringWindowToDisplayFront(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igBringWindowToDisplayBack(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igSetCurrentFont(font: *mut ImFont);
}
extern "C" {
    pub fn igGetDefaultFont() -> *mut ImFont;
}
extern "C" {
    pub fn igGetForegroundDrawListWindowPtr(window: *mut ImGuiWindow) -> *mut ImDrawList;
}
extern "C" {
    pub fn igInitialize(context: *mut ImGuiContext);
}
extern "C" {
    pub fn igShutdown(context: *mut ImGuiContext);
}
extern "C" {
    pub fn igUpdateHoveredWindowAndCaptureFlags();
}
extern "C" {
    pub fn igStartMouseMovingWindow(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igStartMouseMovingWindowOrNode(
        window: *mut ImGuiWindow,
        node: *mut ImGuiDockNode,
        undock_floating_node: bool,
    );
}
extern "C" {
    pub fn igUpdateMouseMovingWindowNewFrame();
}
extern "C" {
    pub fn igUpdateMouseMovingWindowEndFrame();
}
extern "C" {
    pub fn igAddContextHook(context: *mut ImGuiContext, hook: *const ImGuiContextHook) -> ImGuiID;
}
extern "C" {
    pub fn igRemoveContextHook(context: *mut ImGuiContext, hook_to_remove: ImGuiID);
}
extern "C" {
    pub fn igCallContextHooks(context: *mut ImGuiContext, type_: ImGuiContextHookType);
}
extern "C" {
    pub fn igTranslateWindowsInViewport(viewport: *mut ImGuiViewportP, old_pos: ImVec2, new_pos: ImVec2);
}
extern "C" {
    pub fn igScaleWindowsInViewport(viewport: *mut ImGuiViewportP, scale: f32);
}
extern "C" {
    pub fn igDestroyPlatformWindow(viewport: *mut ImGuiViewportP);
}
extern "C" {
    pub fn igGetViewportPlatformMonitor(viewport: *mut ImGuiViewport) -> *const ImGuiPlatformMonitor;
}
extern "C" {
    pub fn igMarkIniSettingsDirtyNil();
}
extern "C" {
    pub fn igMarkIniSettingsDirtyWindowPtr(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igClearIniSettings();
}
extern "C" {
    pub fn igCreateNewWindowSettings(name: *const ::chlorine::c_char) -> *mut ImGuiWindowSettings;
}
extern "C" {
    pub fn igFindWindowSettings(id: ImGuiID) -> *mut ImGuiWindowSettings;
}
extern "C" {
    pub fn igFindOrCreateWindowSettings(name: *const ::chlorine::c_char) -> *mut ImGuiWindowSettings;
}
extern "C" {
    pub fn igFindSettingsHandler(type_name: *const ::chlorine::c_char) -> *mut ImGuiSettingsHandler;
}
extern "C" {
    pub fn igSetNextWindowScroll(scroll: ImVec2);
}
extern "C" {
    pub fn igSetScrollXWindowPtr(window: *mut ImGuiWindow, scroll_x: f32);
}
extern "C" {
    pub fn igSetScrollYWindowPtr(window: *mut ImGuiWindow, scroll_y: f32);
}
extern "C" {
    pub fn igSetScrollFromPosXWindowPtr(window: *mut ImGuiWindow, local_x: f32, center_x_ratio: f32);
}
extern "C" {
    pub fn igSetScrollFromPosYWindowPtr(window: *mut ImGuiWindow, local_y: f32, center_y_ratio: f32);
}
extern "C" {
    pub fn igScrollToBringRectIntoView(pOut: *mut ImVec2, window: *mut ImGuiWindow, item_rect: ImRect);
}
extern "C" {
    pub fn igGetItemID() -> ImGuiID;
}
extern "C" {
    pub fn igGetItemStatusFlags() -> ImGuiItemStatusFlags;
}
extern "C" {
    pub fn igGetActiveID() -> ImGuiID;
}
extern "C" {
    pub fn igGetFocusID() -> ImGuiID;
}
extern "C" {
    pub fn igGetItemsFlags() -> ImGuiItemFlags;
}
extern "C" {
    pub fn igSetActiveID(id: ImGuiID, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igSetFocusID(id: ImGuiID, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igClearActiveID();
}
extern "C" {
    pub fn igGetHoveredID() -> ImGuiID;
}
extern "C" {
    pub fn igSetHoveredID(id: ImGuiID);
}
extern "C" {
    pub fn igKeepAliveID(id: ImGuiID);
}
extern "C" {
    pub fn igMarkItemEdited(id: ImGuiID);
}
extern "C" {
    pub fn igPushOverrideID(id: ImGuiID);
}
extern "C" {
    pub fn igGetIDWithSeed(
        str_id_begin: *const ::chlorine::c_char,
        str_id_end: *const ::chlorine::c_char,
        seed: ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igItemSizeVec2(size: ImVec2, text_baseline_y: f32);
}
extern "C" {
    pub fn igItemSizeRect(bb: ImRect, text_baseline_y: f32);
}
extern "C" {
    pub fn igItemAdd(bb: ImRect, id: ImGuiID, nav_bb: *const ImRect) -> bool;
}
extern "C" {
    pub fn igItemHoverable(bb: ImRect, id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igIsClippedEx(bb: ImRect, id: ImGuiID, clip_even_when_logged: bool) -> bool;
}
extern "C" {
    pub fn igSetLastItemData(
        window: *mut ImGuiWindow,
        item_id: ImGuiID,
        status_flags: ImGuiItemStatusFlags,
        item_rect: ImRect,
    );
}
extern "C" {
    pub fn igFocusableItemRegister(window: *mut ImGuiWindow, id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igFocusableItemUnregister(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igCalcItemSize(pOut: *mut ImVec2, size: ImVec2, default_w: f32, default_h: f32);
}
extern "C" {
    pub fn igCalcWrapWidthForPos(pos: ImVec2, wrap_pos_x: f32) -> f32;
}
extern "C" {
    pub fn igPushMultiItemsWidths(components: ::chlorine::c_int, width_full: f32);
}
extern "C" {
    pub fn igPushItemFlag(option: ImGuiItemFlags, enabled: bool);
}
extern "C" {
    pub fn igPopItemFlag();
}
extern "C" {
    pub fn igIsItemToggledSelection() -> bool;
}
extern "C" {
    pub fn igGetContentRegionMaxAbs(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igShrinkWidths(items: *mut ImGuiShrinkWidthItem, count: ::chlorine::c_int, width_excess: f32);
}
extern "C" {
    pub fn igLogBegin(type_: ImGuiLogType, auto_open_depth: ::chlorine::c_int);
}
extern "C" {
    pub fn igLogToBuffer(auto_open_depth: ::chlorine::c_int);
}
extern "C" {
    pub fn igLogRenderedText(
        ref_pos: *const ImVec2,
        text: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
    );
}
extern "C" {
    pub fn igLogSetNextTextDecoration(prefix: *const ::chlorine::c_char, suffix: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igBeginChildEx(
        name: *const ::chlorine::c_char,
        id: ImGuiID,
        size_arg: ImVec2,
        border: bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igOpenPopupEx(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    pub fn igClosePopupToLevel(remaining: ::chlorine::c_int, restore_focus_to_window_under_popup: bool);
}
extern "C" {
    pub fn igClosePopupsOverWindow(ref_window: *mut ImGuiWindow, restore_focus_to_window_under_popup: bool);
}
extern "C" {
    pub fn igIsPopupOpenID(id: ImGuiID, popup_flags: ImGuiPopupFlags) -> bool;
}
extern "C" {
    pub fn igBeginPopupEx(id: ImGuiID, extra_flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    pub fn igBeginTooltipEx(extra_flags: ImGuiWindowFlags, tooltip_flags: ImGuiTooltipFlags);
}
extern "C" {
    pub fn igGetTopMostPopupModal() -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igFindBestWindowPosForPopup(pOut: *mut ImVec2, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igFindBestWindowPosForPopupEx(
        pOut: *mut ImVec2,
        ref_pos: ImVec2,
        size: ImVec2,
        last_dir: *mut ImGuiDir,
        r_outer: ImRect,
        r_avoid: ImRect,
        policy: ImGuiPopupPositionPolicy,
    );
}
extern "C" {
    pub fn igNavInitWindow(window: *mut ImGuiWindow, force_reinit: bool);
}
extern "C" {
    pub fn igNavMoveRequestButNoResultYet() -> bool;
}
extern "C" {
    pub fn igNavMoveRequestCancel();
}
extern "C" {
    pub fn igNavMoveRequestForward(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        bb_rel: ImRect,
        move_flags: ImGuiNavMoveFlags,
    );
}
extern "C" {
    pub fn igNavMoveRequestTryWrapping(window: *mut ImGuiWindow, move_flags: ImGuiNavMoveFlags);
}
extern "C" {
    pub fn igGetNavInputAmount(n: ImGuiNavInput, mode: ImGuiInputReadMode) -> f32;
}
extern "C" {
    pub fn igGetNavInputAmount2d(
        pOut: *mut ImVec2,
        dir_sources: ImGuiNavDirSourceFlags,
        mode: ImGuiInputReadMode,
        slow_factor: f32,
        fast_factor: f32,
    );
}
extern "C" {
    pub fn igCalcTypematicRepeatAmount(t0: f32, t1: f32, repeat_delay: f32, repeat_rate: f32) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igActivateItem(id: ImGuiID);
}
extern "C" {
    pub fn igSetNavID(id: ImGuiID, nav_layer: ::chlorine::c_int, focus_scope_id: ImGuiID, rect_rel: ImRect);
}
extern "C" {
    pub fn igPushFocusScope(id: ImGuiID);
}
extern "C" {
    pub fn igPopFocusScope();
}
extern "C" {
    pub fn igGetFocusedFocusScope() -> ImGuiID;
}
extern "C" {
    pub fn igGetFocusScope() -> ImGuiID;
}
extern "C" {
    pub fn igSetItemUsingMouseWheel();
}
extern "C" {
    pub fn igIsActiveIdUsingNavDir(dir: ImGuiDir) -> bool;
}
extern "C" {
    pub fn igIsActiveIdUsingNavInput(input: ImGuiNavInput) -> bool;
}
extern "C" {
    pub fn igIsActiveIdUsingKey(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsMouseDragPastThreshold(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
extern "C" {
    pub fn igIsKeyPressedMap(key: ImGuiKey, repeat: bool) -> bool;
}
extern "C" {
    pub fn igIsNavInputDown(n: ImGuiNavInput) -> bool;
}
extern "C" {
    pub fn igIsNavInputTest(n: ImGuiNavInput, rm: ImGuiInputReadMode) -> bool;
}
extern "C" {
    pub fn igGetMergedKeyModFlags() -> ImGuiKeyModFlags;
}
extern "C" {
    pub fn igDockContextInitialize(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextShutdown(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextClearNodes(ctx: *mut ImGuiContext, root_id: ImGuiID, clear_settings_refs: bool);
}
extern "C" {
    pub fn igDockContextRebuildNodes(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextNewFrameUpdateUndocking(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextNewFrameUpdateDocking(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextGenNodeID(ctx: *mut ImGuiContext) -> ImGuiID;
}
extern "C" {
    pub fn igDockContextQueueDock(
        ctx: *mut ImGuiContext,
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload: *mut ImGuiWindow,
        split_dir: ImGuiDir,
        split_ratio: f32,
        split_outer: bool,
    );
}
extern "C" {
    pub fn igDockContextQueueUndockWindow(ctx: *mut ImGuiContext, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igDockContextQueueUndockNode(ctx: *mut ImGuiContext, node: *mut ImGuiDockNode);
}
extern "C" {
    pub fn igDockContextCalcDropPosForDocking(
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload: *mut ImGuiWindow,
        split_dir: ImGuiDir,
        split_outer: bool,
        out_pos: *mut ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn igDockNodeBeginAmendTabBar(node: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn igDockNodeEndAmendTabBar();
}
extern "C" {
    pub fn igDockNodeGetRootNode(node: *mut ImGuiDockNode) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igDockNodeGetDepth(node: *const ImGuiDockNode) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igGetWindowDockNode() -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igGetWindowAlwaysWantOwnTabBar(window: *mut ImGuiWindow) -> bool;
}
extern "C" {
    pub fn igBeginDocked(window: *mut ImGuiWindow, p_open: *mut bool);
}
extern "C" {
    pub fn igBeginDockableDragDropSource(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igBeginDockableDragDropTarget(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igSetWindowDock(window: *mut ImGuiWindow, dock_id: ImGuiID, cond: ImGuiCond);
}
extern "C" {
    pub fn igDockBuilderDockWindow(window_name: *const ::chlorine::c_char, node_id: ImGuiID);
}
extern "C" {
    pub fn igDockBuilderGetNode(node_id: ImGuiID) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igDockBuilderGetCentralNode(node_id: ImGuiID) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igDockBuilderAddNode(node_id: ImGuiID, flags: ImGuiDockNodeFlags) -> ImGuiID;
}
extern "C" {
    pub fn igDockBuilderRemoveNode(node_id: ImGuiID);
}
extern "C" {
    pub fn igDockBuilderRemoveNodeDockedWindows(node_id: ImGuiID, clear_settings_refs: bool);
}
extern "C" {
    pub fn igDockBuilderRemoveNodeChildNodes(node_id: ImGuiID);
}
extern "C" {
    pub fn igDockBuilderSetNodePos(node_id: ImGuiID, pos: ImVec2);
}
extern "C" {
    pub fn igDockBuilderSetNodeSize(node_id: ImGuiID, size: ImVec2);
}
extern "C" {
    pub fn igDockBuilderSplitNode(
        node_id: ImGuiID,
        split_dir: ImGuiDir,
        size_ratio_for_node_at_dir: f32,
        out_id_at_dir: *mut ImGuiID,
        out_id_at_opposite_dir: *mut ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igDockBuilderCopyDockSpace(
        src_dockspace_id: ImGuiID,
        dst_dockspace_id: ImGuiID,
        in_window_remap_pairs: *mut ImVector_const_charPtr,
    );
}
extern "C" {
    pub fn igDockBuilderCopyNode(
        src_node_id: ImGuiID,
        dst_node_id: ImGuiID,
        out_node_remap_pairs: *mut ImVector_ImGuiID,
    );
}
extern "C" {
    pub fn igDockBuilderCopyWindowSettings(src_name: *const ::chlorine::c_char, dst_name: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igDockBuilderFinish(node_id: ImGuiID);
}
extern "C" {
    pub fn igBeginDragDropTargetCustom(bb: ImRect, id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igClearDragDrop();
}
extern "C" {
    pub fn igIsDragDropPayloadBeingAccepted() -> bool;
}
extern "C" {
    pub fn igSetWindowClipRectBeforeSetChannel(window: *mut ImGuiWindow, clip_rect: ImRect);
}
extern "C" {
    pub fn igBeginColumns(str_id: *const ::chlorine::c_char, count: ::chlorine::c_int, flags: ImGuiOldColumnFlags);
}
extern "C" {
    pub fn igEndColumns();
}
extern "C" {
    pub fn igPushColumnClipRect(column_index: ::chlorine::c_int);
}
extern "C" {
    pub fn igPushColumnsBackground();
}
extern "C" {
    pub fn igPopColumnsBackground();
}
extern "C" {
    pub fn igGetColumnsID(str_id: *const ::chlorine::c_char, count: ::chlorine::c_int) -> ImGuiID;
}
extern "C" {
    pub fn igFindOrCreateColumns(window: *mut ImGuiWindow, id: ImGuiID) -> *mut ImGuiOldColumns;
}
extern "C" {
    pub fn igGetColumnOffsetFromNorm(columns: *const ImGuiOldColumns, offset_norm: f32) -> f32;
}
extern "C" {
    pub fn igGetColumnNormFromOffset(columns: *const ImGuiOldColumns, offset: f32) -> f32;
}
extern "C" {
    pub fn igTableOpenContextMenu(column_n: ::chlorine::c_int);
}
extern "C" {
    pub fn igTableSetColumnEnabled(column_n: ::chlorine::c_int, enabled: bool);
}
extern "C" {
    pub fn igTableSetColumnWidth(column_n: ::chlorine::c_int, width: f32);
}
extern "C" {
    pub fn igTableSetColumnSortDirection(
        column_n: ::chlorine::c_int,
        sort_direction: ImGuiSortDirection,
        append_to_sort_specs: bool,
    );
}
extern "C" {
    pub fn igTableGetHoveredColumn() -> ::chlorine::c_int;
}
extern "C" {
    pub fn igTableGetHeaderRowHeight() -> f32;
}
extern "C" {
    pub fn igTablePushBackgroundChannel();
}
extern "C" {
    pub fn igTablePopBackgroundChannel();
}
extern "C" {
    pub fn igGetCurrentTable() -> *mut ImGuiTable;
}
extern "C" {
    pub fn igTableFindByID(id: ImGuiID) -> *mut ImGuiTable;
}
extern "C" {
    pub fn igBeginTableEx(
        name: *const ::chlorine::c_char,
        id: ImGuiID,
        columns_count: ::chlorine::c_int,
        flags: ImGuiTableFlags,
        outer_size: ImVec2,
        inner_width: f32,
    ) -> bool;
}
extern "C" {
    pub fn igTableBeginInitMemory(table: *mut ImGuiTable, columns_count: ::chlorine::c_int);
}
extern "C" {
    pub fn igTableBeginApplyRequests(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableSetupDrawChannels(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableUpdateLayout(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableUpdateBorders(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableUpdateColumnsWeightFromWidth(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableDrawBorders(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableDrawContextMenu(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableMergeDrawChannels(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableSortSpecsSanitize(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableSortSpecsBuild(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGetColumnNextSortDirection(column: *mut ImGuiTableColumn) -> ImGuiSortDirection;
}
extern "C" {
    pub fn igTableFixColumnSortDirection(table: *mut ImGuiTable, column: *mut ImGuiTableColumn);
}
extern "C" {
    pub fn igTableGetColumnWidthAuto(table: *mut ImGuiTable, column: *mut ImGuiTableColumn) -> f32;
}
extern "C" {
    pub fn igTableBeginRow(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableEndRow(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableBeginCell(table: *mut ImGuiTable, column_n: ::chlorine::c_int);
}
extern "C" {
    pub fn igTableEndCell(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGetCellBgRect(pOut: *mut ImRect, table: *const ImGuiTable, column_n: ::chlorine::c_int);
}
extern "C" {
    pub fn igTableGetColumnNameTablePtr(
        table: *const ImGuiTable,
        column_n: ::chlorine::c_int,
    ) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igTableGetColumnResizeID(
        table: *const ImGuiTable,
        column_n: ::chlorine::c_int,
        instance_no: ::chlorine::c_int,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igTableGetMaxColumnWidth(table: *const ImGuiTable, column_n: ::chlorine::c_int) -> f32;
}
extern "C" {
    pub fn igTableSetColumnWidthAutoSingle(table: *mut ImGuiTable, column_n: ::chlorine::c_int);
}
extern "C" {
    pub fn igTableSetColumnWidthAutoAll(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableRemove(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGcCompactTransientBuffers(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGcCompactSettings();
}
extern "C" {
    pub fn igTableLoadSettings(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableSaveSettings(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableResetSettings(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGetBoundSettings(table: *mut ImGuiTable) -> *mut ImGuiTableSettings;
}
extern "C" {
    pub fn igTableSettingsInstallHandler(context: *mut ImGuiContext);
}
extern "C" {
    pub fn igTableSettingsCreate(id: ImGuiID, columns_count: ::chlorine::c_int) -> *mut ImGuiTableSettings;
}
extern "C" {
    pub fn igTableSettingsFindByID(id: ImGuiID) -> *mut ImGuiTableSettings;
}
extern "C" {
    pub fn igBeginTabBarEx(
        tab_bar: *mut ImGuiTabBar,
        bb: ImRect,
        flags: ImGuiTabBarFlags,
        dock_node: *mut ImGuiDockNode,
    ) -> bool;
}
extern "C" {
    pub fn igTabBarFindTabByID(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID) -> *mut ImGuiTabItem;
}
extern "C" {
    pub fn igTabBarFindMostRecentlySelectedTabForActiveWindow(tab_bar: *mut ImGuiTabBar) -> *mut ImGuiTabItem;
}
extern "C" {
    pub fn igTabBarAddTab(tab_bar: *mut ImGuiTabBar, tab_flags: ImGuiTabItemFlags, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igTabBarRemoveTab(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID);
}
extern "C" {
    pub fn igTabBarCloseTab(tab_bar: *mut ImGuiTabBar, tab: *mut ImGuiTabItem);
}
extern "C" {
    pub fn igTabBarQueueReorder(tab_bar: *mut ImGuiTabBar, tab: *const ImGuiTabItem, dir: ::chlorine::c_int);
}
extern "C" {
    pub fn igTabBarProcessReorder(tab_bar: *mut ImGuiTabBar) -> bool;
}
extern "C" {
    pub fn igTabItemEx(
        tab_bar: *mut ImGuiTabBar,
        label: *const ::chlorine::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
        docked_window: *mut ImGuiWindow,
    ) -> bool;
}
extern "C" {
    pub fn igTabItemCalcSize(pOut: *mut ImVec2, label: *const ::chlorine::c_char, has_close_button: bool);
}
extern "C" {
    pub fn igTabItemBackground(draw_list: *mut ImDrawList, bb: ImRect, flags: ImGuiTabItemFlags, col: ImU32);
}
extern "C" {
    pub fn igTabItemLabelAndCloseButton(
        draw_list: *mut ImDrawList,
        bb: ImRect,
        flags: ImGuiTabItemFlags,
        frame_padding: ImVec2,
        label: *const ::chlorine::c_char,
        tab_id: ImGuiID,
        close_button_id: ImGuiID,
        is_contents_visible: bool,
        out_just_closed: *mut bool,
        out_text_clipped: *mut bool,
    );
}
extern "C" {
    pub fn igRenderText(
        pos: ImVec2,
        text: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
        hide_text_after_hash: bool,
    );
}
extern "C" {
    pub fn igRenderTextWrapped(
        pos: ImVec2,
        text: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
        wrap_width: f32,
    );
}
extern "C" {
    pub fn igRenderTextClipped(
        pos_min: ImVec2,
        pos_max: ImVec2,
        text: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
        text_size_if_known: *const ImVec2,
        align: ImVec2,
        clip_rect: *const ImRect,
    );
}
extern "C" {
    pub fn igRenderTextClippedEx(
        draw_list: *mut ImDrawList,
        pos_min: ImVec2,
        pos_max: ImVec2,
        text: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
        text_size_if_known: *const ImVec2,
        align: ImVec2,
        clip_rect: *const ImRect,
    );
}
extern "C" {
    pub fn igRenderTextEllipsis(
        draw_list: *mut ImDrawList,
        pos_min: ImVec2,
        pos_max: ImVec2,
        clip_max_x: f32,
        ellipsis_max_x: f32,
        text: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
        text_size_if_known: *const ImVec2,
    );
}
extern "C" {
    pub fn igRenderFrame(p_min: ImVec2, p_max: ImVec2, fill_col: ImU32, border: bool, rounding: f32);
}
extern "C" {
    pub fn igRenderFrameBorder(p_min: ImVec2, p_max: ImVec2, rounding: f32);
}
extern "C" {
    pub fn igRenderColorRectWithAlphaCheckerboard(
        draw_list: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        grid_step: f32,
        grid_off: ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn igRenderNavHighlight(bb: ImRect, id: ImGuiID, flags: ImGuiNavHighlightFlags);
}
extern "C" {
    pub fn igFindRenderedTextEnd(
        text: *const ::chlorine::c_char,
        text_end: *const ::chlorine::c_char,
    ) -> *const ::chlorine::c_char;
}
extern "C" {
    pub fn igRenderArrow(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32, dir: ImGuiDir, scale: f32);
}
extern "C" {
    pub fn igRenderBullet(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32);
}
extern "C" {
    pub fn igRenderCheckMark(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32, sz: f32);
}
extern "C" {
    pub fn igRenderMouseCursor(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        scale: f32,
        mouse_cursor: ImGuiMouseCursor,
        col_fill: ImU32,
        col_border: ImU32,
        col_shadow: ImU32,
    );
}
extern "C" {
    pub fn igRenderArrowPointingAt(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        half_sz: ImVec2,
        direction: ImGuiDir,
        col: ImU32,
    );
}
extern "C" {
    pub fn igRenderArrowDockMenu(draw_list: *mut ImDrawList, p_min: ImVec2, sz: f32, col: ImU32);
}
extern "C" {
    pub fn igRenderRectFilledRangeH(
        draw_list: *mut ImDrawList,
        rect: ImRect,
        col: ImU32,
        x_start_norm: f32,
        x_end_norm: f32,
        rounding: f32,
    );
}
extern "C" {
    pub fn igRenderRectFilledWithHole(
        draw_list: *mut ImDrawList,
        outer: ImRect,
        inner: ImRect,
        col: ImU32,
        rounding: f32,
    );
}
extern "C" {
    pub fn igTextEx(text: *const ::chlorine::c_char, text_end: *const ::chlorine::c_char, flags: ImGuiTextFlags);
}
extern "C" {
    pub fn igButtonEx(label: *const ::chlorine::c_char, size_arg: ImVec2, flags: ImGuiButtonFlags) -> bool;
}
extern "C" {
    pub fn igCloseButton(id: ImGuiID, pos: ImVec2) -> bool;
}
extern "C" {
    pub fn igCollapseButton(id: ImGuiID, pos: ImVec2, dock_node: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn igArrowButtonEx(
        str_id: *const ::chlorine::c_char,
        dir: ImGuiDir,
        size_arg: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    pub fn igScrollbar(axis: ImGuiAxis);
}
extern "C" {
    pub fn igScrollbarEx(
        bb: ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        p_scroll_v: *mut f32,
        avail_v: f32,
        contents_v: f32,
        flags: ImDrawFlags,
    ) -> bool;
}
extern "C" {
    pub fn igImageButtonEx(
        id: ImGuiID,
        texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        padding: ImVec2,
        bg_col: ImVec4,
        tint_col: ImVec4,
    ) -> bool;
}
extern "C" {
    pub fn igGetWindowScrollbarRect(pOut: *mut ImRect, window: *mut ImGuiWindow, axis: ImGuiAxis);
}
extern "C" {
    pub fn igGetWindowScrollbarID(window: *mut ImGuiWindow, axis: ImGuiAxis) -> ImGuiID;
}
extern "C" {
    pub fn igGetWindowResizeID(window: *mut ImGuiWindow, n: ::chlorine::c_int) -> ImGuiID;
}
extern "C" {
    pub fn igSeparatorEx(flags: ImGuiSeparatorFlags);
}
extern "C" {
    pub fn igCheckboxFlagsS64Ptr(label: *const ::chlorine::c_char, flags: *mut ImS64, flags_value: ImS64) -> bool;
}
extern "C" {
    pub fn igCheckboxFlagsU64Ptr(label: *const ::chlorine::c_char, flags: *mut ImU64, flags_value: ImU64) -> bool;
}
extern "C" {
    pub fn igButtonBehavior(
        bb: ImRect,
        id: ImGuiID,
        out_hovered: *mut bool,
        out_held: *mut bool,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragBehavior(
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::chlorine::c_void,
        v_speed: f32,
        p_min: *const ::chlorine::c_void,
        p_max: *const ::chlorine::c_void,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderBehavior(
        bb: ImRect,
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::chlorine::c_void,
        p_min: *const ::chlorine::c_void,
        p_max: *const ::chlorine::c_void,
        format: *const ::chlorine::c_char,
        flags: ImGuiSliderFlags,
        out_grab_bb: *mut ImRect,
    ) -> bool;
}
extern "C" {
    pub fn igSplitterBehavior(
        bb: ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        size1: *mut f32,
        size2: *mut f32,
        min_size1: f32,
        min_size2: f32,
        hover_extend: f32,
        hover_visibility_delay: f32,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeBehavior(
        id: ImGuiID,
        flags: ImGuiTreeNodeFlags,
        label: *const ::chlorine::c_char,
        label_end: *const ::chlorine::c_char,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeBehaviorIsOpen(id: ImGuiID, flags: ImGuiTreeNodeFlags) -> bool;
}
extern "C" {
    pub fn igTreePushOverrideID(id: ImGuiID);
}
extern "C" {
    pub fn igDataTypeGetInfo(data_type: ImGuiDataType) -> *const ImGuiDataTypeInfo;
}
extern "C" {
    pub fn igDataTypeFormatString(
        buf: *mut ::chlorine::c_char,
        buf_size: ::chlorine::c_int,
        data_type: ImGuiDataType,
        p_data: *const ::chlorine::c_void,
        format: *const ::chlorine::c_char,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igDataTypeApplyOp(
        data_type: ImGuiDataType,
        op: ::chlorine::c_int,
        output: *mut ::chlorine::c_void,
        arg_1: *const ::chlorine::c_void,
        arg_2: *const ::chlorine::c_void,
    );
}
extern "C" {
    pub fn igDataTypeApplyOpFromText(
        buf: *const ::chlorine::c_char,
        initial_value_buf: *const ::chlorine::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::chlorine::c_void,
        format: *const ::chlorine::c_char,
    ) -> bool;
}
extern "C" {
    pub fn igDataTypeCompare(
        data_type: ImGuiDataType,
        arg_1: *const ::chlorine::c_void,
        arg_2: *const ::chlorine::c_void,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igDataTypeClamp(
        data_type: ImGuiDataType,
        p_data: *mut ::chlorine::c_void,
        p_min: *const ::chlorine::c_void,
        p_max: *const ::chlorine::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputTextEx(
        label: *const ::chlorine::c_char,
        hint: *const ::chlorine::c_char,
        buf: *mut ::chlorine::c_char,
        buf_size: ::chlorine::c_int,
        size_arg: ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::chlorine::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igTempInputText(
        bb: ImRect,
        id: ImGuiID,
        label: *const ::chlorine::c_char,
        buf: *mut ::chlorine::c_char,
        buf_size: ::chlorine::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igTempInputScalar(
        bb: ImRect,
        id: ImGuiID,
        label: *const ::chlorine::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::chlorine::c_void,
        format: *const ::chlorine::c_char,
        p_clamp_min: *const ::chlorine::c_void,
        p_clamp_max: *const ::chlorine::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igTempInputIsActive(id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igGetInputTextState(id: ImGuiID) -> *mut ImGuiInputTextState;
}
extern "C" {
    pub fn igColorTooltip(text: *const ::chlorine::c_char, col: *const f32, flags: ImGuiColorEditFlags);
}
extern "C" {
    pub fn igColorEditOptionsPopup(col: *const f32, flags: ImGuiColorEditFlags);
}
extern "C" {
    pub fn igColorPickerOptionsPopup(ref_col: *const f32, flags: ImGuiColorEditFlags);
}
extern "C" {
    pub fn igPlotEx(
        plot_type: ImGuiPlotType,
        label: *const ::chlorine::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(data: *mut ::chlorine::c_void, idx: ::chlorine::c_int) -> f32,
        >,
        data: *mut ::chlorine::c_void,
        values_count: ::chlorine::c_int,
        values_offset: ::chlorine::c_int,
        overlay_text: *const ::chlorine::c_char,
        scale_min: f32,
        scale_max: f32,
        frame_size: ImVec2,
    ) -> ::chlorine::c_int;
}
extern "C" {
    pub fn igShadeVertsLinearColorGradientKeepAlpha(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::chlorine::c_int,
        vert_end_idx: ::chlorine::c_int,
        gradient_p0: ImVec2,
        gradient_p1: ImVec2,
        col0: ImU32,
        col1: ImU32,
    );
}
extern "C" {
    pub fn igShadeVertsLinearUV(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::chlorine::c_int,
        vert_end_idx: ::chlorine::c_int,
        a: ImVec2,
        b: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        clamp: bool,
    );
}
extern "C" {
    pub fn igGcCompactTransientMiscBuffers();
}
extern "C" {
    pub fn igGcCompactTransientWindowBuffers(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igGcAwakeTransientWindowBuffers(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igErrorCheckEndFrameRecover(log_callback: ImGuiErrorLogCallback, user_data: *mut ::chlorine::c_void);
}
extern "C" {
    pub fn igDebugDrawItemRect(col: ImU32);
}
extern "C" {
    pub fn igDebugStartItemPicker();
}
extern "C" {
    pub fn igDebugNodeColumns(columns: *mut ImGuiOldColumns);
}
extern "C" {
    pub fn igDebugNodeDockNode(node: *mut ImGuiDockNode, label: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igDebugNodeDrawList(
        window: *mut ImGuiWindow,
        viewport: *mut ImGuiViewportP,
        draw_list: *const ImDrawList,
        label: *const ::chlorine::c_char,
    );
}
extern "C" {
    pub fn igDebugNodeDrawCmdShowMeshAndBoundingBox(
        out_draw_list: *mut ImDrawList,
        draw_list: *const ImDrawList,
        draw_cmd: *const ImDrawCmd,
        show_mesh: bool,
        show_aabb: bool,
    );
}
extern "C" {
    pub fn igDebugNodeStorage(storage: *mut ImGuiStorage, label: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igDebugNodeTabBar(tab_bar: *mut ImGuiTabBar, label: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igDebugNodeTable(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igDebugNodeTableSettings(settings: *mut ImGuiTableSettings);
}
extern "C" {
    pub fn igDebugNodeWindow(window: *mut ImGuiWindow, label: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igDebugNodeWindowSettings(settings: *mut ImGuiWindowSettings);
}
extern "C" {
    pub fn igDebugNodeWindowsList(windows: *mut ImVector_ImGuiWindowPtr, label: *const ::chlorine::c_char);
}
extern "C" {
    pub fn igDebugNodeViewport(viewport: *mut ImGuiViewportP);
}
extern "C" {
    pub fn igDebugRenderViewportThumbnail(draw_list: *mut ImDrawList, viewport: *mut ImGuiViewportP, bb: ImRect);
}
extern "C" {
    pub fn igImFontAtlasGetBuilderForStbTruetype() -> *const ImFontBuilderIO;
}
extern "C" {
    pub fn igImFontAtlasBuildInit(atlas: *mut ImFontAtlas);
}
extern "C" {
    pub fn igImFontAtlasBuildSetupFont(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        font_config: *mut ImFontConfig,
        ascent: f32,
        descent: f32,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildPackCustomRects(atlas: *mut ImFontAtlas, stbrp_context_opaque: *mut ::chlorine::c_void);
}
extern "C" {
    pub fn igImFontAtlasBuildFinish(atlas: *mut ImFontAtlas);
}
extern "C" {
    pub fn igImFontAtlasBuildRender8bppRectFromString(
        atlas: *mut ImFontAtlas,
        x: ::chlorine::c_int,
        y: ::chlorine::c_int,
        w: ::chlorine::c_int,
        h: ::chlorine::c_int,
        in_str: *const ::chlorine::c_char,
        in_marker_char: ::chlorine::c_char,
        in_marker_pixel_value: ::chlorine::c_uchar,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildRender32bppRectFromString(
        atlas: *mut ImFontAtlas,
        x: ::chlorine::c_int,
        y: ::chlorine::c_int,
        w: ::chlorine::c_int,
        h: ::chlorine::c_int,
        in_str: *const ::chlorine::c_char,
        in_marker_char: ::chlorine::c_char,
        in_marker_pixel_value: ::chlorine::c_uint,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildMultiplyCalcLookupTable(out_table: *mut ::chlorine::c_uchar, in_multiply_factor: f32);
}
extern "C" {
    pub fn igImFontAtlasBuildMultiplyRectAlpha8(
        table: *const ::chlorine::c_uchar,
        pixels: *mut ::chlorine::c_uchar,
        x: ::chlorine::c_int,
        y: ::chlorine::c_int,
        w: ::chlorine::c_int,
        h: ::chlorine::c_int,
        stride: ::chlorine::c_int,
    );
}
extern "C" {
    #[doc = "hand written functions"]
    pub fn igLogText(fmt: *const ::chlorine::c_char, ...);
}
extern "C" {
    pub fn ImGuiTextBuffer_appendf(buffer: *mut ImGuiTextBuffer, fmt: *const ::chlorine::c_char, ...);
}
extern "C" {
    pub fn igGET_FLT_MAX() -> f32;
}
extern "C" {
    pub fn igGET_FLT_MIN() -> f32;
}
extern "C" {
    pub fn ImVector_ImWchar_create() -> *mut ImVector_ImWchar;
}
extern "C" {
    pub fn ImVector_ImWchar_destroy(self_: *mut ImVector_ImWchar);
}
extern "C" {
    pub fn ImVector_ImWchar_Init(p: *mut ImVector_ImWchar);
}
extern "C" {
    pub fn ImVector_ImWchar_UnInit(p: *mut ImVector_ImWchar);
}
pub type __builtin_va_list = *mut ::chlorine::c_char;
